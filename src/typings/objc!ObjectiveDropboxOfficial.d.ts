
declare class DBASYNCLaunchEmptyResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBASYNCLaunchEmptyResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBASYNCLaunchEmptyResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly tag: DBASYNCLaunchEmptyResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBASYNCLaunchEmptyResultSerializer extends NSObject {

	static alloc(): DBASYNCLaunchEmptyResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBASYNCLaunchEmptyResult;

	static new(): DBASYNCLaunchEmptyResultSerializer; // inherited from NSObject

	static serialize(instance: DBASYNCLaunchEmptyResult): NSDictionary<string, any>;
}

declare const enum DBASYNCLaunchEmptyResultTag {

	AsyncJobId = 0,

	Complete = 1
}

declare class DBASYNCLaunchResultBase extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBASYNCLaunchResultBase; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBASYNCLaunchResultBase; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly tag: DBASYNCLaunchResultBaseTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	isAsyncJobId(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBASYNCLaunchResultBaseSerializer extends NSObject {

	static alloc(): DBASYNCLaunchResultBaseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBASYNCLaunchResultBase;

	static new(): DBASYNCLaunchResultBaseSerializer; // inherited from NSObject

	static serialize(instance: DBASYNCLaunchResultBase): NSDictionary<string, any>;
}

declare const enum DBASYNCLaunchResultBaseTag {

	AsyncJobId = 0
}

declare class DBASYNCPollArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBASYNCPollArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBASYNCPollArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBASYNCPollArgSerializer extends NSObject {

	static alloc(): DBASYNCPollArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBASYNCPollArg;

	static new(): DBASYNCPollArgSerializer; // inherited from NSObject

	static serialize(instance: DBASYNCPollArg): NSDictionary<string, any>;
}

declare class DBASYNCPollEmptyResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBASYNCPollEmptyResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBASYNCPollEmptyResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBASYNCPollEmptyResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: void; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBASYNCPollEmptyResultSerializer extends NSObject {

	static alloc(): DBASYNCPollEmptyResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBASYNCPollEmptyResult;

	static new(): DBASYNCPollEmptyResultSerializer; // inherited from NSObject

	static serialize(instance: DBASYNCPollEmptyResult): NSDictionary<string, any>;
}

declare const enum DBASYNCPollEmptyResultTag {

	InProgress = 0,

	Complete = 1
}

declare class DBASYNCPollError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBASYNCPollError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBASYNCPollError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBASYNCPollErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { internalError: void; });

	constructor(o: { invalidAsyncJobId: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInternalError(): this;

	initWithInvalidAsyncJobId(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInternalError(): boolean;

	isInvalidAsyncJobId(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBASYNCPollErrorSerializer extends NSObject {

	static alloc(): DBASYNCPollErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBASYNCPollError;

	static new(): DBASYNCPollErrorSerializer; // inherited from NSObject

	static serialize(instance: DBASYNCPollError): NSDictionary<string, any>;
}

declare const enum DBASYNCPollErrorTag {

	InvalidAsyncJobId = 0,

	InternalError = 1,

	Other = 2
}

declare class DBASYNCPollResultBase extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBASYNCPollResultBase; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBASYNCPollResultBase; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBASYNCPollResultBaseTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInProgress(): this;

	isEqual(object: any): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBASYNCPollResultBaseSerializer extends NSObject {

	static alloc(): DBASYNCPollResultBaseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBASYNCPollResultBase;

	static new(): DBASYNCPollResultBaseSerializer; // inherited from NSObject

	static serialize(instance: DBASYNCPollResultBase): NSDictionary<string, any>;
}

declare const enum DBASYNCPollResultBaseTag {

	InProgress = 0
}

declare class DBAUTHAccessError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHAccessError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHAccessError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invalidAccountType: DBAUTHInvalidAccountTypeError;

	readonly paperAccessDenied: DBAUTHPaperAccessError;

	readonly tag: DBAUTHAccessErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidAccountType: DBAUTHInvalidAccountTypeError; });

	constructor(o: { other: void; });

	constructor(o: { paperAccessDenied: DBAUTHPaperAccessError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidAccountType(invalidAccountType: DBAUTHInvalidAccountTypeError): this;

	initWithOther(): this;

	initWithPaperAccessDenied(paperAccessDenied: DBAUTHPaperAccessError): this;

	isEqual(object: any): boolean;

	isInvalidAccountType(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPaperAccessDenied(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBAUTHAccessErrorSerializer extends NSObject {

	static alloc(): DBAUTHAccessErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHAccessError;

	static new(): DBAUTHAccessErrorSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHAccessError): NSDictionary<string, any>;
}

declare const enum DBAUTHAccessErrorTag {

	InvalidAccountType = 0,

	PaperAccessDenied = 1,

	Other = 2
}

declare class DBAUTHAppAuthRoutes extends NSObject {

	static alloc(): DBAUTHAppAuthRoutes; // inherited from NSObject

	static new(): DBAUTHAppAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	init(client: DBTransportClient): this;

	tokenFromOauth1Oauth1TokenSecret(oauth1Token: string, oauth1TokenSecret: string): DBRpcTask<DBAUTHTokenFromOAuth1Result, DBAUTHTokenFromOAuth1Error>;
}

declare class DBAUTHAuthError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHAuthError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHAuthError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBAUTHAuthErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { expiredAccessToken: void; });

	constructor(o: { invalidAccessToken: void; });

	constructor(o: { invalidSelectAdmin: void; });

	constructor(o: { invalidSelectUser: void; });

	constructor(o: { other: void; });

	constructor(o: { userSuspended: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithExpiredAccessToken(): this;

	initWithInvalidAccessToken(): this;

	initWithInvalidSelectAdmin(): this;

	initWithInvalidSelectUser(): this;

	initWithOther(): this;

	initWithUserSuspended(): this;

	isEqual(object: any): boolean;

	isExpiredAccessToken(): boolean;

	isInvalidAccessToken(): boolean;

	isInvalidSelectAdmin(): boolean;

	isInvalidSelectUser(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUserSuspended(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBAUTHAuthErrorSerializer extends NSObject {

	static alloc(): DBAUTHAuthErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHAuthError;

	static new(): DBAUTHAuthErrorSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHAuthError): NSDictionary<string, any>;
}

declare const enum DBAUTHAuthErrorTag {

	InvalidAccessToken = 0,

	InvalidSelectUser = 1,

	InvalidSelectAdmin = 2,

	UserSuspended = 3,

	ExpiredAccessToken = 4,

	Other = 5
}

declare class DBAUTHInvalidAccountTypeError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHInvalidAccountTypeError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHInvalidAccountTypeError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBAUTHInvalidAccountTypeErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { endpoint: void; });

	constructor(o: { feature: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEndpoint(): this;

	initWithFeature(): this;

	initWithOther(): this;

	isEndpoint(): boolean;

	isEqual(object: any): boolean;

	isFeature(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBAUTHInvalidAccountTypeErrorSerializer extends NSObject {

	static alloc(): DBAUTHInvalidAccountTypeErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHInvalidAccountTypeError;

	static new(): DBAUTHInvalidAccountTypeErrorSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHInvalidAccountTypeError): NSDictionary<string, any>;
}

declare const enum DBAUTHInvalidAccountTypeErrorTag {

	Endpoint = 0,

	Feature = 1,

	Other = 2
}

declare class DBAUTHPaperAccessError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHPaperAccessError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHPaperAccessError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBAUTHPaperAccessErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { notPaperUser: void; });

	constructor(o: { other: void; });

	constructor(o: { paperDisabled: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNotPaperUser(): this;

	initWithOther(): this;

	initWithPaperDisabled(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotPaperUser(): boolean;

	isOther(): boolean;

	isPaperDisabled(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBAUTHPaperAccessErrorSerializer extends NSObject {

	static alloc(): DBAUTHPaperAccessErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHPaperAccessError;

	static new(): DBAUTHPaperAccessErrorSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHPaperAccessError): NSDictionary<string, any>;
}

declare const enum DBAUTHPaperAccessErrorTag {

	PaperDisabled = 0,

	NotPaperUser = 1,

	Other = 2
}

declare class DBAUTHRateLimitError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHRateLimitError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHRateLimitError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly reason: DBAUTHRateLimitReason;

	readonly retryAfter: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { reason: DBAUTHRateLimitReason; });

	constructor(o: { reason: DBAUTHRateLimitReason; retryAfter: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithReason(reason: DBAUTHRateLimitReason): this;

	initWithReasonRetryAfter(reason: DBAUTHRateLimitReason, retryAfter: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBAUTHRateLimitErrorSerializer extends NSObject {

	static alloc(): DBAUTHRateLimitErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHRateLimitError;

	static new(): DBAUTHRateLimitErrorSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHRateLimitError): NSDictionary<string, any>;
}

declare class DBAUTHRateLimitReason extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHRateLimitReason; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHRateLimitReason; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBAUTHRateLimitReasonTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { tooManyRequests: void; });

	constructor(o: { tooManyWriteOperations: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTooManyRequests(): this;

	initWithTooManyWriteOperations(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTooManyRequests(): boolean;

	isTooManyWriteOperations(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBAUTHRateLimitReasonSerializer extends NSObject {

	static alloc(): DBAUTHRateLimitReasonSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHRateLimitReason;

	static new(): DBAUTHRateLimitReasonSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHRateLimitReason): NSDictionary<string, any>;
}

declare const enum DBAUTHRateLimitReasonTag {

	TooManyRequests = 0,

	TooManyWriteOperations = 1,

	Other = 2
}

declare class DBAUTHRouteObjects extends NSObject {

	static DBAUTHTokenFromOauth1(): DBRoute;

	static DBAUTHTokenRevoke(): DBRoute;

	static alloc(): DBAUTHRouteObjects; // inherited from NSObject

	static new(): DBAUTHRouteObjects; // inherited from NSObject
}

declare class DBAUTHTokenFromOAuth1Arg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHTokenFromOAuth1Arg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHTokenFromOAuth1Arg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly oauth1Token: string;

	readonly oauth1TokenSecret: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { oauth1Token: string; oauth1TokenSecret: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOauth1TokenOauth1TokenSecret(oauth1Token: string, oauth1TokenSecret: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBAUTHTokenFromOAuth1ArgSerializer extends NSObject {

	static alloc(): DBAUTHTokenFromOAuth1ArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHTokenFromOAuth1Arg;

	static new(): DBAUTHTokenFromOAuth1ArgSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHTokenFromOAuth1Arg): NSDictionary<string, any>;
}

declare class DBAUTHTokenFromOAuth1Error extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHTokenFromOAuth1Error; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHTokenFromOAuth1Error; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBAUTHTokenFromOAuth1ErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appIdMismatch: void; });

	constructor(o: { invalidOauth1TokenInfo: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppIdMismatch(): this;

	initWithInvalidOauth1TokenInfo(): this;

	initWithOther(): this;

	isAppIdMismatch(): boolean;

	isEqual(object: any): boolean;

	isInvalidOauth1TokenInfo(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBAUTHTokenFromOAuth1ErrorSerializer extends NSObject {

	static alloc(): DBAUTHTokenFromOAuth1ErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHTokenFromOAuth1Error;

	static new(): DBAUTHTokenFromOAuth1ErrorSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHTokenFromOAuth1Error): NSDictionary<string, any>;
}

declare const enum DBAUTHTokenFromOAuth1ErrorTag {

	InvalidOauth1TokenInfo = 0,

	AppIdMismatch = 1,

	Other = 2
}

declare class DBAUTHTokenFromOAuth1Result extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBAUTHTokenFromOAuth1Result; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBAUTHTokenFromOAuth1Result; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly oauth2Token: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { oauth2Token: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOauth2Token(oauth2Token: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBAUTHTokenFromOAuth1ResultSerializer extends NSObject {

	static alloc(): DBAUTHTokenFromOAuth1ResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBAUTHTokenFromOAuth1Result;

	static new(): DBAUTHTokenFromOAuth1ResultSerializer; // inherited from NSObject

	static serialize(instance: DBAUTHTokenFromOAuth1Result): NSDictionary<string, any>;
}

declare class DBAUTHUserAuthRoutes extends NSObject {

	static alloc(): DBAUTHUserAuthRoutes; // inherited from NSObject

	static new(): DBAUTHUserAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	init(client: DBTransportClient): this;

	tokenRevoke(): DBRpcTask<DBNilObject, DBNilObject>;
}

declare class DBAccessToken extends NSObject {

	static alloc(): DBAccessToken; // inherited from NSObject

	static new(): DBAccessToken; // inherited from NSObject

	readonly accessToken: string;

	readonly uid: string;

	constructor(o: { accessToken: string; uid: string; });

	initWithAccessTokenUid(accessToken: string, uid: string): this;
}

declare class DBAppBaseClient extends NSObject {

	static alloc(): DBAppBaseClient; // inherited from NSObject

	static new(): DBAppBaseClient; // inherited from NSObject

	readonly authRoutes: DBAUTHAppAuthRoutes;

	constructor(o: { transportClient: DBTransportClient; });

	initWithTransportClient(client: DBTransportClient): this;
}

declare class DBAppClient extends DBAppBaseClient {

	static alloc(): DBAppClient; // inherited from NSObject

	static new(): DBAppClient; // inherited from NSObject

	constructor(o: { appKey: string; appSecret: string; });

	constructor(o: { transportConfig: DBTransportDefaultConfig; });

	initWithAppKeyAppSecret(appKey: string, appSecret: string): this;

	initWithTransportConfig(transportConfig: DBTransportDefaultConfig): this;
}

declare class DBArraySerializer extends NSObject {

	static alloc(): DBArraySerializer; // inherited from NSObject

	static deserializeWithBlock(jsonData: NSArray<any> | any[], deserializeBlock: (p1: any) => any): NSArray<any>;

	static new(): DBArraySerializer; // inherited from NSObject

	static serializeWithBlock(value: NSArray<any> | any[], serializeBlock: (p1: any) => any): NSArray<any>;
}

declare class DBBatchUploadData extends NSObject {

	static alloc(): DBBatchUploadData; // inherited from NSObject

	static new(): DBBatchUploadData; // inherited from NSObject

	cancel: boolean;

	readonly fileUrlsToCommitInfo: NSDictionary<NSURL, DBFILESCommitInfo>;

	readonly fileUrlsToRequestErrors: NSMutableDictionary<NSURL, DBRequestError>;

	finishArgs: NSMutableArray<DBFILESUploadSessionFinishArg>;

	readonly progressBlock: (p1: number, p2: number, p3: number) => void;

	readonly queue: NSOperationQueue;

	readonly responseBlock: (p1: NSDictionary<NSURL, DBFILESUploadSessionFinishBatchResultEntry>, p2: DBASYNCPollError, p3: DBRequestError, p4: NSDictionary<NSURL, DBRequestError>) => void;

	taskStorage: DBTasksStorage;

	totalUploadSize: number;

	totalUploadedSoFar: number;

	readonly uploadGroup: NSObject;

	constructor(o: { fileCommitInfo: NSDictionary<NSURL, DBFILESCommitInfo>; progressBlock: (p1: number, p2: number, p3: number) => void; responseBlock: (p1: NSDictionary<NSURL, DBFILESUploadSessionFinishBatchResultEntry>, p2: DBASYNCPollError, p3: DBRequestError, p4: NSDictionary<NSURL, DBRequestError>) => void; queue: NSOperationQueue; });

	initWithFileCommitInfoProgressBlockResponseBlockQueue(fileUrlsToCommitInfo: NSDictionary<NSURL, DBFILESCommitInfo>, progressBlock: (p1: number, p2: number, p3: number) => void, responseBlock: (p1: NSDictionary<NSURL, DBFILESUploadSessionFinishBatchResultEntry>, p2: DBASYNCPollError, p3: DBRequestError, p4: NSDictionary<NSURL, DBRequestError>) => void, queue: NSOperationQueue): this;
}

declare class DBBatchUploadTask extends NSObject {

	static alloc(): DBBatchUploadTask; // inherited from NSObject

	static new(): DBBatchUploadTask; // inherited from NSObject

	constructor(o: { uploadData: DBBatchUploadData; });

	cancel(): void;

	initWithUploadData(uploadData: DBBatchUploadData): this;

	uploadsInProgress(): boolean;
}

declare class DBCOMMONPathRoot extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBCOMMONPathRoot; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBCOMMONPathRoot; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly namespaceId: string;

	readonly root: string;

	readonly tag: DBCOMMONPathRootTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { home: void; });

	constructor(o: { namespaceId: string; });

	constructor(o: { other: void; });

	constructor(o: { root: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHome(): this;

	initWithNamespaceId(namespaceId: string): this;

	initWithOther(): this;

	initWithRoot(root: string): this;

	isEqual(object: any): boolean;

	isHome(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNamespaceId(): boolean;

	isOther(): boolean;

	isRoot(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBCOMMONPathRootError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBCOMMONPathRootError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBCOMMONPathRootError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invalidRoot: DBCOMMONRootInfo;

	readonly tag: DBCOMMONPathRootErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidRoot: DBCOMMONRootInfo; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidRoot(invalidRoot: DBCOMMONRootInfo): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidRoot(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBCOMMONPathRootErrorSerializer extends NSObject {

	static alloc(): DBCOMMONPathRootErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBCOMMONPathRootError;

	static new(): DBCOMMONPathRootErrorSerializer; // inherited from NSObject

	static serialize(instance: DBCOMMONPathRootError): NSDictionary<string, any>;
}

declare const enum DBCOMMONPathRootErrorTag {

	InvalidRoot = 0,

	NoPermission = 1,

	Other = 2
}

declare class DBCOMMONPathRootSerializer extends NSObject {

	static alloc(): DBCOMMONPathRootSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBCOMMONPathRoot;

	static new(): DBCOMMONPathRootSerializer; // inherited from NSObject

	static serialize(instance: DBCOMMONPathRoot): NSDictionary<string, any>;
}

declare const enum DBCOMMONPathRootTag {

	Home = 0,

	Root = 1,

	NamespaceId = 2,

	Other = 3
}

declare class DBCOMMONRootInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBCOMMONRootInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBCOMMONRootInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly homeNamespaceId: string;

	readonly rootNamespaceId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { rootNamespaceId: string; homeNamespaceId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRootNamespaceIdHomeNamespaceId(rootNamespaceId: string, homeNamespaceId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBCOMMONRootInfoSerializer extends NSObject {

	static alloc(): DBCOMMONRootInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBCOMMONRootInfo;

	static new(): DBCOMMONRootInfoSerializer; // inherited from NSObject

	static serialize(instance: DBCOMMONRootInfo): NSDictionary<string, any>;
}

declare class DBCOMMONTeamRootInfo extends DBCOMMONRootInfo implements DBSerializable, NSCopying {

	static alloc(): DBCOMMONTeamRootInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBCOMMONTeamRootInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly homePath: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { rootNamespaceId: string; homeNamespaceId: string; homePath: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRootNamespaceIdHomeNamespaceIdHomePath(rootNamespaceId: string, homeNamespaceId: string, homePath: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBCOMMONTeamRootInfoSerializer extends NSObject {

	static alloc(): DBCOMMONTeamRootInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBCOMMONTeamRootInfo;

	static new(): DBCOMMONTeamRootInfoSerializer; // inherited from NSObject

	static serialize(instance: DBCOMMONTeamRootInfo): NSDictionary<string, any>;
}

declare class DBCOMMONUserRootInfo extends DBCOMMONRootInfo implements DBSerializable, NSCopying {

	static alloc(): DBCOMMONUserRootInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBCOMMONUserRootInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBCOMMONUserRootInfoSerializer extends NSObject {

	static alloc(): DBCOMMONUserRootInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBCOMMONUserRootInfo;

	static new(): DBCOMMONUserRootInfoSerializer; // inherited from NSObject

	static serialize(instance: DBCOMMONUserRootInfo): NSDictionary<string, any>;
}

declare class DBCONTACTSDeleteManualContactsArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBCONTACTSDeleteManualContactsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBCONTACTSDeleteManualContactsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly emailAddresses: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { emailAddresses: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmailAddresses(emailAddresses: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBCONTACTSDeleteManualContactsArgSerializer extends NSObject {

	static alloc(): DBCONTACTSDeleteManualContactsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBCONTACTSDeleteManualContactsArg;

	static new(): DBCONTACTSDeleteManualContactsArgSerializer; // inherited from NSObject

	static serialize(instance: DBCONTACTSDeleteManualContactsArg): NSDictionary<string, any>;
}

declare class DBCONTACTSDeleteManualContactsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBCONTACTSDeleteManualContactsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBCONTACTSDeleteManualContactsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly contactsNotFound: NSArray<string>;

	readonly tag: DBCONTACTSDeleteManualContactsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { contactsNotFound: NSArray<string> | string[]; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithContactsNotFound(contactsNotFound: NSArray<string> | string[]): this;

	initWithOther(): this;

	isContactsNotFound(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBCONTACTSDeleteManualContactsErrorSerializer extends NSObject {

	static alloc(): DBCONTACTSDeleteManualContactsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBCONTACTSDeleteManualContactsError;

	static new(): DBCONTACTSDeleteManualContactsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBCONTACTSDeleteManualContactsError): NSDictionary<string, any>;
}

declare const enum DBCONTACTSDeleteManualContactsErrorTag {

	ContactsNotFound = 0,

	Other = 1
}

declare class DBCONTACTSRouteObjects extends NSObject {

	static DBCONTACTSDeleteManualContacts(): DBRoute;

	static DBCONTACTSDeleteManualContactsBatch(): DBRoute;

	static alloc(): DBCONTACTSRouteObjects; // inherited from NSObject

	static new(): DBCONTACTSRouteObjects; // inherited from NSObject
}

declare class DBCONTACTSUserAuthRoutes extends NSObject {

	static alloc(): DBCONTACTSUserAuthRoutes; // inherited from NSObject

	static new(): DBCONTACTSUserAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	deleteManualContacts(): DBRpcTask<DBNilObject, DBNilObject>;

	deleteManualContactsBatch(emailAddresses: NSArray<string> | string[]): DBRpcTask<DBNilObject, DBCONTACTSDeleteManualContactsError>;

	init(client: DBTransportClient): this;
}

declare class DBClientsManager extends NSObject {

	static alloc(): DBClientsManager; // inherited from NSObject

	static appKey(): string;

	static authorizeClientFromKeychain(tokenUid: string): boolean;

	static authorizeFromControllerControllerOpenURL(sharedApplication: UIApplication, controller: UIViewController, openURL: (p1: NSURL) => void): void;

	static authorizeTeamClientFromKeychain(tokenUid: string): boolean;

	static authorizedClient(): DBUserClient;

	static authorizedClients(): NSDictionary<string, DBUserClient>;

	static authorizedTeamClient(): DBTeamClient;

	static authorizedTeamClients(): NSDictionary<string, DBTeamClient>;

	static checkAndPerformV1TokenMigrationQueueAppKeyAppSecret(responseBlock: (p1: boolean, p2: boolean, p3: NSArray<NSArray<string>>) => void, queue: NSOperationQueue, appKey: string, appSecret: string): boolean;

	static handleRedirectURL(url: NSURL): DBOAuthResult;

	static handleRedirectURLTeam(url: NSURL): DBOAuthResult;

	static new(): DBClientsManager; // inherited from NSObject

	static setupWithAppKey(appKey: string): void;

	static setupWithTeamAppKey(appKey: string): void;

	static setupWithTeamTransportConfig(transportConfig: DBTransportDefaultConfig): void;

	static setupWithTransportConfig(transportConfig: DBTransportDefaultConfig): void;

	static unlinkAndResetClient(tokenUid: string): void;

	static unlinkAndResetClients(): void;
}

declare class DBDownloadDataTask<TResponse, TError> extends DBTask {

	static alloc<TResponse, TError>(): DBDownloadDataTask<TResponse, TError>; // inherited from NSObject

	static new<TResponse, TError>(): DBDownloadDataTask<TResponse, TError>; // inherited from NSObject

	setProgressBlock(progressBlock: (p1: number, p2: number, p3: number) => void): DBDownloadDataTask<any, any>;

	setProgressBlockQueue(progressBlock: (p1: number, p2: number, p3: number) => void, queue: NSOperationQueue): DBDownloadDataTask<any, any>;

	setResponseBlock(responseBlock: (p1: TResponse, p2: TError, p3: DBRequestError, p4: NSData) => void): DBDownloadDataTask<TResponse, TError>;

	setResponseBlockQueue(responseBlock: (p1: TResponse, p2: TError, p3: DBRequestError, p4: NSData) => void, queue: NSOperationQueue): DBDownloadDataTask<TResponse, TError>;
}

declare class DBDownloadUrlTask<TResponse, TError> extends DBTask {

	static alloc<TResponse, TError>(): DBDownloadUrlTask<TResponse, TError>; // inherited from NSObject

	static new<TResponse, TError>(): DBDownloadUrlTask<TResponse, TError>; // inherited from NSObject

	setProgressBlock(progressBlock: (p1: number, p2: number, p3: number) => void): DBDownloadUrlTask<any, any>;

	setProgressBlockQueue(progressBlock: (p1: number, p2: number, p3: number) => void, queue: NSOperationQueue): DBDownloadUrlTask<any, any>;

	setResponseBlock(responseBlock: (p1: TResponse, p2: TError, p3: DBRequestError, p4: NSURL) => void): DBDownloadUrlTask<TResponse, TError>;

	setResponseBlockQueue(responseBlock: (p1: TResponse, p2: TError, p3: DBRequestError, p4: NSURL) => void, queue: NSOperationQueue): DBDownloadUrlTask<TResponse, TError>;
}

declare class DBFILEPROPERTIESAddPropertiesArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESAddPropertiesArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESAddPropertiesArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathPropertyGroups(path: string, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESAddPropertiesArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESAddPropertiesArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESAddPropertiesArg;

	static new(): DBFILEPROPERTIESAddPropertiesArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESAddPropertiesArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESAddPropertiesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESAddPropertiesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESAddPropertiesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILEPROPERTIESLookupError;

	readonly tag: DBFILEPROPERTIESAddPropertiesErrorTag;

	readonly templateNotFound: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { doesNotFitTemplate: void; });

	constructor(o: { other: void; });

	constructor(o: { path: DBFILEPROPERTIESLookupError; });

	constructor(o: { propertyFieldTooLarge: void; });

	constructor(o: { propertyGroupAlreadyExists: void; });

	constructor(o: { restrictedContent: void; });

	constructor(o: { templateNotFound: string; });

	constructor(o: { unsupportedFolder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDoesNotFitTemplate(): this;

	initWithOther(): this;

	initWithPath(path: DBFILEPROPERTIESLookupError): this;

	initWithPropertyFieldTooLarge(): this;

	initWithPropertyGroupAlreadyExists(): this;

	initWithRestrictedContent(): this;

	initWithTemplateNotFound(templateNotFound: string): this;

	initWithUnsupportedFolder(): this;

	isDoesNotFitTemplate(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isPropertyFieldTooLarge(): boolean;

	isPropertyGroupAlreadyExists(): boolean;

	isRestrictedContent(): boolean;

	isTemplateNotFound(): boolean;

	isUnsupportedFolder(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESAddPropertiesErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESAddPropertiesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESAddPropertiesError;

	static new(): DBFILEPROPERTIESAddPropertiesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESAddPropertiesError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESAddPropertiesErrorTag {

	TemplateNotFound = 0,

	RestrictedContent = 1,

	Other = 2,

	Path = 3,

	UnsupportedFolder = 4,

	PropertyFieldTooLarge = 5,

	DoesNotFitTemplate = 6,

	PropertyGroupAlreadyExists = 7
}

declare class DBFILEPROPERTIESAddTemplateArg extends DBFILEPROPERTIESPropertyGroupTemplate implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESAddTemplateArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESAddTemplateArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESAddTemplateArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESAddTemplateArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESAddTemplateArg;

	static new(): DBFILEPROPERTIESAddTemplateArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESAddTemplateArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESAddTemplateResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESAddTemplateResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESAddTemplateResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly templateId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { templateId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTemplateId(templateId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESAddTemplateResultSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESAddTemplateResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESAddTemplateResult;

	static new(): DBFILEPROPERTIESAddTemplateResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESAddTemplateResult): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESGetTemplateArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESGetTemplateArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESGetTemplateArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly templateId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { templateId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTemplateId(templateId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESGetTemplateArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESGetTemplateArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESGetTemplateArg;

	static new(): DBFILEPROPERTIESGetTemplateArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESGetTemplateArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESGetTemplateResult extends DBFILEPROPERTIESPropertyGroupTemplate implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESGetTemplateResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESGetTemplateResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESGetTemplateResultSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESGetTemplateResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESGetTemplateResult;

	static new(): DBFILEPROPERTIESGetTemplateResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESGetTemplateResult): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESInvalidPropertyGroupError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESInvalidPropertyGroupError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESInvalidPropertyGroupError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILEPROPERTIESLookupError;

	readonly tag: DBFILEPROPERTIESInvalidPropertyGroupErrorTag;

	readonly templateNotFound: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { doesNotFitTemplate: void; });

	constructor(o: { other: void; });

	constructor(o: { path: DBFILEPROPERTIESLookupError; });

	constructor(o: { propertyFieldTooLarge: void; });

	constructor(o: { restrictedContent: void; });

	constructor(o: { templateNotFound: string; });

	constructor(o: { unsupportedFolder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDoesNotFitTemplate(): this;

	initWithOther(): this;

	initWithPath(path: DBFILEPROPERTIESLookupError): this;

	initWithPropertyFieldTooLarge(): this;

	initWithRestrictedContent(): this;

	initWithTemplateNotFound(templateNotFound: string): this;

	initWithUnsupportedFolder(): this;

	isDoesNotFitTemplate(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isPropertyFieldTooLarge(): boolean;

	isRestrictedContent(): boolean;

	isTemplateNotFound(): boolean;

	isUnsupportedFolder(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESInvalidPropertyGroupErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESInvalidPropertyGroupErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESInvalidPropertyGroupError;

	static new(): DBFILEPROPERTIESInvalidPropertyGroupErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESInvalidPropertyGroupError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESInvalidPropertyGroupErrorTag {

	TemplateNotFound = 0,

	RestrictedContent = 1,

	Other = 2,

	Path = 3,

	UnsupportedFolder = 4,

	PropertyFieldTooLarge = 5,

	DoesNotFitTemplate = 6
}

declare class DBFILEPROPERTIESListTemplateResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESListTemplateResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESListTemplateResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly templateIds: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { templateIds: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTemplateIds(templateIds: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESListTemplateResultSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESListTemplateResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESListTemplateResult;

	static new(): DBFILEPROPERTIESListTemplateResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESListTemplateResult): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESLogicalOperator extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESLogicalOperator; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESLogicalOperator; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEPROPERTIESLogicalOperatorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { orOperator: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOrOperator(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOrOperator(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESLogicalOperatorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESLogicalOperatorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESLogicalOperator;

	static new(): DBFILEPROPERTIESLogicalOperatorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESLogicalOperator): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESLogicalOperatorTag {

	OrOperator = 0,

	Other = 1
}

declare class DBFILEPROPERTIESLookUpPropertiesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESLookUpPropertiesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESLookUpPropertiesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEPROPERTIESLookUpPropertiesErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { propertyGroupNotFound: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPropertyGroupNotFound(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPropertyGroupNotFound(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESLookUpPropertiesErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESLookUpPropertiesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESLookUpPropertiesError;

	static new(): DBFILEPROPERTIESLookUpPropertiesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESLookUpPropertiesError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESLookUpPropertiesErrorTag {

	PropertyGroupNotFound = 0,

	Other = 1
}

declare class DBFILEPROPERTIESLookupError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESLookupError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESLookupError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly malformedPath: string;

	readonly tag: DBFILEPROPERTIESLookupErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { malformedPath: string; });

	constructor(o: { notFile: void; });

	constructor(o: { notFolder: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { restrictedContent: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMalformedPath(malformedPath: string): this;

	initWithNotFile(): this;

	initWithNotFolder(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithRestrictedContent(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMalformedPath(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotFile(): boolean;

	isNotFolder(): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isRestrictedContent(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESLookupErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESLookupErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESLookupError;

	static new(): DBFILEPROPERTIESLookupErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESLookupError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESLookupErrorTag {

	MalformedPath = 0,

	NotFound = 1,

	NotFile = 2,

	NotFolder = 3,

	RestrictedContent = 4,

	Other = 5
}

declare class DBFILEPROPERTIESModifyTemplateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESModifyTemplateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESModifyTemplateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEPROPERTIESModifyTemplateErrorTag;

	readonly templateNotFound: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { conflictingPropertyNames: void; });

	constructor(o: { other: void; });

	constructor(o: { restrictedContent: void; });

	constructor(o: { templateAttributeTooLarge: void; });

	constructor(o: { templateNotFound: string; });

	constructor(o: { tooManyProperties: void; });

	constructor(o: { tooManyTemplates: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithConflictingPropertyNames(): this;

	initWithOther(): this;

	initWithRestrictedContent(): this;

	initWithTemplateAttributeTooLarge(): this;

	initWithTemplateNotFound(templateNotFound: string): this;

	initWithTooManyProperties(): this;

	initWithTooManyTemplates(): this;

	isConflictingPropertyNames(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRestrictedContent(): boolean;

	isTemplateAttributeTooLarge(): boolean;

	isTemplateNotFound(): boolean;

	isTooManyProperties(): boolean;

	isTooManyTemplates(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESModifyTemplateErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESModifyTemplateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESModifyTemplateError;

	static new(): DBFILEPROPERTIESModifyTemplateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESModifyTemplateError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESModifyTemplateErrorTag {

	TemplateNotFound = 0,

	RestrictedContent = 1,

	Other = 2,

	ConflictingPropertyNames = 3,

	TooManyProperties = 4,

	TooManyTemplates = 5,

	TemplateAttributeTooLarge = 6
}

declare class DBFILEPROPERTIESOverwritePropertyGroupArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESOverwritePropertyGroupArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESOverwritePropertyGroupArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathPropertyGroups(path: string, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESOverwritePropertyGroupArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESOverwritePropertyGroupArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESOverwritePropertyGroupArg;

	static new(): DBFILEPROPERTIESOverwritePropertyGroupArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESOverwritePropertyGroupArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertiesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILEPROPERTIESLookupError;

	readonly tag: DBFILEPROPERTIESPropertiesErrorTag;

	readonly templateNotFound: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILEPROPERTIESLookupError; });

	constructor(o: { restrictedContent: void; });

	constructor(o: { templateNotFound: string; });

	constructor(o: { unsupportedFolder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILEPROPERTIESLookupError): this;

	initWithRestrictedContent(): this;

	initWithTemplateNotFound(templateNotFound: string): this;

	initWithUnsupportedFolder(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isRestrictedContent(): boolean;

	isTemplateNotFound(): boolean;

	isUnsupportedFolder(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESPropertiesErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesError;

	static new(): DBFILEPROPERTIESPropertiesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESPropertiesErrorTag {

	TemplateNotFound = 0,

	RestrictedContent = 1,

	Other = 2,

	Path = 3,

	UnsupportedFolder = 4
}

declare class DBFILEPROPERTIESPropertiesSearchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesSearchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesSearchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly queries: NSArray<DBFILEPROPERTIESPropertiesSearchQuery>;

	readonly templateFilter: DBFILEPROPERTIESTemplateFilter;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { queries: NSArray<DBFILEPROPERTIESPropertiesSearchQuery> | DBFILEPROPERTIESPropertiesSearchQuery[]; });

	constructor(o: { queries: NSArray<DBFILEPROPERTIESPropertiesSearchQuery> | DBFILEPROPERTIESPropertiesSearchQuery[]; templateFilter: DBFILEPROPERTIESTemplateFilter; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithQueries(queries: NSArray<DBFILEPROPERTIESPropertiesSearchQuery> | DBFILEPROPERTIESPropertiesSearchQuery[]): this;

	initWithQueriesTemplateFilter(queries: NSArray<DBFILEPROPERTIESPropertiesSearchQuery> | DBFILEPROPERTIESPropertiesSearchQuery[], templateFilter: DBFILEPROPERTIESTemplateFilter): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertiesSearchArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesSearchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesSearchArg;

	static new(): DBFILEPROPERTIESPropertiesSearchArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesSearchArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertiesSearchContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesSearchContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesSearchContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertiesSearchContinueArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesSearchContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesSearchContinueArg;

	static new(): DBFILEPROPERTIESPropertiesSearchContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesSearchContinueArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertiesSearchContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesSearchContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesSearchContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEPROPERTIESPropertiesSearchContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { reset: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithReset(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESPropertiesSearchContinueErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesSearchContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesSearchContinueError;

	static new(): DBFILEPROPERTIESPropertiesSearchContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesSearchContinueError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESPropertiesSearchContinueErrorTag {

	Reset = 0,

	Other = 1
}

declare class DBFILEPROPERTIESPropertiesSearchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesSearchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesSearchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError;

	readonly tag: DBFILEPROPERTIESPropertiesSearchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPropertyGroupLookup(propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPropertyGroupLookup(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESPropertiesSearchErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesSearchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesSearchError;

	static new(): DBFILEPROPERTIESPropertiesSearchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesSearchError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESPropertiesSearchErrorTag {

	PropertyGroupLookup = 0,

	Other = 1
}

declare class DBFILEPROPERTIESPropertiesSearchMatch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesSearchMatch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesSearchMatch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly id_: string;

	readonly isDeleted: number;

	readonly path: string;

	readonly propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; path: string; isDeleted: number; propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_PathIsDeletedPropertyGroups(id_: string, path: string, isDeleted: number, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertiesSearchMatchSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesSearchMatchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesSearchMatch;

	static new(): DBFILEPROPERTIESPropertiesSearchMatchSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesSearchMatch): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertiesSearchMode extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesSearchMode; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesSearchMode; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fieldName: string;

	readonly tag: DBFILEPROPERTIESPropertiesSearchModeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { fieldName: string; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFieldName(fieldName: string): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isFieldName(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESPropertiesSearchModeSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesSearchModeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesSearchMode;

	static new(): DBFILEPROPERTIESPropertiesSearchModeSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesSearchMode): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESPropertiesSearchModeTag {

	FieldName = 0,

	Other = 1
}

declare class DBFILEPROPERTIESPropertiesSearchQuery extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesSearchQuery; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesSearchQuery; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly logicalOperator: DBFILEPROPERTIESLogicalOperator;

	readonly mode: DBFILEPROPERTIESPropertiesSearchMode;

	readonly query: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { query: string; mode: DBFILEPROPERTIESPropertiesSearchMode; });

	constructor(o: { query: string; mode: DBFILEPROPERTIESPropertiesSearchMode; logicalOperator: DBFILEPROPERTIESLogicalOperator; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithQueryMode(query: string, mode: DBFILEPROPERTIESPropertiesSearchMode): this;

	initWithQueryModeLogicalOperator(query: string, mode: DBFILEPROPERTIESPropertiesSearchMode, logicalOperator: DBFILEPROPERTIESLogicalOperator): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertiesSearchQuerySerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesSearchQuerySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesSearchQuery;

	static new(): DBFILEPROPERTIESPropertiesSearchQuerySerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesSearchQuery): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertiesSearchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertiesSearchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertiesSearchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly matches: NSArray<DBFILEPROPERTIESPropertiesSearchMatch>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { matches: NSArray<DBFILEPROPERTIESPropertiesSearchMatch> | DBFILEPROPERTIESPropertiesSearchMatch[]; });

	constructor(o: { matches: NSArray<DBFILEPROPERTIESPropertiesSearchMatch> | DBFILEPROPERTIESPropertiesSearchMatch[]; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMatches(matches: NSArray<DBFILEPROPERTIESPropertiesSearchMatch> | DBFILEPROPERTIESPropertiesSearchMatch[]): this;

	initWithMatchesCursor(matches: NSArray<DBFILEPROPERTIESPropertiesSearchMatch> | DBFILEPROPERTIESPropertiesSearchMatch[], cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertiesSearchResultSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertiesSearchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertiesSearchResult;

	static new(): DBFILEPROPERTIESPropertiesSearchResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertiesSearchResult): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertyField extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertyField; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertyField; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly name: string;

	readonly value: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; value: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNameValue(name: string, value: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertyFieldSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertyFieldSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertyField;

	static new(): DBFILEPROPERTIESPropertyFieldSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertyField): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertyFieldTemplate extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertyFieldTemplate; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertyFieldTemplate; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly name: string;

	readonly type: DBFILEPROPERTIESPropertyType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; description_: string; type: DBFILEPROPERTIESPropertyType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNameDescription_Type(name: string, description_: string, type: DBFILEPROPERTIESPropertyType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertyFieldTemplateSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertyFieldTemplateSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertyFieldTemplate;

	static new(): DBFILEPROPERTIESPropertyFieldTemplateSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertyFieldTemplate): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertyGroup extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertyGroup; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertyGroup; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fields: NSArray<DBFILEPROPERTIESPropertyField>;

	readonly templateId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { templateId: string; fields: NSArray<DBFILEPROPERTIESPropertyField> | DBFILEPROPERTIESPropertyField[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTemplateIdFields(templateId: string, fields: NSArray<DBFILEPROPERTIESPropertyField> | DBFILEPROPERTIESPropertyField[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertyGroupSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertyGroupSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertyGroup;

	static new(): DBFILEPROPERTIESPropertyGroupSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertyGroup): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertyGroupTemplate extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertyGroupTemplate; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertyGroupTemplate; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly fields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate>;

	readonly name: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; description_: string; fields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNameDescription_Fields(name: string, description_: string, fields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertyGroupTemplateSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertyGroupTemplateSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertyGroupTemplate;

	static new(): DBFILEPROPERTIESPropertyGroupTemplateSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertyGroupTemplate): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertyGroupUpdate extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertyGroupUpdate; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertyGroupUpdate; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly addOrUpdateFields: NSArray<DBFILEPROPERTIESPropertyField>;

	readonly removeFields: NSArray<string>;

	readonly templateId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { templateId: string; });

	constructor(o: { templateId: string; addOrUpdateFields: NSArray<DBFILEPROPERTIESPropertyField> | DBFILEPROPERTIESPropertyField[]; removeFields: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTemplateId(templateId: string): this;

	initWithTemplateIdAddOrUpdateFieldsRemoveFields(templateId: string, addOrUpdateFields: NSArray<DBFILEPROPERTIESPropertyField> | DBFILEPROPERTIESPropertyField[], removeFields: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESPropertyGroupUpdateSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertyGroupUpdateSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertyGroupUpdate;

	static new(): DBFILEPROPERTIESPropertyGroupUpdateSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertyGroupUpdate): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESPropertyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESPropertyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESPropertyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEPROPERTIESPropertyTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { string: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithString(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isString(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESPropertyTypeSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESPropertyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESPropertyType;

	static new(): DBFILEPROPERTIESPropertyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESPropertyType): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESPropertyTypeTag {

	String = 0,

	Other = 1
}

declare class DBFILEPROPERTIESRemovePropertiesArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESRemovePropertiesArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESRemovePropertiesArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly propertyTemplateIds: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; propertyTemplateIds: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathPropertyTemplateIds(path: string, propertyTemplateIds: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESRemovePropertiesArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESRemovePropertiesArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESRemovePropertiesArg;

	static new(): DBFILEPROPERTIESRemovePropertiesArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESRemovePropertiesArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESRemovePropertiesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESRemovePropertiesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESRemovePropertiesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILEPROPERTIESLookupError;

	readonly propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError;

	readonly tag: DBFILEPROPERTIESRemovePropertiesErrorTag;

	readonly templateNotFound: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILEPROPERTIESLookupError; });

	constructor(o: { propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError; });

	constructor(o: { restrictedContent: void; });

	constructor(o: { templateNotFound: string; });

	constructor(o: { unsupportedFolder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILEPROPERTIESLookupError): this;

	initWithPropertyGroupLookup(propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError): this;

	initWithRestrictedContent(): this;

	initWithTemplateNotFound(templateNotFound: string): this;

	initWithUnsupportedFolder(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isPropertyGroupLookup(): boolean;

	isRestrictedContent(): boolean;

	isTemplateNotFound(): boolean;

	isUnsupportedFolder(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESRemovePropertiesErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESRemovePropertiesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESRemovePropertiesError;

	static new(): DBFILEPROPERTIESRemovePropertiesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESRemovePropertiesError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESRemovePropertiesErrorTag {

	TemplateNotFound = 0,

	RestrictedContent = 1,

	Other = 2,

	Path = 3,

	UnsupportedFolder = 4,

	PropertyGroupLookup = 5
}

declare class DBFILEPROPERTIESRemoveTemplateArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESRemoveTemplateArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESRemoveTemplateArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly templateId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { templateId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTemplateId(templateId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESRemoveTemplateArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESRemoveTemplateArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESRemoveTemplateArg;

	static new(): DBFILEPROPERTIESRemoveTemplateArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESRemoveTemplateArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESRouteObjects extends NSObject {

	static DBFILEPROPERTIESPropertiesAdd(): DBRoute;

	static DBFILEPROPERTIESPropertiesOverwrite(): DBRoute;

	static DBFILEPROPERTIESPropertiesRemove(): DBRoute;

	static DBFILEPROPERTIESPropertiesSearch(): DBRoute;

	static DBFILEPROPERTIESPropertiesSearchContinue(): DBRoute;

	static DBFILEPROPERTIESPropertiesUpdate(): DBRoute;

	static DBFILEPROPERTIESTemplatesAddForTeam(): DBRoute;

	static DBFILEPROPERTIESTemplatesAddForUser(): DBRoute;

	static DBFILEPROPERTIESTemplatesGetForTeam(): DBRoute;

	static DBFILEPROPERTIESTemplatesGetForUser(): DBRoute;

	static DBFILEPROPERTIESTemplatesListForTeam(): DBRoute;

	static DBFILEPROPERTIESTemplatesListForUser(): DBRoute;

	static DBFILEPROPERTIESTemplatesRemoveForTeam(): DBRoute;

	static DBFILEPROPERTIESTemplatesRemoveForUser(): DBRoute;

	static DBFILEPROPERTIESTemplatesUpdateForTeam(): DBRoute;

	static DBFILEPROPERTIESTemplatesUpdateForUser(): DBRoute;

	static alloc(): DBFILEPROPERTIESRouteObjects; // inherited from NSObject

	static new(): DBFILEPROPERTIESRouteObjects; // inherited from NSObject
}

declare class DBFILEPROPERTIESTeamAuthRoutes extends NSObject {

	static alloc(): DBFILEPROPERTIESTeamAuthRoutes; // inherited from NSObject

	static new(): DBFILEPROPERTIESTeamAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	init(client: DBTransportClient): this;

	templatesAddForTeamDescription_Fields(name: string, description_: string, fields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]): DBRpcTask<DBFILEPROPERTIESAddTemplateResult, DBFILEPROPERTIESModifyTemplateError>;

	templatesGetForTeam(templateId: string): DBRpcTask<DBFILEPROPERTIESGetTemplateResult, DBFILEPROPERTIESTemplateError>;

	templatesListForTeam(): DBRpcTask<DBFILEPROPERTIESListTemplateResult, DBFILEPROPERTIESTemplateError>;

	templatesRemoveForTeam(templateId: string): DBRpcTask<DBNilObject, DBFILEPROPERTIESTemplateError>;

	templatesUpdateForTeam(templateId: string): DBRpcTask<DBFILEPROPERTIESUpdateTemplateResult, DBFILEPROPERTIESModifyTemplateError>;

	templatesUpdateForTeamNameDescription_AddFields(templateId: string, name: string, description_: string, addFields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]): DBRpcTask<DBFILEPROPERTIESUpdateTemplateResult, DBFILEPROPERTIESModifyTemplateError>;
}

declare class DBFILEPROPERTIESTemplateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESTemplateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESTemplateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEPROPERTIESTemplateErrorTag;

	readonly templateNotFound: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { restrictedContent: void; });

	constructor(o: { templateNotFound: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithRestrictedContent(): this;

	initWithTemplateNotFound(templateNotFound: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRestrictedContent(): boolean;

	isTemplateNotFound(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESTemplateErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESTemplateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESTemplateError;

	static new(): DBFILEPROPERTIESTemplateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESTemplateError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESTemplateErrorTag {

	TemplateNotFound = 0,

	RestrictedContent = 1,

	Other = 2
}

declare class DBFILEPROPERTIESTemplateFilter extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESTemplateFilter; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESTemplateFilter; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly filterSome: NSArray<string>;

	readonly tag: DBFILEPROPERTIESTemplateFilterTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { filterNone: void; });

	constructor(o: { filterSome: NSArray<string> | string[]; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFilterNone(): this;

	initWithFilterSome(filterSome: NSArray<string> | string[]): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isFilterNone(): boolean;

	isFilterSome(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESTemplateFilterBase extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESTemplateFilterBase; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESTemplateFilterBase; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly filterSome: NSArray<string>;

	readonly tag: DBFILEPROPERTIESTemplateFilterBaseTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { filterSome: NSArray<string> | string[]; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFilterSome(filterSome: NSArray<string> | string[]): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isFilterSome(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESTemplateFilterBaseSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESTemplateFilterBaseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESTemplateFilterBase;

	static new(): DBFILEPROPERTIESTemplateFilterBaseSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESTemplateFilterBase): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESTemplateFilterBaseTag {

	FilterSome = 0,

	Other = 1
}

declare class DBFILEPROPERTIESTemplateFilterSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESTemplateFilterSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESTemplateFilter;

	static new(): DBFILEPROPERTIESTemplateFilterSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESTemplateFilter): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESTemplateFilterTag {

	FilterSome = 0,

	Other = 1,

	FilterNone = 2
}

declare class DBFILEPROPERTIESTemplateOwnerType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESTemplateOwnerType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESTemplateOwnerType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEPROPERTIESTemplateOwnerTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { team: void; });

	constructor(o: { user: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTeam(): this;

	initWithUser(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeam(): boolean;

	isUser(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESTemplateOwnerTypeSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESTemplateOwnerTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESTemplateOwnerType;

	static new(): DBFILEPROPERTIESTemplateOwnerTypeSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESTemplateOwnerType): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESTemplateOwnerTypeTag {

	User = 0,

	Team = 1,

	Other = 2
}

declare class DBFILEPROPERTIESUpdatePropertiesArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESUpdatePropertiesArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESUpdatePropertiesArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly updatePropertyGroups: NSArray<DBFILEPROPERTIESPropertyGroupUpdate>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; updatePropertyGroups: NSArray<DBFILEPROPERTIESPropertyGroupUpdate> | DBFILEPROPERTIESPropertyGroupUpdate[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathUpdatePropertyGroups(path: string, updatePropertyGroups: NSArray<DBFILEPROPERTIESPropertyGroupUpdate> | DBFILEPROPERTIESPropertyGroupUpdate[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESUpdatePropertiesArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESUpdatePropertiesArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESUpdatePropertiesArg;

	static new(): DBFILEPROPERTIESUpdatePropertiesArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESUpdatePropertiesArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESUpdatePropertiesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESUpdatePropertiesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESUpdatePropertiesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILEPROPERTIESLookupError;

	readonly propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError;

	readonly tag: DBFILEPROPERTIESUpdatePropertiesErrorTag;

	readonly templateNotFound: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { doesNotFitTemplate: void; });

	constructor(o: { other: void; });

	constructor(o: { path: DBFILEPROPERTIESLookupError; });

	constructor(o: { propertyFieldTooLarge: void; });

	constructor(o: { propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError; });

	constructor(o: { restrictedContent: void; });

	constructor(o: { templateNotFound: string; });

	constructor(o: { unsupportedFolder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDoesNotFitTemplate(): this;

	initWithOther(): this;

	initWithPath(path: DBFILEPROPERTIESLookupError): this;

	initWithPropertyFieldTooLarge(): this;

	initWithPropertyGroupLookup(propertyGroupLookup: DBFILEPROPERTIESLookUpPropertiesError): this;

	initWithRestrictedContent(): this;

	initWithTemplateNotFound(templateNotFound: string): this;

	initWithUnsupportedFolder(): this;

	isDoesNotFitTemplate(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isPropertyFieldTooLarge(): boolean;

	isPropertyGroupLookup(): boolean;

	isRestrictedContent(): boolean;

	isTemplateNotFound(): boolean;

	isUnsupportedFolder(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEPROPERTIESUpdatePropertiesErrorSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESUpdatePropertiesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESUpdatePropertiesError;

	static new(): DBFILEPROPERTIESUpdatePropertiesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESUpdatePropertiesError): NSDictionary<string, any>;
}

declare const enum DBFILEPROPERTIESUpdatePropertiesErrorTag {

	TemplateNotFound = 0,

	RestrictedContent = 1,

	Other = 2,

	Path = 3,

	UnsupportedFolder = 4,

	PropertyFieldTooLarge = 5,

	DoesNotFitTemplate = 6,

	PropertyGroupLookup = 7
}

declare class DBFILEPROPERTIESUpdateTemplateArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESUpdateTemplateArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESUpdateTemplateArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly addFields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate>;

	readonly description_: string;

	readonly name: string;

	readonly templateId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { templateId: string; });

	constructor(o: { templateId: string; name: string; description_: string; addFields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTemplateId(templateId: string): this;

	initWithTemplateIdNameDescription_AddFields(templateId: string, name: string, description_: string, addFields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESUpdateTemplateArgSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESUpdateTemplateArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESUpdateTemplateArg;

	static new(): DBFILEPROPERTIESUpdateTemplateArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESUpdateTemplateArg): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESUpdateTemplateResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEPROPERTIESUpdateTemplateResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEPROPERTIESUpdateTemplateResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly templateId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { templateId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTemplateId(templateId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEPROPERTIESUpdateTemplateResultSerializer extends NSObject {

	static alloc(): DBFILEPROPERTIESUpdateTemplateResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEPROPERTIESUpdateTemplateResult;

	static new(): DBFILEPROPERTIESUpdateTemplateResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILEPROPERTIESUpdateTemplateResult): NSDictionary<string, any>;
}

declare class DBFILEPROPERTIESUserAuthRoutes extends NSObject {

	static alloc(): DBFILEPROPERTIESUserAuthRoutes; // inherited from NSObject

	static new(): DBFILEPROPERTIESUserAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	init(client: DBTransportClient): this;

	propertiesAddPropertyGroups(path: string, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]): DBRpcTask<DBNilObject, DBFILEPROPERTIESAddPropertiesError>;

	propertiesOverwritePropertyGroups(path: string, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]): DBRpcTask<DBNilObject, DBFILEPROPERTIESInvalidPropertyGroupError>;

	propertiesRemovePropertyTemplateIds(path: string, propertyTemplateIds: NSArray<string> | string[]): DBRpcTask<DBNilObject, DBFILEPROPERTIESRemovePropertiesError>;

	propertiesSearch(queries: NSArray<DBFILEPROPERTIESPropertiesSearchQuery> | DBFILEPROPERTIESPropertiesSearchQuery[]): DBRpcTask<DBFILEPROPERTIESPropertiesSearchResult, DBFILEPROPERTIESPropertiesSearchError>;

	propertiesSearchContinue(cursor: string): DBRpcTask<DBFILEPROPERTIESPropertiesSearchResult, DBFILEPROPERTIESPropertiesSearchContinueError>;

	propertiesSearchTemplateFilter(queries: NSArray<DBFILEPROPERTIESPropertiesSearchQuery> | DBFILEPROPERTIESPropertiesSearchQuery[], templateFilter: DBFILEPROPERTIESTemplateFilter): DBRpcTask<DBFILEPROPERTIESPropertiesSearchResult, DBFILEPROPERTIESPropertiesSearchError>;

	propertiesUpdateUpdatePropertyGroups(path: string, updatePropertyGroups: NSArray<DBFILEPROPERTIESPropertyGroupUpdate> | DBFILEPROPERTIESPropertyGroupUpdate[]): DBRpcTask<DBNilObject, DBFILEPROPERTIESUpdatePropertiesError>;

	templatesAddForUserDescription_Fields(name: string, description_: string, fields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]): DBRpcTask<DBFILEPROPERTIESAddTemplateResult, DBFILEPROPERTIESModifyTemplateError>;

	templatesGetForUser(templateId: string): DBRpcTask<DBFILEPROPERTIESGetTemplateResult, DBFILEPROPERTIESTemplateError>;

	templatesListForUser(): DBRpcTask<DBFILEPROPERTIESListTemplateResult, DBFILEPROPERTIESTemplateError>;

	templatesRemoveForUser(templateId: string): DBRpcTask<DBNilObject, DBFILEPROPERTIESTemplateError>;

	templatesUpdateForUser(templateId: string): DBRpcTask<DBFILEPROPERTIESUpdateTemplateResult, DBFILEPROPERTIESModifyTemplateError>;

	templatesUpdateForUserNameDescription_AddFields(templateId: string, name: string, description_: string, addFields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]): DBRpcTask<DBFILEPROPERTIESUpdateTemplateResult, DBFILEPROPERTIESModifyTemplateError>;
}

declare class DBFILEREQUESTSCreateFileRequestArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSCreateFileRequestArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSCreateFileRequestArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly deadline: DBFILEREQUESTSFileRequestDeadline;

	readonly destination: string;

	readonly open: number;

	readonly title: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { title: string; destination: string; });

	constructor(o: { title: string; destination: string; deadline: DBFILEREQUESTSFileRequestDeadline; open: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTitleDestination(title: string, destination: string): this;

	initWithTitleDestinationDeadlineOpen(title: string, destination: string, deadline: DBFILEREQUESTSFileRequestDeadline, open: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEREQUESTSCreateFileRequestArgsSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSCreateFileRequestArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSCreateFileRequestArgs;

	static new(): DBFILEREQUESTSCreateFileRequestArgsSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSCreateFileRequestArgs): NSDictionary<string, any>;
}

declare class DBFILEREQUESTSCreateFileRequestError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSCreateFileRequestError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSCreateFileRequestError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEREQUESTSCreateFileRequestErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appLacksAccess: void; });

	constructor(o: { disabledForTeam: void; });

	constructor(o: { emailUnverified: void; });

	constructor(o: { invalidLocation: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { notAFolder: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { rateLimit: void; });

	constructor(o: { validationError: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppLacksAccess(): this;

	initWithDisabledForTeam(): this;

	initWithEmailUnverified(): this;

	initWithInvalidLocation(): this;

	initWithNoPermission(): this;

	initWithNotAFolder(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithRateLimit(): this;

	initWithValidationError(): this;

	isAppLacksAccess(): boolean;

	isDisabledForTeam(): boolean;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isInvalidLocation(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isNotAFolder(): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isRateLimit(): boolean;

	isValidationError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEREQUESTSCreateFileRequestErrorSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSCreateFileRequestErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSCreateFileRequestError;

	static new(): DBFILEREQUESTSCreateFileRequestErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSCreateFileRequestError): NSDictionary<string, any>;
}

declare const enum DBFILEREQUESTSCreateFileRequestErrorTag {

	DisabledForTeam = 0,

	Other = 1,

	NotFound = 2,

	NotAFolder = 3,

	AppLacksAccess = 4,

	NoPermission = 5,

	EmailUnverified = 6,

	ValidationError = 7,

	InvalidLocation = 8,

	RateLimit = 9
}

declare class DBFILEREQUESTSFileRequest extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSFileRequest; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSFileRequest; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly created: Date;

	readonly deadline: DBFILEREQUESTSFileRequestDeadline;

	readonly destination: string;

	readonly fileCount: number;

	readonly id_: string;

	readonly isOpen: number;

	readonly title: string;

	readonly url: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; url: string; title: string; created: Date; isOpen: number; fileCount: number; });

	constructor(o: { id_: string; url: string; title: string; created: Date; isOpen: number; fileCount: number; destination: string; deadline: DBFILEREQUESTSFileRequestDeadline; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_UrlTitleCreatedIsOpenFileCount(id_: string, url: string, title: string, created: Date, isOpen: number, fileCount: number): this;

	initWithId_UrlTitleCreatedIsOpenFileCountDestinationDeadline(id_: string, url: string, title: string, created: Date, isOpen: number, fileCount: number, destination: string, deadline: DBFILEREQUESTSFileRequestDeadline): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEREQUESTSFileRequestDeadline extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSFileRequestDeadline; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSFileRequestDeadline; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly allowLateUploads: DBFILEREQUESTSGracePeriod;

	readonly deadline: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { deadline: Date; });

	constructor(o: { deadline: Date; allowLateUploads: DBFILEREQUESTSGracePeriod; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDeadline(deadline: Date): this;

	initWithDeadlineAllowLateUploads(deadline: Date, allowLateUploads: DBFILEREQUESTSGracePeriod): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEREQUESTSFileRequestDeadlineSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSFileRequestDeadlineSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSFileRequestDeadline;

	static new(): DBFILEREQUESTSFileRequestDeadlineSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSFileRequestDeadline): NSDictionary<string, any>;
}

declare class DBFILEREQUESTSFileRequestError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSFileRequestError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSFileRequestError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEREQUESTSFileRequestErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appLacksAccess: void; });

	constructor(o: { disabledForTeam: void; });

	constructor(o: { emailUnverified: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { notAFolder: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { validationError: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppLacksAccess(): this;

	initWithDisabledForTeam(): this;

	initWithEmailUnverified(): this;

	initWithNoPermission(): this;

	initWithNotAFolder(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithValidationError(): this;

	isAppLacksAccess(): boolean;

	isDisabledForTeam(): boolean;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isNotAFolder(): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isValidationError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEREQUESTSFileRequestErrorSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSFileRequestErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSFileRequestError;

	static new(): DBFILEREQUESTSFileRequestErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSFileRequestError): NSDictionary<string, any>;
}

declare const enum DBFILEREQUESTSFileRequestErrorTag {

	DisabledForTeam = 0,

	Other = 1,

	NotFound = 2,

	NotAFolder = 3,

	AppLacksAccess = 4,

	NoPermission = 5,

	EmailUnverified = 6,

	ValidationError = 7
}

declare class DBFILEREQUESTSFileRequestSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSFileRequestSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSFileRequest;

	static new(): DBFILEREQUESTSFileRequestSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSFileRequest): NSDictionary<string, any>;
}

declare class DBFILEREQUESTSGeneralFileRequestsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSGeneralFileRequestsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSGeneralFileRequestsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEREQUESTSGeneralFileRequestsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabledForTeam: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabledForTeam(): this;

	initWithOther(): this;

	isDisabledForTeam(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEREQUESTSGeneralFileRequestsErrorSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSGeneralFileRequestsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSGeneralFileRequestsError;

	static new(): DBFILEREQUESTSGeneralFileRequestsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSGeneralFileRequestsError): NSDictionary<string, any>;
}

declare const enum DBFILEREQUESTSGeneralFileRequestsErrorTag {

	DisabledForTeam = 0,

	Other = 1
}

declare class DBFILEREQUESTSGetFileRequestArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSGetFileRequestArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSGetFileRequestArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly id_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_(id_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEREQUESTSGetFileRequestArgsSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSGetFileRequestArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSGetFileRequestArgs;

	static new(): DBFILEREQUESTSGetFileRequestArgsSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSGetFileRequestArgs): NSDictionary<string, any>;
}

declare class DBFILEREQUESTSGetFileRequestError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSGetFileRequestError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSGetFileRequestError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEREQUESTSGetFileRequestErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appLacksAccess: void; });

	constructor(o: { disabledForTeam: void; });

	constructor(o: { emailUnverified: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { notAFolder: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { validationError: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppLacksAccess(): this;

	initWithDisabledForTeam(): this;

	initWithEmailUnverified(): this;

	initWithNoPermission(): this;

	initWithNotAFolder(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithValidationError(): this;

	isAppLacksAccess(): boolean;

	isDisabledForTeam(): boolean;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isNotAFolder(): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isValidationError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEREQUESTSGetFileRequestErrorSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSGetFileRequestErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSGetFileRequestError;

	static new(): DBFILEREQUESTSGetFileRequestErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSGetFileRequestError): NSDictionary<string, any>;
}

declare const enum DBFILEREQUESTSGetFileRequestErrorTag {

	DisabledForTeam = 0,

	Other = 1,

	NotFound = 2,

	NotAFolder = 3,

	AppLacksAccess = 4,

	NoPermission = 5,

	EmailUnverified = 6,

	ValidationError = 7
}

declare class DBFILEREQUESTSGracePeriod extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSGracePeriod; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSGracePeriod; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEREQUESTSGracePeriodTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { always: void; });

	constructor(o: { oneDay: void; });

	constructor(o: { other: void; });

	constructor(o: { sevenDays: void; });

	constructor(o: { thirtyDays: void; });

	constructor(o: { twoDays: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAlways(): this;

	initWithOneDay(): this;

	initWithOther(): this;

	initWithSevenDays(): this;

	initWithThirtyDays(): this;

	initWithTwoDays(): this;

	isAlways(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOneDay(): boolean;

	isOther(): boolean;

	isSevenDays(): boolean;

	isThirtyDays(): boolean;

	isTwoDays(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEREQUESTSGracePeriodSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSGracePeriodSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSGracePeriod;

	static new(): DBFILEREQUESTSGracePeriodSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSGracePeriod): NSDictionary<string, any>;
}

declare const enum DBFILEREQUESTSGracePeriodTag {

	OneDay = 0,

	TwoDays = 1,

	SevenDays = 2,

	ThirtyDays = 3,

	Always = 4,

	Other = 5
}

declare class DBFILEREQUESTSListFileRequestsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSListFileRequestsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSListFileRequestsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEREQUESTSListFileRequestsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabledForTeam: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabledForTeam(): this;

	initWithOther(): this;

	isDisabledForTeam(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEREQUESTSListFileRequestsErrorSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSListFileRequestsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSListFileRequestsError;

	static new(): DBFILEREQUESTSListFileRequestsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSListFileRequestsError): NSDictionary<string, any>;
}

declare const enum DBFILEREQUESTSListFileRequestsErrorTag {

	DisabledForTeam = 0,

	Other = 1
}

declare class DBFILEREQUESTSListFileRequestsResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSListFileRequestsResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSListFileRequestsResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fileRequests: NSArray<DBFILEREQUESTSFileRequest>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { fileRequests: NSArray<DBFILEREQUESTSFileRequest> | DBFILEREQUESTSFileRequest[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFileRequests(fileRequests: NSArray<DBFILEREQUESTSFileRequest> | DBFILEREQUESTSFileRequest[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEREQUESTSListFileRequestsResultSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSListFileRequestsResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSListFileRequestsResult;

	static new(): DBFILEREQUESTSListFileRequestsResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSListFileRequestsResult): NSDictionary<string, any>;
}

declare class DBFILEREQUESTSRouteObjects extends NSObject {

	static DBFILEREQUESTSCreate(): DBRoute;

	static DBFILEREQUESTSGet(): DBRoute;

	static DBFILEREQUESTSList(): DBRoute;

	static DBFILEREQUESTSUpdate(): DBRoute;

	static alloc(): DBFILEREQUESTSRouteObjects; // inherited from NSObject

	static new(): DBFILEREQUESTSRouteObjects; // inherited from NSObject
}

declare class DBFILEREQUESTSUpdateFileRequestArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSUpdateFileRequestArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSUpdateFileRequestArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly deadline: DBFILEREQUESTSUpdateFileRequestDeadline;

	readonly destination: string;

	readonly id_: string;

	readonly open: number;

	readonly title: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; });

	constructor(o: { id_: string; title: string; destination: string; deadline: DBFILEREQUESTSUpdateFileRequestDeadline; open: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_(id_: string): this;

	initWithId_TitleDestinationDeadlineOpen(id_: string, title: string, destination: string, deadline: DBFILEREQUESTSUpdateFileRequestDeadline, open: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILEREQUESTSUpdateFileRequestArgsSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSUpdateFileRequestArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSUpdateFileRequestArgs;

	static new(): DBFILEREQUESTSUpdateFileRequestArgsSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSUpdateFileRequestArgs): NSDictionary<string, any>;
}

declare class DBFILEREQUESTSUpdateFileRequestDeadline extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSUpdateFileRequestDeadline; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSUpdateFileRequestDeadline; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEREQUESTSUpdateFileRequestDeadlineTag;

	readonly update: DBFILEREQUESTSFileRequestDeadline;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { noUpdate: void; });

	constructor(o: { other: void; });

	constructor(o: { update: DBFILEREQUESTSFileRequestDeadline; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNoUpdate(): this;

	initWithOther(): this;

	initWithUpdate(update: DBFILEREQUESTSFileRequestDeadline): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoUpdate(): boolean;

	isOther(): boolean;

	isUpdate(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEREQUESTSUpdateFileRequestDeadlineSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSUpdateFileRequestDeadlineSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSUpdateFileRequestDeadline;

	static new(): DBFILEREQUESTSUpdateFileRequestDeadlineSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSUpdateFileRequestDeadline): NSDictionary<string, any>;
}

declare const enum DBFILEREQUESTSUpdateFileRequestDeadlineTag {

	NoUpdate = 0,

	Update = 1,

	Other = 2
}

declare class DBFILEREQUESTSUpdateFileRequestError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILEREQUESTSUpdateFileRequestError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILEREQUESTSUpdateFileRequestError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILEREQUESTSUpdateFileRequestErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appLacksAccess: void; });

	constructor(o: { disabledForTeam: void; });

	constructor(o: { emailUnverified: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { notAFolder: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { validationError: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppLacksAccess(): this;

	initWithDisabledForTeam(): this;

	initWithEmailUnverified(): this;

	initWithNoPermission(): this;

	initWithNotAFolder(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithValidationError(): this;

	isAppLacksAccess(): boolean;

	isDisabledForTeam(): boolean;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isNotAFolder(): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isValidationError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILEREQUESTSUpdateFileRequestErrorSerializer extends NSObject {

	static alloc(): DBFILEREQUESTSUpdateFileRequestErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILEREQUESTSUpdateFileRequestError;

	static new(): DBFILEREQUESTSUpdateFileRequestErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILEREQUESTSUpdateFileRequestError): NSDictionary<string, any>;
}

declare const enum DBFILEREQUESTSUpdateFileRequestErrorTag {

	DisabledForTeam = 0,

	Other = 1,

	NotFound = 2,

	NotAFolder = 3,

	AppLacksAccess = 4,

	NoPermission = 5,

	EmailUnverified = 6,

	ValidationError = 7
}

declare class DBFILEREQUESTSUserAuthRoutes extends NSObject {

	static alloc(): DBFILEREQUESTSUserAuthRoutes; // inherited from NSObject

	static new(): DBFILEREQUESTSUserAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	createDestination(title: string, destination: string): DBRpcTask<DBFILEREQUESTSFileRequest, DBFILEREQUESTSCreateFileRequestError>;

	createDestinationDeadlineOpen(title: string, destination: string, deadline: DBFILEREQUESTSFileRequestDeadline, open: number): DBRpcTask<DBFILEREQUESTSFileRequest, DBFILEREQUESTSCreateFileRequestError>;

	get(id_: string): DBRpcTask<DBFILEREQUESTSFileRequest, DBFILEREQUESTSGetFileRequestError>;

	init(client: DBTransportClient): this;

	list(): DBRpcTask<DBFILEREQUESTSListFileRequestsResult, DBFILEREQUESTSListFileRequestsError>;

	update(id_: string): DBRpcTask<DBFILEREQUESTSFileRequest, DBFILEREQUESTSUpdateFileRequestError>;

	updateTitleDestinationDeadlineOpen(id_: string, title: string, destination: string, deadline: DBFILEREQUESTSUpdateFileRequestDeadline, open: number): DBRpcTask<DBFILEREQUESTSFileRequest, DBFILEREQUESTSUpdateFileRequestError>;
}

declare class DBFILESAlphaGetMetadataArg extends DBFILESGetMetadataArg implements DBSerializable, NSCopying {

	static alloc(): DBFILESAlphaGetMetadataArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESAlphaGetMetadataArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly includePropertyTemplates: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; includeMediaInfo: number; includeDeleted: number; includeHasExplicitSharedMembers: number; includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase; includePropertyTemplates: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathIncludeMediaInfoIncludeDeletedIncludeHasExplicitSharedMembersIncludePropertyGroupsIncludePropertyTemplates(path: string, includeMediaInfo: number, includeDeleted: number, includeHasExplicitSharedMembers: number, includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase, includePropertyTemplates: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESAlphaGetMetadataArgSerializer extends NSObject {

	static alloc(): DBFILESAlphaGetMetadataArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESAlphaGetMetadataArg;

	static new(): DBFILESAlphaGetMetadataArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESAlphaGetMetadataArg): NSDictionary<string, any>;
}

declare class DBFILESAlphaGetMetadataError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESAlphaGetMetadataError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESAlphaGetMetadataError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly propertiesError: DBFILEPROPERTIESLookUpPropertiesError;

	readonly tag: DBFILESAlphaGetMetadataErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: DBFILESLookupError; });

	constructor(o: { propertiesError: DBFILEPROPERTIESLookUpPropertiesError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: DBFILESLookupError): this;

	initWithPropertiesError(propertiesError: DBFILEPROPERTIESLookUpPropertiesError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPath(): boolean;

	isPropertiesError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESAlphaGetMetadataErrorSerializer extends NSObject {

	static alloc(): DBFILESAlphaGetMetadataErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESAlphaGetMetadataError;

	static new(): DBFILESAlphaGetMetadataErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESAlphaGetMetadataError): NSDictionary<string, any>;
}

declare const enum DBFILESAlphaGetMetadataErrorTag {

	Path = 0,

	PropertiesError = 1
}

declare class DBFILESCommitInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCommitInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCommitInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly autorename: number;

	readonly clientModified: Date;

	readonly mode: DBFILESWriteMode;

	readonly mute: number;

	readonly path: string;

	readonly propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup>;

	readonly strictConflict: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; mode: DBFILESWriteMode; autorename: number; clientModified: Date; mute: number; propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]; strictConflict: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathModeAutorenameClientModifiedMutePropertyGroupsStrictConflict(path: string, mode: DBFILESWriteMode, autorename: number, clientModified: Date, mute: number, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[], strictConflict: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESCommitInfoSerializer extends NSObject {

	static alloc(): DBFILESCommitInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCommitInfo;

	static new(): DBFILESCommitInfoSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCommitInfo): NSDictionary<string, any>;
}

declare class DBFILESCommitInfoWithProperties extends DBFILESCommitInfo implements DBSerializable, NSCopying {

	static alloc(): DBFILESCommitInfoWithProperties; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCommitInfoWithProperties; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESCommitInfoWithPropertiesSerializer extends NSObject {

	static alloc(): DBFILESCommitInfoWithPropertiesSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCommitInfoWithProperties;

	static new(): DBFILESCommitInfoWithPropertiesSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCommitInfoWithProperties): NSDictionary<string, any>;
}

declare class DBFILESContentSyncSetting extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESContentSyncSetting; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESContentSyncSetting; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly id_: string;

	readonly syncSetting: DBFILESSyncSetting;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; syncSetting: DBFILESSyncSetting; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_SyncSetting(id_: string, syncSetting: DBFILESSyncSetting): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESContentSyncSettingArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESContentSyncSettingArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESContentSyncSettingArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly id_: string;

	readonly syncSetting: DBFILESSyncSettingArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; syncSetting: DBFILESSyncSettingArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_SyncSetting(id_: string, syncSetting: DBFILESSyncSettingArg): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESContentSyncSettingArgSerializer extends NSObject {

	static alloc(): DBFILESContentSyncSettingArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESContentSyncSettingArg;

	static new(): DBFILESContentSyncSettingArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESContentSyncSettingArg): NSDictionary<string, any>;
}

declare class DBFILESContentSyncSettingSerializer extends NSObject {

	static alloc(): DBFILESContentSyncSettingSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESContentSyncSetting;

	static new(): DBFILESContentSyncSettingSerializer; // inherited from NSObject

	static serialize(instance: DBFILESContentSyncSetting): NSDictionary<string, any>;
}

declare class DBFILESCreateFolderArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly autorename: number;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; autorename: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathAutorename(path: string, autorename: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESCreateFolderArgSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderArg;

	static new(): DBFILESCreateFolderArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderArg): NSDictionary<string, any>;
}

declare class DBFILESCreateFolderBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly autorename: number;

	readonly forceAsync: number;

	readonly paths: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { paths: NSArray<string> | string[]; });

	constructor(o: { paths: NSArray<string> | string[]; autorename: number; forceAsync: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPaths(paths: NSArray<string> | string[]): this;

	initWithPathsAutorenameForceAsync(paths: NSArray<string> | string[], autorename: number, forceAsync: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESCreateFolderBatchArgSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderBatchArg;

	static new(): DBFILESCreateFolderBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderBatchArg): NSDictionary<string, any>;
}

declare class DBFILESCreateFolderBatchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderBatchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderBatchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESCreateFolderBatchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { tooManyFiles: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTooManyFiles(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTooManyFiles(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESCreateFolderBatchErrorSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderBatchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderBatchError;

	static new(): DBFILESCreateFolderBatchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderBatchError): NSDictionary<string, any>;
}

declare const enum DBFILESCreateFolderBatchErrorTag {

	TooManyFiles = 0,

	Other = 1
}

declare class DBFILESCreateFolderBatchJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderBatchJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderBatchJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBFILESCreateFolderBatchResult;

	readonly failed: DBFILESCreateFolderBatchError;

	readonly tag: DBFILESCreateFolderBatchJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBFILESCreateFolderBatchResult; });

	constructor(o: { failed: DBFILESCreateFolderBatchError; });

	constructor(o: { inProgress: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBFILESCreateFolderBatchResult): this;

	initWithFailed(failed: DBFILESCreateFolderBatchError): this;

	initWithInProgress(): this;

	initWithOther(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESCreateFolderBatchJobStatusSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderBatchJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderBatchJobStatus;

	static new(): DBFILESCreateFolderBatchJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderBatchJobStatus): NSDictionary<string, any>;
}

declare const enum DBFILESCreateFolderBatchJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2,

	Other = 3
}

declare class DBFILESCreateFolderBatchLaunch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderBatchLaunch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderBatchLaunch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: DBFILESCreateFolderBatchResult;

	readonly tag: DBFILESCreateFolderBatchLaunchTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: DBFILESCreateFolderBatchResult; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: DBFILESCreateFolderBatchResult): this;

	initWithOther(): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESCreateFolderBatchLaunchSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderBatchLaunchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderBatchLaunch;

	static new(): DBFILESCreateFolderBatchLaunchSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderBatchLaunch): NSDictionary<string, any>;
}

declare const enum DBFILESCreateFolderBatchLaunchTag {

	AsyncJobId = 0,

	Complete = 1,

	Other = 2
}

declare class DBFILESCreateFolderBatchResult extends DBFILESFileOpsResult implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESCreateFolderBatchResultEntry>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESCreateFolderBatchResultEntry> | DBFILESCreateFolderBatchResultEntry[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESCreateFolderBatchResultEntry> | DBFILESCreateFolderBatchResultEntry[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESCreateFolderBatchResultEntry extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderBatchResultEntry; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderBatchResultEntry; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly failure: DBFILESCreateFolderEntryError;

	readonly success: DBFILESCreateFolderEntryResult;

	readonly tag: DBFILESCreateFolderBatchResultEntryTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { failure: DBFILESCreateFolderEntryError; });

	constructor(o: { success: DBFILESCreateFolderEntryResult; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFailure(failure: DBFILESCreateFolderEntryError): this;

	initWithSuccess(success: DBFILESCreateFolderEntryResult): this;

	isEqual(object: any): boolean;

	isFailure(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESCreateFolderBatchResultEntrySerializer extends NSObject {

	static alloc(): DBFILESCreateFolderBatchResultEntrySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderBatchResultEntry;

	static new(): DBFILESCreateFolderBatchResultEntrySerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderBatchResultEntry): NSDictionary<string, any>;
}

declare const enum DBFILESCreateFolderBatchResultEntryTag {

	Success = 0,

	Failure = 1
}

declare class DBFILESCreateFolderBatchResultSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderBatchResult;

	static new(): DBFILESCreateFolderBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderBatchResult): NSDictionary<string, any>;
}

declare class DBFILESCreateFolderEntryError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderEntryError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderEntryError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESWriteError;

	readonly tag: DBFILESCreateFolderEntryErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESWriteError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESWriteError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESCreateFolderEntryErrorSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderEntryErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderEntryError;

	static new(): DBFILESCreateFolderEntryErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderEntryError): NSDictionary<string, any>;
}

declare const enum DBFILESCreateFolderEntryErrorTag {

	Path = 0,

	Other = 1
}

declare class DBFILESCreateFolderEntryResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderEntryResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderEntryResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESFolderMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESFolderMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESFolderMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESCreateFolderEntryResultSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderEntryResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderEntryResult;

	static new(): DBFILESCreateFolderEntryResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderEntryResult): NSDictionary<string, any>;
}

declare class DBFILESCreateFolderError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESWriteError;

	readonly tag: DBFILESCreateFolderErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: DBFILESWriteError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: DBFILESWriteError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESCreateFolderErrorSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderError;

	static new(): DBFILESCreateFolderErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderError): NSDictionary<string, any>;
}

declare const enum DBFILESCreateFolderErrorTag {

	Path = 0
}

declare class DBFILESCreateFolderResult extends DBFILESFileOpsResult implements DBSerializable, NSCopying {

	static alloc(): DBFILESCreateFolderResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESCreateFolderResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESFolderMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESFolderMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESFolderMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESCreateFolderResultSerializer extends NSObject {

	static alloc(): DBFILESCreateFolderResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESCreateFolderResult;

	static new(): DBFILESCreateFolderResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESCreateFolderResult): NSDictionary<string, any>;
}

declare class DBFILESDeleteArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly parentRev: string;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; parentRev: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathParentRev(path: string, parentRev: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDeleteArgSerializer extends NSObject {

	static alloc(): DBFILESDeleteArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteArg;

	static new(): DBFILESDeleteArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteArg): NSDictionary<string, any>;
}

declare class DBFILESDeleteBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESDeleteArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESDeleteArg> | DBFILESDeleteArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESDeleteArg> | DBFILESDeleteArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDeleteBatchArgSerializer extends NSObject {

	static alloc(): DBFILESDeleteBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteBatchArg;

	static new(): DBFILESDeleteBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteBatchArg): NSDictionary<string, any>;
}

declare class DBFILESDeleteBatchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteBatchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteBatchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESDeleteBatchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { tooManyWriteOperations: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTooManyWriteOperations(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTooManyWriteOperations(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESDeleteBatchErrorSerializer extends NSObject {

	static alloc(): DBFILESDeleteBatchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteBatchError;

	static new(): DBFILESDeleteBatchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteBatchError): NSDictionary<string, any>;
}

declare const enum DBFILESDeleteBatchErrorTag {

	TooManyWriteOperations = 0,

	Other = 1
}

declare class DBFILESDeleteBatchJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteBatchJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteBatchJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBFILESDeleteBatchResult;

	readonly failed: DBFILESDeleteBatchError;

	readonly tag: DBFILESDeleteBatchJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBFILESDeleteBatchResult; });

	constructor(o: { failed: DBFILESDeleteBatchError; });

	constructor(o: { inProgress: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBFILESDeleteBatchResult): this;

	initWithFailed(failed: DBFILESDeleteBatchError): this;

	initWithInProgress(): this;

	initWithOther(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESDeleteBatchJobStatusSerializer extends NSObject {

	static alloc(): DBFILESDeleteBatchJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteBatchJobStatus;

	static new(): DBFILESDeleteBatchJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteBatchJobStatus): NSDictionary<string, any>;
}

declare const enum DBFILESDeleteBatchJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2,

	Other = 3
}

declare class DBFILESDeleteBatchLaunch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteBatchLaunch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteBatchLaunch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: DBFILESDeleteBatchResult;

	readonly tag: DBFILESDeleteBatchLaunchTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: DBFILESDeleteBatchResult; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: DBFILESDeleteBatchResult): this;

	initWithOther(): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESDeleteBatchLaunchSerializer extends NSObject {

	static alloc(): DBFILESDeleteBatchLaunchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteBatchLaunch;

	static new(): DBFILESDeleteBatchLaunchSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteBatchLaunch): NSDictionary<string, any>;
}

declare const enum DBFILESDeleteBatchLaunchTag {

	AsyncJobId = 0,

	Complete = 1,

	Other = 2
}

declare class DBFILESDeleteBatchResult extends DBFILESFileOpsResult implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESDeleteBatchResultEntry>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESDeleteBatchResultEntry> | DBFILESDeleteBatchResultEntry[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESDeleteBatchResultEntry> | DBFILESDeleteBatchResultEntry[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDeleteBatchResultData extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteBatchResultData; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteBatchResultData; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDeleteBatchResultDataSerializer extends NSObject {

	static alloc(): DBFILESDeleteBatchResultDataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteBatchResultData;

	static new(): DBFILESDeleteBatchResultDataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteBatchResultData): NSDictionary<string, any>;
}

declare class DBFILESDeleteBatchResultEntry extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteBatchResultEntry; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteBatchResultEntry; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly failure: DBFILESDeleteError;

	readonly success: DBFILESDeleteBatchResultData;

	readonly tag: DBFILESDeleteBatchResultEntryTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { failure: DBFILESDeleteError; });

	constructor(o: { success: DBFILESDeleteBatchResultData; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFailure(failure: DBFILESDeleteError): this;

	initWithSuccess(success: DBFILESDeleteBatchResultData): this;

	isEqual(object: any): boolean;

	isFailure(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESDeleteBatchResultEntrySerializer extends NSObject {

	static alloc(): DBFILESDeleteBatchResultEntrySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteBatchResultEntry;

	static new(): DBFILESDeleteBatchResultEntrySerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteBatchResultEntry): NSDictionary<string, any>;
}

declare const enum DBFILESDeleteBatchResultEntryTag {

	Success = 0,

	Failure = 1
}

declare class DBFILESDeleteBatchResultSerializer extends NSObject {

	static alloc(): DBFILESDeleteBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteBatchResult;

	static new(): DBFILESDeleteBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteBatchResult): NSDictionary<string, any>;
}

declare class DBFILESDeleteError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly pathLookup: DBFILESLookupError;

	readonly pathWrite: DBFILESWriteError;

	readonly tag: DBFILESDeleteErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { pathLookup: DBFILESLookupError; });

	constructor(o: { pathWrite: DBFILESWriteError; });

	constructor(o: { tooManyFiles: void; });

	constructor(o: { tooManyWriteOperations: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPathLookup(pathLookup: DBFILESLookupError): this;

	initWithPathWrite(pathWrite: DBFILESWriteError): this;

	initWithTooManyFiles(): this;

	initWithTooManyWriteOperations(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPathLookup(): boolean;

	isPathWrite(): boolean;

	isTooManyFiles(): boolean;

	isTooManyWriteOperations(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESDeleteErrorSerializer extends NSObject {

	static alloc(): DBFILESDeleteErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteError;

	static new(): DBFILESDeleteErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteError): NSDictionary<string, any>;
}

declare const enum DBFILESDeleteErrorTag {

	PathLookup = 0,

	PathWrite = 1,

	TooManyWriteOperations = 2,

	TooManyFiles = 3,

	Other = 4
}

declare class DBFILESDeleteResult extends DBFILESFileOpsResult implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeleteResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeleteResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDeleteResultSerializer extends NSObject {

	static alloc(): DBFILESDeleteResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeleteResult;

	static new(): DBFILESDeleteResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeleteResult): NSDictionary<string, any>;
}

declare class DBFILESDeletedMetadata extends DBFILESMetadata implements DBSerializable, NSCopying {

	static alloc(): DBFILESDeletedMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDeletedMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDeletedMetadataSerializer extends NSObject {

	static alloc(): DBFILESDeletedMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDeletedMetadata;

	static new(): DBFILESDeletedMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDeletedMetadata): NSDictionary<string, any>;
}

declare class DBFILESDimensions extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDimensions; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDimensions; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly height: number;

	readonly width: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { height: number; width: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHeightWidth(height: number, width: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDimensionsSerializer extends NSObject {

	static alloc(): DBFILESDimensionsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDimensions;

	static new(): DBFILESDimensionsSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDimensions): NSDictionary<string, any>;
}

declare class DBFILESDownloadArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDownloadArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDownloadArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly rev: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; rev: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathRev(path: string, rev: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDownloadArgSerializer extends NSObject {

	static alloc(): DBFILESDownloadArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDownloadArg;

	static new(): DBFILESDownloadArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDownloadArg): NSDictionary<string, any>;
}

declare class DBFILESDownloadError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDownloadError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDownloadError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESDownloadErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESDownloadErrorSerializer extends NSObject {

	static alloc(): DBFILESDownloadErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDownloadError;

	static new(): DBFILESDownloadErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDownloadError): NSDictionary<string, any>;
}

declare const enum DBFILESDownloadErrorTag {

	Path = 0,

	Other = 1
}

declare class DBFILESDownloadZipArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDownloadZipArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDownloadZipArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDownloadZipArgSerializer extends NSObject {

	static alloc(): DBFILESDownloadZipArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDownloadZipArg;

	static new(): DBFILESDownloadZipArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDownloadZipArg): NSDictionary<string, any>;
}

declare class DBFILESDownloadZipError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDownloadZipError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDownloadZipError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESDownloadZipErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	constructor(o: { tooLarge: void; });

	constructor(o: { tooManyFiles: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	initWithTooLarge(): this;

	initWithTooManyFiles(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isTooLarge(): boolean;

	isTooManyFiles(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESDownloadZipErrorSerializer extends NSObject {

	static alloc(): DBFILESDownloadZipErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDownloadZipError;

	static new(): DBFILESDownloadZipErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDownloadZipError): NSDictionary<string, any>;
}

declare const enum DBFILESDownloadZipErrorTag {

	Path = 0,

	TooLarge = 1,

	TooManyFiles = 2,

	Other = 3
}

declare class DBFILESDownloadZipResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESDownloadZipResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESDownloadZipResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESFolderMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESFolderMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESFolderMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESDownloadZipResultSerializer extends NSObject {

	static alloc(): DBFILESDownloadZipResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESDownloadZipResult;

	static new(): DBFILESDownloadZipResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESDownloadZipResult): NSDictionary<string, any>;
}

declare class DBFILESFileMetadata extends DBFILESMetadata implements DBSerializable, NSCopying {

	static alloc(): DBFILESFileMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESFileMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly clientModified: Date;

	readonly contentHash: string;

	readonly hasExplicitSharedMembers: number;

	readonly id_: string;

	readonly mediaInfo: DBFILESMediaInfo;

	readonly propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup>;

	readonly rev: string;

	readonly serverModified: Date;

	readonly sharingInfo: DBFILESFileSharingInfo;

	readonly size: number;

	readonly symlinkInfo: DBFILESSymlinkInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; id_: string; clientModified: Date; serverModified: Date; rev: string; size: number; });

	constructor(o: { name: string; id_: string; clientModified: Date; serverModified: Date; rev: string; size: number; pathLower: string; pathDisplay: string; parentSharedFolderId: string; mediaInfo: DBFILESMediaInfo; symlinkInfo: DBFILESSymlinkInfo; sharingInfo: DBFILESFileSharingInfo; propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]; hasExplicitSharedMembers: number; contentHash: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNameId_ClientModifiedServerModifiedRevSize(name: string, id_: string, clientModified: Date, serverModified: Date, rev: string, size: number): this;

	initWithNameId_ClientModifiedServerModifiedRevSizePathLowerPathDisplayParentSharedFolderIdMediaInfoSymlinkInfoSharingInfoPropertyGroupsHasExplicitSharedMembersContentHash(name: string, id_: string, clientModified: Date, serverModified: Date, rev: string, size: number, pathLower: string, pathDisplay: string, parentSharedFolderId: string, mediaInfo: DBFILESMediaInfo, symlinkInfo: DBFILESSymlinkInfo, sharingInfo: DBFILESFileSharingInfo, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[], hasExplicitSharedMembers: number, contentHash: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESFileMetadataSerializer extends NSObject {

	static alloc(): DBFILESFileMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESFileMetadata;

	static new(): DBFILESFileMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESFileMetadata): NSDictionary<string, any>;
}

declare class DBFILESFileOpsResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESFileOpsResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESFileOpsResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESFileOpsResultSerializer extends NSObject {

	static alloc(): DBFILESFileOpsResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESFileOpsResult;

	static new(): DBFILESFileOpsResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESFileOpsResult): NSDictionary<string, any>;
}

declare class DBFILESFileSharingInfo extends DBFILESSharingInfo implements DBSerializable, NSCopying {

	static alloc(): DBFILESFileSharingInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESFileSharingInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly modifiedBy: string;

	readonly parentSharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { readOnly: number; parentSharedFolderId: string; });

	constructor(o: { readOnly: number; parentSharedFolderId: string; modifiedBy: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithReadOnlyParentSharedFolderId(readOnly: number, parentSharedFolderId: string): this;

	initWithReadOnlyParentSharedFolderIdModifiedBy(readOnly: number, parentSharedFolderId: string, modifiedBy: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESFileSharingInfoSerializer extends NSObject {

	static alloc(): DBFILESFileSharingInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESFileSharingInfo;

	static new(): DBFILESFileSharingInfoSerializer; // inherited from NSObject

	static serialize(instance: DBFILESFileSharingInfo): NSDictionary<string, any>;
}

declare class DBFILESFolderMetadata extends DBFILESMetadata implements DBSerializable, NSCopying {

	static alloc(): DBFILESFolderMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESFolderMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly id_: string;

	readonly propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup>;

	readonly sharedFolderId: string;

	readonly sharingInfo: DBFILESFolderSharingInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; id_: string; });

	constructor(o: { name: string; id_: string; pathLower: string; pathDisplay: string; parentSharedFolderId: string; sharedFolderId: string; sharingInfo: DBFILESFolderSharingInfo; propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNameId_(name: string, id_: string): this;

	initWithNameId_PathLowerPathDisplayParentSharedFolderIdSharedFolderIdSharingInfoPropertyGroups(name: string, id_: string, pathLower: string, pathDisplay: string, parentSharedFolderId: string, sharedFolderId: string, sharingInfo: DBFILESFolderSharingInfo, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESFolderMetadataSerializer extends NSObject {

	static alloc(): DBFILESFolderMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESFolderMetadata;

	static new(): DBFILESFolderMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESFolderMetadata): NSDictionary<string, any>;
}

declare class DBFILESFolderSharingInfo extends DBFILESSharingInfo implements DBSerializable, NSCopying {

	static alloc(): DBFILESFolderSharingInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESFolderSharingInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly noAccess: number;

	readonly parentSharedFolderId: string;

	readonly sharedFolderId: string;

	readonly traverseOnly: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { readOnly: number; parentSharedFolderId: string; sharedFolderId: string; traverseOnly: number; noAccess: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithReadOnlyParentSharedFolderIdSharedFolderIdTraverseOnlyNoAccess(readOnly: number, parentSharedFolderId: string, sharedFolderId: string, traverseOnly: number, noAccess: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESFolderSharingInfoSerializer extends NSObject {

	static alloc(): DBFILESFolderSharingInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESFolderSharingInfo;

	static new(): DBFILESFolderSharingInfoSerializer; // inherited from NSObject

	static serialize(instance: DBFILESFolderSharingInfo): NSDictionary<string, any>;
}

declare class DBFILESGetCopyReferenceArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetCopyReferenceArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetCopyReferenceArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetCopyReferenceArgSerializer extends NSObject {

	static alloc(): DBFILESGetCopyReferenceArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetCopyReferenceArg;

	static new(): DBFILESGetCopyReferenceArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetCopyReferenceArg): NSDictionary<string, any>;
}

declare class DBFILESGetCopyReferenceError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetCopyReferenceError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetCopyReferenceError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESGetCopyReferenceErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESGetCopyReferenceErrorSerializer extends NSObject {

	static alloc(): DBFILESGetCopyReferenceErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetCopyReferenceError;

	static new(): DBFILESGetCopyReferenceErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetCopyReferenceError): NSDictionary<string, any>;
}

declare const enum DBFILESGetCopyReferenceErrorTag {

	Path = 0,

	Other = 1
}

declare class DBFILESGetCopyReferenceResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetCopyReferenceResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetCopyReferenceResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dCopyReference: string;

	readonly expires: Date;

	readonly metadata: DBFILESMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESMetadata; dCopyReference: string; expires: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadataDCopyReferenceExpires(metadata: DBFILESMetadata, dCopyReference: string, expires: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetCopyReferenceResultSerializer extends NSObject {

	static alloc(): DBFILESGetCopyReferenceResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetCopyReferenceResult;

	static new(): DBFILESGetCopyReferenceResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetCopyReferenceResult): NSDictionary<string, any>;
}

declare class DBFILESGetMetadataArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetMetadataArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetMetadataArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly includeDeleted: number;

	readonly includeHasExplicitSharedMembers: number;

	readonly includeMediaInfo: number;

	readonly includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; includeMediaInfo: number; includeDeleted: number; includeHasExplicitSharedMembers: number; includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathIncludeMediaInfoIncludeDeletedIncludeHasExplicitSharedMembersIncludePropertyGroups(path: string, includeMediaInfo: number, includeDeleted: number, includeHasExplicitSharedMembers: number, includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetMetadataArgSerializer extends NSObject {

	static alloc(): DBFILESGetMetadataArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetMetadataArg;

	static new(): DBFILESGetMetadataArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetMetadataArg): NSDictionary<string, any>;
}

declare class DBFILESGetMetadataError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetMetadataError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetMetadataError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESGetMetadataErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: DBFILESLookupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: DBFILESLookupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESGetMetadataErrorSerializer extends NSObject {

	static alloc(): DBFILESGetMetadataErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetMetadataError;

	static new(): DBFILESGetMetadataErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetMetadataError): NSDictionary<string, any>;
}

declare const enum DBFILESGetMetadataErrorTag {

	Path = 0
}

declare class DBFILESGetTemporaryLinkArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetTemporaryLinkArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetTemporaryLinkArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetTemporaryLinkArgSerializer extends NSObject {

	static alloc(): DBFILESGetTemporaryLinkArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetTemporaryLinkArg;

	static new(): DBFILESGetTemporaryLinkArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetTemporaryLinkArg): NSDictionary<string, any>;
}

declare class DBFILESGetTemporaryLinkError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetTemporaryLinkError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetTemporaryLinkError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESGetTemporaryLinkErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESGetTemporaryLinkErrorSerializer extends NSObject {

	static alloc(): DBFILESGetTemporaryLinkErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetTemporaryLinkError;

	static new(): DBFILESGetTemporaryLinkErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetTemporaryLinkError): NSDictionary<string, any>;
}

declare const enum DBFILESGetTemporaryLinkErrorTag {

	Path = 0,

	Other = 1
}

declare class DBFILESGetTemporaryLinkResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetTemporaryLinkResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetTemporaryLinkResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly link: string;

	readonly metadata: DBFILESFileMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESFileMetadata; link: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadataLink(metadata: DBFILESFileMetadata, link: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetTemporaryLinkResultSerializer extends NSObject {

	static alloc(): DBFILESGetTemporaryLinkResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetTemporaryLinkResult;

	static new(): DBFILESGetTemporaryLinkResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetTemporaryLinkResult): NSDictionary<string, any>;
}

declare class DBFILESGetTemporaryUploadLinkArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetTemporaryUploadLinkArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetTemporaryUploadLinkArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commitInfo: DBFILESCommitInfo;

	readonly duration: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { commitInfo: DBFILESCommitInfo; });

	constructor(o: { commitInfo: DBFILESCommitInfo; duration: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCommitInfo(commitInfo: DBFILESCommitInfo): this;

	initWithCommitInfoDuration(commitInfo: DBFILESCommitInfo, duration: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetTemporaryUploadLinkArgSerializer extends NSObject {

	static alloc(): DBFILESGetTemporaryUploadLinkArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetTemporaryUploadLinkArg;

	static new(): DBFILESGetTemporaryUploadLinkArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetTemporaryUploadLinkArg): NSDictionary<string, any>;
}

declare class DBFILESGetTemporaryUploadLinkResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetTemporaryUploadLinkResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetTemporaryUploadLinkResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly link: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { link: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLink(link: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetTemporaryUploadLinkResultSerializer extends NSObject {

	static alloc(): DBFILESGetTemporaryUploadLinkResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetTemporaryUploadLinkResult;

	static new(): DBFILESGetTemporaryUploadLinkResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetTemporaryUploadLinkResult): NSDictionary<string, any>;
}

declare class DBFILESGetThumbnailBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetThumbnailBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetThumbnailBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESThumbnailArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESThumbnailArg> | DBFILESThumbnailArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESThumbnailArg> | DBFILESThumbnailArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetThumbnailBatchArgSerializer extends NSObject {

	static alloc(): DBFILESGetThumbnailBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetThumbnailBatchArg;

	static new(): DBFILESGetThumbnailBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetThumbnailBatchArg): NSDictionary<string, any>;
}

declare class DBFILESGetThumbnailBatchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetThumbnailBatchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetThumbnailBatchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESGetThumbnailBatchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { tooManyFiles: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTooManyFiles(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTooManyFiles(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESGetThumbnailBatchErrorSerializer extends NSObject {

	static alloc(): DBFILESGetThumbnailBatchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetThumbnailBatchError;

	static new(): DBFILESGetThumbnailBatchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetThumbnailBatchError): NSDictionary<string, any>;
}

declare const enum DBFILESGetThumbnailBatchErrorTag {

	TooManyFiles = 0,

	Other = 1
}

declare class DBFILESGetThumbnailBatchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetThumbnailBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetThumbnailBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESGetThumbnailBatchResultEntry>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESGetThumbnailBatchResultEntry> | DBFILESGetThumbnailBatchResultEntry[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESGetThumbnailBatchResultEntry> | DBFILESGetThumbnailBatchResultEntry[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetThumbnailBatchResultData extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetThumbnailBatchResultData; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetThumbnailBatchResultData; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESFileMetadata;

	readonly thumbnail: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESFileMetadata; thumbnail: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadataThumbnail(metadata: DBFILESFileMetadata, thumbnail: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGetThumbnailBatchResultDataSerializer extends NSObject {

	static alloc(): DBFILESGetThumbnailBatchResultDataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetThumbnailBatchResultData;

	static new(): DBFILESGetThumbnailBatchResultDataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetThumbnailBatchResultData): NSDictionary<string, any>;
}

declare class DBFILESGetThumbnailBatchResultEntry extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGetThumbnailBatchResultEntry; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGetThumbnailBatchResultEntry; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly failure: DBFILESThumbnailError;

	readonly success: DBFILESGetThumbnailBatchResultData;

	readonly tag: DBFILESGetThumbnailBatchResultEntryTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { failure: DBFILESThumbnailError; });

	constructor(o: { other: void; });

	constructor(o: { success: DBFILESGetThumbnailBatchResultData; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFailure(failure: DBFILESThumbnailError): this;

	initWithOther(): this;

	initWithSuccess(success: DBFILESGetThumbnailBatchResultData): this;

	isEqual(object: any): boolean;

	isFailure(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESGetThumbnailBatchResultEntrySerializer extends NSObject {

	static alloc(): DBFILESGetThumbnailBatchResultEntrySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetThumbnailBatchResultEntry;

	static new(): DBFILESGetThumbnailBatchResultEntrySerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetThumbnailBatchResultEntry): NSDictionary<string, any>;
}

declare const enum DBFILESGetThumbnailBatchResultEntryTag {

	Success = 0,

	Failure = 1,

	Other = 2
}

declare class DBFILESGetThumbnailBatchResultSerializer extends NSObject {

	static alloc(): DBFILESGetThumbnailBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGetThumbnailBatchResult;

	static new(): DBFILESGetThumbnailBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGetThumbnailBatchResult): NSDictionary<string, any>;
}

declare class DBFILESGpsCoordinates extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESGpsCoordinates; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESGpsCoordinates; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly latitude: number;

	readonly longitude: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { latitude: number; longitude: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLatitudeLongitude(latitude: number, longitude: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESGpsCoordinatesSerializer extends NSObject {

	static alloc(): DBFILESGpsCoordinatesSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESGpsCoordinates;

	static new(): DBFILESGpsCoordinatesSerializer; // inherited from NSObject

	static serialize(instance: DBFILESGpsCoordinates): NSDictionary<string, any>;
}

declare class DBFILESListFolderArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly includeDeleted: number;

	readonly includeHasExplicitSharedMembers: number;

	readonly includeMediaInfo: number;

	readonly includeMountedFolders: number;

	readonly includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase;

	readonly limit: number;

	readonly path: string;

	readonly recursive: number;

	readonly sharedLink: DBFILESSharedLink;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; recursive: number; includeMediaInfo: number; includeDeleted: number; includeHasExplicitSharedMembers: number; includeMountedFolders: number; limit: number; sharedLink: DBFILESSharedLink; includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathRecursiveIncludeMediaInfoIncludeDeletedIncludeHasExplicitSharedMembersIncludeMountedFoldersLimitSharedLinkIncludePropertyGroups(path: string, recursive: number, includeMediaInfo: number, includeDeleted: number, includeHasExplicitSharedMembers: number, includeMountedFolders: number, limit: number, sharedLink: DBFILESSharedLink, includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESListFolderArgSerializer extends NSObject {

	static alloc(): DBFILESListFolderArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderArg;

	static new(): DBFILESListFolderArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderArg): NSDictionary<string, any>;
}

declare class DBFILESListFolderContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESListFolderContinueArgSerializer extends NSObject {

	static alloc(): DBFILESListFolderContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderContinueArg;

	static new(): DBFILESListFolderContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderContinueArg): NSDictionary<string, any>;
}

declare class DBFILESListFolderContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESListFolderContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	constructor(o: { reset: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	initWithReset(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESListFolderContinueErrorSerializer extends NSObject {

	static alloc(): DBFILESListFolderContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderContinueError;

	static new(): DBFILESListFolderContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderContinueError): NSDictionary<string, any>;
}

declare const enum DBFILESListFolderContinueErrorTag {

	Path = 0,

	Reset = 1,

	Other = 2
}

declare class DBFILESListFolderError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESListFolderErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESListFolderErrorSerializer extends NSObject {

	static alloc(): DBFILESListFolderErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderError;

	static new(): DBFILESListFolderErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderError): NSDictionary<string, any>;
}

declare const enum DBFILESListFolderErrorTag {

	Path = 0,

	Other = 1
}

declare class DBFILESListFolderGetLatestCursorResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderGetLatestCursorResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderGetLatestCursorResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESListFolderGetLatestCursorResultSerializer extends NSObject {

	static alloc(): DBFILESListFolderGetLatestCursorResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderGetLatestCursorResult;

	static new(): DBFILESListFolderGetLatestCursorResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderGetLatestCursorResult): NSDictionary<string, any>;
}

declare class DBFILESListFolderLongpollArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderLongpollArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderLongpollArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly timeout: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	constructor(o: { cursor: string; timeout: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	initWithCursorTimeout(cursor: string, timeout: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESListFolderLongpollArgSerializer extends NSObject {

	static alloc(): DBFILESListFolderLongpollArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderLongpollArg;

	static new(): DBFILESListFolderLongpollArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderLongpollArg): NSDictionary<string, any>;
}

declare class DBFILESListFolderLongpollError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderLongpollError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderLongpollError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESListFolderLongpollErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { reset: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithReset(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESListFolderLongpollErrorSerializer extends NSObject {

	static alloc(): DBFILESListFolderLongpollErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderLongpollError;

	static new(): DBFILESListFolderLongpollErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderLongpollError): NSDictionary<string, any>;
}

declare const enum DBFILESListFolderLongpollErrorTag {

	Reset = 0,

	Other = 1
}

declare class DBFILESListFolderLongpollResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderLongpollResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderLongpollResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly backoff: number;

	readonly changes: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { changes: number; });

	constructor(o: { changes: number; backoff: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithChanges(changes: number): this;

	initWithChangesBackoff(changes: number, backoff: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESListFolderLongpollResultSerializer extends NSObject {

	static alloc(): DBFILESListFolderLongpollResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderLongpollResult;

	static new(): DBFILESListFolderLongpollResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderLongpollResult): NSDictionary<string, any>;
}

declare class DBFILESListFolderResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListFolderResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListFolderResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly entries: NSArray<DBFILESMetadata>;

	readonly hasMore: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESMetadata> | DBFILESMetadata[]; cursor: string; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntriesCursorHasMore(entries: NSArray<DBFILESMetadata> | DBFILESMetadata[], cursor: string, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESListFolderResultSerializer extends NSObject {

	static alloc(): DBFILESListFolderResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListFolderResult;

	static new(): DBFILESListFolderResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListFolderResult): NSDictionary<string, any>;
}

declare class DBFILESListRevisionsArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListRevisionsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListRevisionsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly limit: number;

	readonly mode: DBFILESListRevisionsMode;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; mode: DBFILESListRevisionsMode; limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathModeLimit(path: string, mode: DBFILESListRevisionsMode, limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESListRevisionsArgSerializer extends NSObject {

	static alloc(): DBFILESListRevisionsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListRevisionsArg;

	static new(): DBFILESListRevisionsArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListRevisionsArg): NSDictionary<string, any>;
}

declare class DBFILESListRevisionsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListRevisionsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListRevisionsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESListRevisionsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESListRevisionsErrorSerializer extends NSObject {

	static alloc(): DBFILESListRevisionsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListRevisionsError;

	static new(): DBFILESListRevisionsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListRevisionsError): NSDictionary<string, any>;
}

declare const enum DBFILESListRevisionsErrorTag {

	Path = 0,

	Other = 1
}

declare class DBFILESListRevisionsMode extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListRevisionsMode; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListRevisionsMode; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESListRevisionsModeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: void; });

	constructor(o: { other: void; });

	constructor(o: { path: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_(): this;

	initWithOther(): this;

	initWithPath(): this;

	isEqual(object: any): boolean;

	isId_(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESListRevisionsModeSerializer extends NSObject {

	static alloc(): DBFILESListRevisionsModeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListRevisionsMode;

	static new(): DBFILESListRevisionsModeSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListRevisionsMode): NSDictionary<string, any>;
}

declare const enum DBFILESListRevisionsModeTag {

	Path = 0,

	Id_ = 1,

	Other = 2
}

declare class DBFILESListRevisionsResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESListRevisionsResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESListRevisionsResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESFileMetadata>;

	readonly isDeleted: number;

	readonly serverDeleted: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { isDeleted: number; entries: NSArray<DBFILESFileMetadata> | DBFILESFileMetadata[]; });

	constructor(o: { isDeleted: number; entries: NSArray<DBFILESFileMetadata> | DBFILESFileMetadata[]; serverDeleted: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIsDeletedEntries(isDeleted: number, entries: NSArray<DBFILESFileMetadata> | DBFILESFileMetadata[]): this;

	initWithIsDeletedEntriesServerDeleted(isDeleted: number, entries: NSArray<DBFILESFileMetadata> | DBFILESFileMetadata[], serverDeleted: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESListRevisionsResultSerializer extends NSObject {

	static alloc(): DBFILESListRevisionsResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESListRevisionsResult;

	static new(): DBFILESListRevisionsResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESListRevisionsResult): NSDictionary<string, any>;
}

declare class DBFILESLookupError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESLookupError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESLookupError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly malformedPath: string;

	readonly tag: DBFILESLookupErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { malformedPath: string; });

	constructor(o: { notFile: void; });

	constructor(o: { notFolder: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { restrictedContent: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMalformedPath(malformedPath: string): this;

	initWithNotFile(): this;

	initWithNotFolder(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithRestrictedContent(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMalformedPath(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotFile(): boolean;

	isNotFolder(): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isRestrictedContent(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESLookupErrorSerializer extends NSObject {

	static alloc(): DBFILESLookupErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESLookupError;

	static new(): DBFILESLookupErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESLookupError): NSDictionary<string, any>;
}

declare const enum DBFILESLookupErrorTag {

	MalformedPath = 0,

	NotFound = 1,

	NotFile = 2,

	NotFolder = 3,

	RestrictedContent = 4,

	Other = 5
}

declare class DBFILESMediaInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESMediaInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESMediaInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESMediaMetadata;

	readonly tag: DBFILESMediaInfoTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESMediaMetadata; });

	constructor(o: { pending: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESMediaMetadata): this;

	initWithPending(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMetadata(): boolean;

	isPending(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESMediaInfoSerializer extends NSObject {

	static alloc(): DBFILESMediaInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESMediaInfo;

	static new(): DBFILESMediaInfoSerializer; // inherited from NSObject

	static serialize(instance: DBFILESMediaInfo): NSDictionary<string, any>;
}

declare const enum DBFILESMediaInfoTag {

	Pending = 0,

	Metadata = 1
}

declare class DBFILESMediaMetadata extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESMediaMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESMediaMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dimensions: DBFILESDimensions;

	readonly location: DBFILESGpsCoordinates;

	readonly timeTaken: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { dimensions: DBFILESDimensions; location: DBFILESGpsCoordinates; timeTaken: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDimensionsLocationTimeTaken(dimensions: DBFILESDimensions, location: DBFILESGpsCoordinates, timeTaken: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESMediaMetadataSerializer extends NSObject {

	static alloc(): DBFILESMediaMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESMediaMetadata;

	static new(): DBFILESMediaMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESMediaMetadata): NSDictionary<string, any>;
}

declare class DBFILESMetadata extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly name: string;

	readonly parentSharedFolderId: string;

	readonly pathDisplay: string;

	readonly pathLower: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; });

	constructor(o: { name: string; pathLower: string; pathDisplay: string; parentSharedFolderId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithName(name: string): this;

	initWithNamePathLowerPathDisplayParentSharedFolderId(name: string, pathLower: string, pathDisplay: string, parentSharedFolderId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESMetadataSerializer extends NSObject {

	static alloc(): DBFILESMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESMetadata;

	static new(): DBFILESMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESMetadata): NSDictionary<string, any>;
}

declare class DBFILESMoveBatchArg extends DBFILESRelocationBatchArgBase implements DBSerializable, NSCopying {

	static alloc(): DBFILESMoveBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESMoveBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly allowOwnershipTransfer: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]; autorename: number; allowOwnershipTransfer: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntriesAutorenameAllowOwnershipTransfer(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[], autorename: number, allowOwnershipTransfer: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESMoveBatchArgSerializer extends NSObject {

	static alloc(): DBFILESMoveBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESMoveBatchArg;

	static new(): DBFILESMoveBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESMoveBatchArg): NSDictionary<string, any>;
}

declare class DBFILESPhotoMetadata extends DBFILESMediaMetadata implements DBSerializable, NSCopying {

	static alloc(): DBFILESPhotoMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESPhotoMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESPhotoMetadataSerializer extends NSObject {

	static alloc(): DBFILESPhotoMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESPhotoMetadata;

	static new(): DBFILESPhotoMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESPhotoMetadata): NSDictionary<string, any>;
}

declare class DBFILESPreviewArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESPreviewArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESPreviewArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly rev: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; rev: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathRev(path: string, rev: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESPreviewArgSerializer extends NSObject {

	static alloc(): DBFILESPreviewArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESPreviewArg;

	static new(): DBFILESPreviewArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESPreviewArg): NSDictionary<string, any>;
}

declare class DBFILESPreviewError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESPreviewError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESPreviewError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESPreviewErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { inProgress: void; });

	constructor(o: { path: DBFILESLookupError; });

	constructor(o: { unsupportedContent: void; });

	constructor(o: { unsupportedExtension: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInProgress(): this;

	initWithPath(path: DBFILESLookupError): this;

	initWithUnsupportedContent(): this;

	initWithUnsupportedExtension(): this;

	isEqual(object: any): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPath(): boolean;

	isUnsupportedContent(): boolean;

	isUnsupportedExtension(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESPreviewErrorSerializer extends NSObject {

	static alloc(): DBFILESPreviewErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESPreviewError;

	static new(): DBFILESPreviewErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESPreviewError): NSDictionary<string, any>;
}

declare const enum DBFILESPreviewErrorTag {

	Path = 0,

	InProgress = 1,

	UnsupportedExtension = 2,

	UnsupportedContent = 3
}

declare class DBFILESRelocationArg extends DBFILESRelocationPath implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly allowOwnershipTransfer: number;

	readonly allowSharedFolder: number;

	readonly autorename: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { fromPath: string; toPath: string; allowSharedFolder: number; autorename: number; allowOwnershipTransfer: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFromPathToPathAllowSharedFolderAutorenameAllowOwnershipTransfer(fromPath: string, toPath: string, allowSharedFolder: number, autorename: number, allowOwnershipTransfer: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRelocationArgSerializer extends NSObject {

	static alloc(): DBFILESRelocationArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationArg;

	static new(): DBFILESRelocationArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationArg): NSDictionary<string, any>;
}

declare class DBFILESRelocationBatchArg extends DBFILESRelocationBatchArgBase implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly allowOwnershipTransfer: number;

	readonly allowSharedFolder: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]; autorename: number; allowSharedFolder: number; allowOwnershipTransfer: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntriesAutorenameAllowSharedFolderAllowOwnershipTransfer(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[], autorename: number, allowSharedFolder: number, allowOwnershipTransfer: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRelocationBatchArgBase extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchArgBase; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchArgBase; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly autorename: number;

	readonly entries: NSArray<DBFILESRelocationPath>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]; });

	constructor(o: { entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]; autorename: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]): this;

	initWithEntriesAutorename(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[], autorename: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRelocationBatchArgBaseSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchArgBaseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchArgBase;

	static new(): DBFILESRelocationBatchArgBaseSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchArgBase): NSDictionary<string, any>;
}

declare class DBFILESRelocationBatchArgSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchArg;

	static new(): DBFILESRelocationBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchArg): NSDictionary<string, any>;
}

declare class DBFILESRelocationBatchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fromLookup: DBFILESLookupError;

	readonly fromWrite: DBFILESWriteError;

	readonly tag: DBFILESRelocationBatchErrorTag;

	readonly to: DBFILESWriteError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cantCopySharedFolder: void; });

	constructor(o: { cantMoveFolderIntoItself: void; });

	constructor(o: { cantNestSharedFolder: void; });

	constructor(o: { cantTransferOwnership: void; });

	constructor(o: { duplicatedOrNestedPaths: void; });

	constructor(o: { fromLookup: DBFILESLookupError; });

	constructor(o: { fromWrite: DBFILESWriteError; });

	constructor(o: { insufficientQuota: void; });

	constructor(o: { internalError: void; });

	constructor(o: { other: void; });

	constructor(o: { to: DBFILESWriteError; });

	constructor(o: { tooManyFiles: void; });

	constructor(o: { tooManyWriteOperations: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCantCopySharedFolder(): this;

	initWithCantMoveFolderIntoItself(): this;

	initWithCantNestSharedFolder(): this;

	initWithCantTransferOwnership(): this;

	initWithDuplicatedOrNestedPaths(): this;

	initWithFromLookup(fromLookup: DBFILESLookupError): this;

	initWithFromWrite(fromWrite: DBFILESWriteError): this;

	initWithInsufficientQuota(): this;

	initWithInternalError(): this;

	initWithOther(): this;

	initWithTo(to: DBFILESWriteError): this;

	initWithTooManyFiles(): this;

	initWithTooManyWriteOperations(): this;

	isCantCopySharedFolder(): boolean;

	isCantMoveFolderIntoItself(): boolean;

	isCantNestSharedFolder(): boolean;

	isCantTransferOwnership(): boolean;

	isDuplicatedOrNestedPaths(): boolean;

	isEqual(object: any): boolean;

	isFromLookup(): boolean;

	isFromWrite(): boolean;

	isInsufficientQuota(): boolean;

	isInternalError(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTo(): boolean;

	isTooManyFiles(): boolean;

	isTooManyWriteOperations(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRelocationBatchErrorEntry extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchErrorEntry; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchErrorEntry; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly relocationError: DBFILESRelocationError;

	readonly tag: DBFILESRelocationBatchErrorEntryTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { internalError: void; });

	constructor(o: { other: void; });

	constructor(o: { relocationError: DBFILESRelocationError; });

	constructor(o: { tooManyWriteOperations: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInternalError(): this;

	initWithOther(): this;

	initWithRelocationError(relocationError: DBFILESRelocationError): this;

	initWithTooManyWriteOperations(): this;

	isEqual(object: any): boolean;

	isInternalError(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRelocationError(): boolean;

	isTooManyWriteOperations(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRelocationBatchErrorEntrySerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchErrorEntrySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchErrorEntry;

	static new(): DBFILESRelocationBatchErrorEntrySerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchErrorEntry): NSDictionary<string, any>;
}

declare const enum DBFILESRelocationBatchErrorEntryTag {

	RelocationError = 0,

	InternalError = 1,

	TooManyWriteOperations = 2,

	Other = 3
}

declare class DBFILESRelocationBatchErrorSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchError;

	static new(): DBFILESRelocationBatchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchError): NSDictionary<string, any>;
}

declare const enum DBFILESRelocationBatchErrorTag {

	FromLookup = 0,

	FromWrite = 1,

	To = 2,

	CantCopySharedFolder = 3,

	CantNestSharedFolder = 4,

	CantMoveFolderIntoItself = 5,

	TooManyFiles = 6,

	DuplicatedOrNestedPaths = 7,

	CantTransferOwnership = 8,

	InsufficientQuota = 9,

	InternalError = 10,

	Other = 11,

	TooManyWriteOperations = 12
}

declare class DBFILESRelocationBatchJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBFILESRelocationBatchResult;

	readonly failed: DBFILESRelocationBatchError;

	readonly tag: DBFILESRelocationBatchJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBFILESRelocationBatchResult; });

	constructor(o: { failed: DBFILESRelocationBatchError; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBFILESRelocationBatchResult): this;

	initWithFailed(failed: DBFILESRelocationBatchError): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRelocationBatchJobStatusSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchJobStatus;

	static new(): DBFILESRelocationBatchJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchJobStatus): NSDictionary<string, any>;
}

declare const enum DBFILESRelocationBatchJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2
}

declare class DBFILESRelocationBatchLaunch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchLaunch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchLaunch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: DBFILESRelocationBatchResult;

	readonly tag: DBFILESRelocationBatchLaunchTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: DBFILESRelocationBatchResult; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: DBFILESRelocationBatchResult): this;

	initWithOther(): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRelocationBatchLaunchSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchLaunchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchLaunch;

	static new(): DBFILESRelocationBatchLaunchSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchLaunch): NSDictionary<string, any>;
}

declare const enum DBFILESRelocationBatchLaunchTag {

	AsyncJobId = 0,

	Complete = 1,

	Other = 2
}

declare class DBFILESRelocationBatchResult extends DBFILESFileOpsResult implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESRelocationBatchResultData>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESRelocationBatchResultData> | DBFILESRelocationBatchResultData[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESRelocationBatchResultData> | DBFILESRelocationBatchResultData[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRelocationBatchResultData extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchResultData; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchResultData; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRelocationBatchResultDataSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchResultDataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchResultData;

	static new(): DBFILESRelocationBatchResultDataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchResultData): NSDictionary<string, any>;
}

declare class DBFILESRelocationBatchResultEntry extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchResultEntry; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchResultEntry; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly failure: DBFILESRelocationBatchErrorEntry;

	readonly success: DBFILESMetadata;

	readonly tag: DBFILESRelocationBatchResultEntryTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { failure: DBFILESRelocationBatchErrorEntry; });

	constructor(o: { other: void; });

	constructor(o: { success: DBFILESMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFailure(failure: DBFILESRelocationBatchErrorEntry): this;

	initWithOther(): this;

	initWithSuccess(success: DBFILESMetadata): this;

	isEqual(object: any): boolean;

	isFailure(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRelocationBatchResultEntrySerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchResultEntrySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchResultEntry;

	static new(): DBFILESRelocationBatchResultEntrySerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchResultEntry): NSDictionary<string, any>;
}

declare const enum DBFILESRelocationBatchResultEntryTag {

	Success = 0,

	Failure = 1,

	Other = 2
}

declare class DBFILESRelocationBatchResultSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchResult;

	static new(): DBFILESRelocationBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchResult): NSDictionary<string, any>;
}

declare class DBFILESRelocationBatchV2JobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchV2JobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchV2JobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBFILESRelocationBatchV2Result;

	readonly tag: DBFILESRelocationBatchV2JobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBFILESRelocationBatchV2Result; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBFILESRelocationBatchV2Result): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRelocationBatchV2JobStatusSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchV2JobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchV2JobStatus;

	static new(): DBFILESRelocationBatchV2JobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchV2JobStatus): NSDictionary<string, any>;
}

declare const enum DBFILESRelocationBatchV2JobStatusTag {

	InProgress = 0,

	Complete = 1
}

declare class DBFILESRelocationBatchV2Launch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchV2Launch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchV2Launch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: DBFILESRelocationBatchV2Result;

	readonly tag: DBFILESRelocationBatchV2LaunchTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: DBFILESRelocationBatchV2Result; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: DBFILESRelocationBatchV2Result): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRelocationBatchV2LaunchSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchV2LaunchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchV2Launch;

	static new(): DBFILESRelocationBatchV2LaunchSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchV2Launch): NSDictionary<string, any>;
}

declare const enum DBFILESRelocationBatchV2LaunchTag {

	AsyncJobId = 0,

	Complete = 1
}

declare class DBFILESRelocationBatchV2Result extends DBFILESFileOpsResult implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationBatchV2Result; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationBatchV2Result; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESRelocationBatchResultEntry>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESRelocationBatchResultEntry> | DBFILESRelocationBatchResultEntry[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESRelocationBatchResultEntry> | DBFILESRelocationBatchResultEntry[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRelocationBatchV2ResultSerializer extends NSObject {

	static alloc(): DBFILESRelocationBatchV2ResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationBatchV2Result;

	static new(): DBFILESRelocationBatchV2ResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationBatchV2Result): NSDictionary<string, any>;
}

declare class DBFILESRelocationError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fromLookup: DBFILESLookupError;

	readonly fromWrite: DBFILESWriteError;

	readonly tag: DBFILESRelocationErrorTag;

	readonly to: DBFILESWriteError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cantCopySharedFolder: void; });

	constructor(o: { cantMoveFolderIntoItself: void; });

	constructor(o: { cantNestSharedFolder: void; });

	constructor(o: { cantTransferOwnership: void; });

	constructor(o: { duplicatedOrNestedPaths: void; });

	constructor(o: { fromLookup: DBFILESLookupError; });

	constructor(o: { fromWrite: DBFILESWriteError; });

	constructor(o: { insufficientQuota: void; });

	constructor(o: { internalError: void; });

	constructor(o: { other: void; });

	constructor(o: { to: DBFILESWriteError; });

	constructor(o: { tooManyFiles: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCantCopySharedFolder(): this;

	initWithCantMoveFolderIntoItself(): this;

	initWithCantNestSharedFolder(): this;

	initWithCantTransferOwnership(): this;

	initWithDuplicatedOrNestedPaths(): this;

	initWithFromLookup(fromLookup: DBFILESLookupError): this;

	initWithFromWrite(fromWrite: DBFILESWriteError): this;

	initWithInsufficientQuota(): this;

	initWithInternalError(): this;

	initWithOther(): this;

	initWithTo(to: DBFILESWriteError): this;

	initWithTooManyFiles(): this;

	isCantCopySharedFolder(): boolean;

	isCantMoveFolderIntoItself(): boolean;

	isCantNestSharedFolder(): boolean;

	isCantTransferOwnership(): boolean;

	isDuplicatedOrNestedPaths(): boolean;

	isEqual(object: any): boolean;

	isFromLookup(): boolean;

	isFromWrite(): boolean;

	isInsufficientQuota(): boolean;

	isInternalError(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTo(): boolean;

	isTooManyFiles(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRelocationErrorSerializer extends NSObject {

	static alloc(): DBFILESRelocationErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationError;

	static new(): DBFILESRelocationErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationError): NSDictionary<string, any>;
}

declare const enum DBFILESRelocationErrorTag {

	FromLookup = 0,

	FromWrite = 1,

	To = 2,

	CantCopySharedFolder = 3,

	CantNestSharedFolder = 4,

	CantMoveFolderIntoItself = 5,

	TooManyFiles = 6,

	DuplicatedOrNestedPaths = 7,

	CantTransferOwnership = 8,

	InsufficientQuota = 9,

	InternalError = 10,

	Other = 11
}

declare class DBFILESRelocationPath extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationPath; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationPath; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fromPath: string;

	readonly toPath: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { fromPath: string; toPath: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFromPathToPath(fromPath: string, toPath: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRelocationPathSerializer extends NSObject {

	static alloc(): DBFILESRelocationPathSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationPath;

	static new(): DBFILESRelocationPathSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationPath): NSDictionary<string, any>;
}

declare class DBFILESRelocationResult extends DBFILESFileOpsResult implements DBSerializable, NSCopying {

	static alloc(): DBFILESRelocationResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRelocationResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRelocationResultSerializer extends NSObject {

	static alloc(): DBFILESRelocationResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRelocationResult;

	static new(): DBFILESRelocationResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRelocationResult): NSDictionary<string, any>;
}

declare class DBFILESRestoreArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRestoreArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRestoreArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly rev: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; rev: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathRev(path: string, rev: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESRestoreArgSerializer extends NSObject {

	static alloc(): DBFILESRestoreArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRestoreArg;

	static new(): DBFILESRestoreArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRestoreArg): NSDictionary<string, any>;
}

declare class DBFILESRestoreError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESRestoreError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESRestoreError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly pathLookup: DBFILESLookupError;

	readonly pathWrite: DBFILESWriteError;

	readonly tag: DBFILESRestoreErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidRevision: void; });

	constructor(o: { other: void; });

	constructor(o: { pathLookup: DBFILESLookupError; });

	constructor(o: { pathWrite: DBFILESWriteError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidRevision(): this;

	initWithOther(): this;

	initWithPathLookup(pathLookup: DBFILESLookupError): this;

	initWithPathWrite(pathWrite: DBFILESWriteError): this;

	isEqual(object: any): boolean;

	isInvalidRevision(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPathLookup(): boolean;

	isPathWrite(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESRestoreErrorSerializer extends NSObject {

	static alloc(): DBFILESRestoreErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESRestoreError;

	static new(): DBFILESRestoreErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESRestoreError): NSDictionary<string, any>;
}

declare const enum DBFILESRestoreErrorTag {

	PathLookup = 0,

	PathWrite = 1,

	InvalidRevision = 2,

	Other = 3
}

declare class DBFILESRouteObjects extends NSObject {

	static DBFILESAlphaGetMetadata(): DBRoute;

	static DBFILESAlphaUpload(): DBRoute;

	static DBFILESCreateFolder(): DBRoute;

	static DBFILESCreateFolderBatch(): DBRoute;

	static DBFILESCreateFolderBatchCheck(): DBRoute;

	static DBFILESCreateFolderV2(): DBRoute;

	static DBFILESDCopy(): DBRoute;

	static DBFILESDCopyBatch(): DBRoute;

	static DBFILESDCopyBatchCheck(): DBRoute;

	static DBFILESDCopyBatchCheckV2(): DBRoute;

	static DBFILESDCopyBatchV2(): DBRoute;

	static DBFILESDCopyReferenceGet(): DBRoute;

	static DBFILESDCopyReferenceSave(): DBRoute;

	static DBFILESDCopyV2(): DBRoute;

	static DBFILESDeleteBatch(): DBRoute;

	static DBFILESDeleteBatchCheck(): DBRoute;

	static DBFILESDelete_(): DBRoute;

	static DBFILESDelete_V2(): DBRoute;

	static DBFILESDownload(): DBRoute;

	static DBFILESDownloadZip(): DBRoute;

	static DBFILESGetMetadata(): DBRoute;

	static DBFILESGetPreview(): DBRoute;

	static DBFILESGetTemporaryLink(): DBRoute;

	static DBFILESGetTemporaryUploadLink(): DBRoute;

	static DBFILESGetThumbnail(): DBRoute;

	static DBFILESGetThumbnailBatch(): DBRoute;

	static DBFILESListFolder(): DBRoute;

	static DBFILESListFolderContinue(): DBRoute;

	static DBFILESListFolderGetLatestCursor(): DBRoute;

	static DBFILESListFolderLongpoll(): DBRoute;

	static DBFILESListRevisions(): DBRoute;

	static DBFILESMove(): DBRoute;

	static DBFILESMoveBatch(): DBRoute;

	static DBFILESMoveBatchCheck(): DBRoute;

	static DBFILESMoveBatchCheckV2(): DBRoute;

	static DBFILESMoveBatchV2(): DBRoute;

	static DBFILESMoveV2(): DBRoute;

	static DBFILESPermanentlyDelete(): DBRoute;

	static DBFILESPropertiesAdd(): DBRoute;

	static DBFILESPropertiesOverwrite(): DBRoute;

	static DBFILESPropertiesRemove(): DBRoute;

	static DBFILESPropertiesTemplateGet(): DBRoute;

	static DBFILESPropertiesTemplateList(): DBRoute;

	static DBFILESPropertiesUpdate(): DBRoute;

	static DBFILESRestore(): DBRoute;

	static DBFILESSaveUrl(): DBRoute;

	static DBFILESSaveUrlCheckJobStatus(): DBRoute;

	static DBFILESSearch(): DBRoute;

	static DBFILESUpload(): DBRoute;

	static DBFILESUploadSessionAppend(): DBRoute;

	static DBFILESUploadSessionAppendV2(): DBRoute;

	static DBFILESUploadSessionFinish(): DBRoute;

	static DBFILESUploadSessionFinishBatch(): DBRoute;

	static DBFILESUploadSessionFinishBatchCheck(): DBRoute;

	static DBFILESUploadSessionStart(): DBRoute;

	static alloc(): DBFILESRouteObjects; // inherited from NSObject

	static new(): DBFILESRouteObjects; // inherited from NSObject
}

declare class DBFILESSaveCopyReferenceArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSaveCopyReferenceArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSaveCopyReferenceArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dCopyReference: string;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DCopyReference: string; path: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDCopyReferencePath(dCopyReference: string, path: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSaveCopyReferenceArgSerializer extends NSObject {

	static alloc(): DBFILESSaveCopyReferenceArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSaveCopyReferenceArg;

	static new(): DBFILESSaveCopyReferenceArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSaveCopyReferenceArg): NSDictionary<string, any>;
}

declare class DBFILESSaveCopyReferenceError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSaveCopyReferenceError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSaveCopyReferenceError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESWriteError;

	readonly tag: DBFILESSaveCopyReferenceErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidCopyReference: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESWriteError; });

	constructor(o: { tooManyFiles: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidCopyReference(): this;

	initWithNoPermission(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithPath(path: DBFILESWriteError): this;

	initWithTooManyFiles(): this;

	isEqual(object: any): boolean;

	isInvalidCopyReference(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isTooManyFiles(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSaveCopyReferenceErrorSerializer extends NSObject {

	static alloc(): DBFILESSaveCopyReferenceErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSaveCopyReferenceError;

	static new(): DBFILESSaveCopyReferenceErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSaveCopyReferenceError): NSDictionary<string, any>;
}

declare const enum DBFILESSaveCopyReferenceErrorTag {

	Path = 0,

	InvalidCopyReference = 1,

	NoPermission = 2,

	NotFound = 3,

	TooManyFiles = 4,

	Other = 5
}

declare class DBFILESSaveCopyReferenceResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSaveCopyReferenceResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSaveCopyReferenceResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly metadata: DBFILESMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { metadata: DBFILESMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMetadata(metadata: DBFILESMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSaveCopyReferenceResultSerializer extends NSObject {

	static alloc(): DBFILESSaveCopyReferenceResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSaveCopyReferenceResult;

	static new(): DBFILESSaveCopyReferenceResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSaveCopyReferenceResult): NSDictionary<string, any>;
}

declare class DBFILESSaveUrlArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSaveUrlArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSaveUrlArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly url: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; url: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathUrl(path: string, url: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSaveUrlArgSerializer extends NSObject {

	static alloc(): DBFILESSaveUrlArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSaveUrlArg;

	static new(): DBFILESSaveUrlArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSaveUrlArg): NSDictionary<string, any>;
}

declare class DBFILESSaveUrlError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSaveUrlError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSaveUrlError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESWriteError;

	readonly tag: DBFILESSaveUrlErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { downloadFailed: void; });

	constructor(o: { invalidUrl: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESWriteError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDownloadFailed(): this;

	initWithInvalidUrl(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithPath(path: DBFILESWriteError): this;

	isDownloadFailed(): boolean;

	isEqual(object: any): boolean;

	isInvalidUrl(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSaveUrlErrorSerializer extends NSObject {

	static alloc(): DBFILESSaveUrlErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSaveUrlError;

	static new(): DBFILESSaveUrlErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSaveUrlError): NSDictionary<string, any>;
}

declare const enum DBFILESSaveUrlErrorTag {

	Path = 0,

	DownloadFailed = 1,

	InvalidUrl = 2,

	NotFound = 3,

	Other = 4
}

declare class DBFILESSaveUrlJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSaveUrlJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSaveUrlJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBFILESFileMetadata;

	readonly failed: DBFILESSaveUrlError;

	readonly tag: DBFILESSaveUrlJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBFILESFileMetadata; });

	constructor(o: { failed: DBFILESSaveUrlError; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBFILESFileMetadata): this;

	initWithFailed(failed: DBFILESSaveUrlError): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSaveUrlJobStatusSerializer extends NSObject {

	static alloc(): DBFILESSaveUrlJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSaveUrlJobStatus;

	static new(): DBFILESSaveUrlJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSaveUrlJobStatus): NSDictionary<string, any>;
}

declare const enum DBFILESSaveUrlJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2
}

declare class DBFILESSaveUrlResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSaveUrlResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSaveUrlResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: DBFILESFileMetadata;

	readonly tag: DBFILESSaveUrlResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: DBFILESFileMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: DBFILESFileMetadata): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSaveUrlResultSerializer extends NSObject {

	static alloc(): DBFILESSaveUrlResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSaveUrlResult;

	static new(): DBFILESSaveUrlResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSaveUrlResult): NSDictionary<string, any>;
}

declare const enum DBFILESSaveUrlResultTag {

	AsyncJobId = 0,

	Complete = 1
}

declare class DBFILESSearchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSearchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSearchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly maxResults: number;

	readonly mode: DBFILESSearchMode;

	readonly path: string;

	readonly query: string;

	readonly start: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; query: string; });

	constructor(o: { path: string; query: string; start: number; maxResults: number; mode: DBFILESSearchMode; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathQuery(path: string, query: string): this;

	initWithPathQueryStartMaxResultsMode(path: string, query: string, start: number, maxResults: number, mode: DBFILESSearchMode): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSearchArgSerializer extends NSObject {

	static alloc(): DBFILESSearchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSearchArg;

	static new(): DBFILESSearchArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSearchArg): NSDictionary<string, any>;
}

declare class DBFILESSearchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSearchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSearchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESSearchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSearchErrorSerializer extends NSObject {

	static alloc(): DBFILESSearchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSearchError;

	static new(): DBFILESSearchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSearchError): NSDictionary<string, any>;
}

declare const enum DBFILESSearchErrorTag {

	Path = 0,

	Other = 1
}

declare class DBFILESSearchMatch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSearchMatch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSearchMatch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly matchType: DBFILESSearchMatchType;

	readonly metadata: DBFILESMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { matchType: DBFILESSearchMatchType; metadata: DBFILESMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMatchTypeMetadata(matchType: DBFILESSearchMatchType, metadata: DBFILESMetadata): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSearchMatchSerializer extends NSObject {

	static alloc(): DBFILESSearchMatchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSearchMatch;

	static new(): DBFILESSearchMatchSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSearchMatch): NSDictionary<string, any>;
}

declare class DBFILESSearchMatchType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSearchMatchType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSearchMatchType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESSearchMatchTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { both: void; });

	constructor(o: { content: void; });

	constructor(o: { filename: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithBoth(): this;

	initWithContent(): this;

	initWithFilename(): this;

	isBoth(): boolean;

	isContent(): boolean;

	isEqual(object: any): boolean;

	isFilename(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSearchMatchTypeSerializer extends NSObject {

	static alloc(): DBFILESSearchMatchTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSearchMatchType;

	static new(): DBFILESSearchMatchTypeSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSearchMatchType): NSDictionary<string, any>;
}

declare const enum DBFILESSearchMatchTypeTag {

	Filename = 0,

	Content = 1,

	Both = 2
}

declare class DBFILESSearchMode extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSearchMode; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSearchMode; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESSearchModeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { deletedFilename: void; });

	constructor(o: { filename: void; });

	constructor(o: { filenameAndContent: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDeletedFilename(): this;

	initWithFilename(): this;

	initWithFilenameAndContent(): this;

	isDeletedFilename(): boolean;

	isEqual(object: any): boolean;

	isFilename(): boolean;

	isFilenameAndContent(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSearchModeSerializer extends NSObject {

	static alloc(): DBFILESSearchModeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSearchMode;

	static new(): DBFILESSearchModeSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSearchMode): NSDictionary<string, any>;
}

declare const enum DBFILESSearchModeTag {

	Filename = 0,

	FilenameAndContent = 1,

	DeletedFilename = 2
}

declare class DBFILESSearchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSearchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSearchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly matches: NSArray<DBFILESSearchMatch>;

	readonly more: number;

	readonly start: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { matches: NSArray<DBFILESSearchMatch> | DBFILESSearchMatch[]; more: number; start: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMatchesMoreStart(matches: NSArray<DBFILESSearchMatch> | DBFILESSearchMatch[], more: number, start: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSearchResultSerializer extends NSObject {

	static alloc(): DBFILESSearchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSearchResult;

	static new(): DBFILESSearchResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSearchResult): NSDictionary<string, any>;
}

declare class DBFILESSharedLink extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSharedLink; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSharedLink; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly password: string;

	readonly url: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: string; });

	constructor(o: { url: string; password: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUrl(url: string): this;

	initWithUrlPassword(url: string, password: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSharedLinkSerializer extends NSObject {

	static alloc(): DBFILESSharedLinkSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSharedLink;

	static new(): DBFILESSharedLinkSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSharedLink): NSDictionary<string, any>;
}

declare class DBFILESSharingInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSharingInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSharingInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly readOnly: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { readOnly: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithReadOnly(readOnly: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSharingInfoSerializer extends NSObject {

	static alloc(): DBFILESSharingInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSharingInfo;

	static new(): DBFILESSharingInfoSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSharingInfo): NSDictionary<string, any>;
}

declare class DBFILESSymlinkInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSymlinkInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSymlinkInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly target: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { target: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTarget(target: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESSymlinkInfoSerializer extends NSObject {

	static alloc(): DBFILESSymlinkInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSymlinkInfo;

	static new(): DBFILESSymlinkInfoSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSymlinkInfo): NSDictionary<string, any>;
}

declare class DBFILESSyncSetting extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSyncSetting; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSyncSetting; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESSyncSettingTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default_: void; });

	constructor(o: { notSynced: void; });

	constructor(o: { notSyncedInactive: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDefault_(): this;

	initWithNotSynced(): this;

	initWithNotSyncedInactive(): this;

	initWithOther(): this;

	isDefault_(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotSynced(): boolean;

	isNotSyncedInactive(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSyncSettingArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSyncSettingArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSyncSettingArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESSyncSettingArgTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default_: void; });

	constructor(o: { notSynced: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDefault_(): this;

	initWithNotSynced(): this;

	initWithOther(): this;

	isDefault_(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotSynced(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSyncSettingArgSerializer extends NSObject {

	static alloc(): DBFILESSyncSettingArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSyncSettingArg;

	static new(): DBFILESSyncSettingArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSyncSettingArg): NSDictionary<string, any>;
}

declare const enum DBFILESSyncSettingArgTag {

	Default_ = 0,

	NotSynced = 1,

	Other = 2
}

declare class DBFILESSyncSettingSerializer extends NSObject {

	static alloc(): DBFILESSyncSettingSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSyncSetting;

	static new(): DBFILESSyncSettingSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSyncSetting): NSDictionary<string, any>;
}

declare const enum DBFILESSyncSettingTag {

	Default_ = 0,

	NotSynced = 1,

	NotSyncedInactive = 2,

	Other = 3
}

declare class DBFILESSyncSettingsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESSyncSettingsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESSyncSettingsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESSyncSettingsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	constructor(o: { unsupportedCombination: void; });

	constructor(o: { unsupportedConfiguration: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	initWithUnsupportedCombination(): this;

	initWithUnsupportedConfiguration(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isUnsupportedCombination(): boolean;

	isUnsupportedConfiguration(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESSyncSettingsErrorSerializer extends NSObject {

	static alloc(): DBFILESSyncSettingsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESSyncSettingsError;

	static new(): DBFILESSyncSettingsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESSyncSettingsError): NSDictionary<string, any>;
}

declare const enum DBFILESSyncSettingsErrorTag {

	Path = 0,

	UnsupportedCombination = 1,

	UnsupportedConfiguration = 2,

	Other = 3
}

declare class DBFILESThumbnailArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESThumbnailArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESThumbnailArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly format: DBFILESThumbnailFormat;

	readonly mode: DBFILESThumbnailMode;

	readonly path: string;

	readonly size: DBFILESThumbnailSize;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; format: DBFILESThumbnailFormat; size: DBFILESThumbnailSize; mode: DBFILESThumbnailMode; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathFormatSizeMode(path: string, format: DBFILESThumbnailFormat, size: DBFILESThumbnailSize, mode: DBFILESThumbnailMode): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESThumbnailArgSerializer extends NSObject {

	static alloc(): DBFILESThumbnailArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESThumbnailArg;

	static new(): DBFILESThumbnailArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESThumbnailArg): NSDictionary<string, any>;
}

declare class DBFILESThumbnailError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESThumbnailError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESThumbnailError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBFILESThumbnailErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { conversionError: void; });

	constructor(o: { path: DBFILESLookupError; });

	constructor(o: { unsupportedExtension: void; });

	constructor(o: { unsupportedImage: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithConversionError(): this;

	initWithPath(path: DBFILESLookupError): this;

	initWithUnsupportedExtension(): this;

	initWithUnsupportedImage(): this;

	isConversionError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPath(): boolean;

	isUnsupportedExtension(): boolean;

	isUnsupportedImage(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESThumbnailErrorSerializer extends NSObject {

	static alloc(): DBFILESThumbnailErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESThumbnailError;

	static new(): DBFILESThumbnailErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESThumbnailError): NSDictionary<string, any>;
}

declare const enum DBFILESThumbnailErrorTag {

	Path = 0,

	UnsupportedExtension = 1,

	UnsupportedImage = 2,

	ConversionError = 3
}

declare class DBFILESThumbnailFormat extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESThumbnailFormat; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESThumbnailFormat; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESThumbnailFormatTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { jpeg: void; });

	constructor(o: { png: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithJpeg(): this;

	initWithPng(): this;

	isEqual(object: any): boolean;

	isJpeg(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPng(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESThumbnailFormatSerializer extends NSObject {

	static alloc(): DBFILESThumbnailFormatSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESThumbnailFormat;

	static new(): DBFILESThumbnailFormatSerializer; // inherited from NSObject

	static serialize(instance: DBFILESThumbnailFormat): NSDictionary<string, any>;
}

declare const enum DBFILESThumbnailFormatTag {

	Jpeg = 0,

	Png = 1
}

declare class DBFILESThumbnailMode extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESThumbnailMode; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESThumbnailMode; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESThumbnailModeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { bestfit: void; });

	constructor(o: { fitoneBestfit: void; });

	constructor(o: { strict: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithBestfit(): this;

	initWithFitoneBestfit(): this;

	initWithStrict(): this;

	isBestfit(): boolean;

	isEqual(object: any): boolean;

	isFitoneBestfit(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isStrict(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESThumbnailModeSerializer extends NSObject {

	static alloc(): DBFILESThumbnailModeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESThumbnailMode;

	static new(): DBFILESThumbnailModeSerializer; // inherited from NSObject

	static serialize(instance: DBFILESThumbnailMode): NSDictionary<string, any>;
}

declare const enum DBFILESThumbnailModeTag {

	Strict = 0,

	Bestfit = 1,

	FitoneBestfit = 2
}

declare class DBFILESThumbnailSize extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESThumbnailSize; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESThumbnailSize; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESThumbnailSizeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { w1024h768: void; });

	constructor(o: { w128h128: void; });

	constructor(o: { w2048h1536: void; });

	constructor(o: { w256h256: void; });

	constructor(o: { w32h32: void; });

	constructor(o: { w480h320: void; });

	constructor(o: { w640h480: void; });

	constructor(o: { w64h64: void; });

	constructor(o: { w960h640: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithW1024h768(): this;

	initWithW128h128(): this;

	initWithW2048h1536(): this;

	initWithW256h256(): this;

	initWithW32h32(): this;

	initWithW480h320(): this;

	initWithW640h480(): this;

	initWithW64h64(): this;

	initWithW960h640(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isW1024h768(): boolean;

	isW128h128(): boolean;

	isW2048h1536(): boolean;

	isW256h256(): boolean;

	isW32h32(): boolean;

	isW480h320(): boolean;

	isW640h480(): boolean;

	isW64h64(): boolean;

	isW960h640(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESThumbnailSizeSerializer extends NSObject {

	static alloc(): DBFILESThumbnailSizeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESThumbnailSize;

	static new(): DBFILESThumbnailSizeSerializer; // inherited from NSObject

	static serialize(instance: DBFILESThumbnailSize): NSDictionary<string, any>;
}

declare const enum DBFILESThumbnailSizeTag {

	W32h32 = 0,

	W64h64 = 1,

	W128h128 = 2,

	W256h256 = 3,

	W480h320 = 4,

	W640h480 = 5,

	W960h640 = 6,

	W1024h768 = 7,

	W2048h1536 = 8
}

declare class DBFILESUploadError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESUploadWriteFailed;

	readonly propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError;

	readonly tag: DBFILESUploadErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESUploadWriteFailed; });

	constructor(o: { propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESUploadWriteFailed): this;

	initWithPropertiesError(propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isPropertiesError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESUploadErrorSerializer extends NSObject {

	static alloc(): DBFILESUploadErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadError;

	static new(): DBFILESUploadErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadError): NSDictionary<string, any>;
}

declare const enum DBFILESUploadErrorTag {

	Path = 0,

	PropertiesError = 1,

	Other = 2
}

declare class DBFILESUploadErrorWithProperties extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadErrorWithProperties; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadErrorWithProperties; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESUploadWriteFailed;

	readonly propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError;

	readonly tag: DBFILESUploadErrorWithPropertiesTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESUploadWriteFailed; });

	constructor(o: { propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESUploadWriteFailed): this;

	initWithPropertiesError(propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isPropertiesError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESUploadErrorWithPropertiesSerializer extends NSObject {

	static alloc(): DBFILESUploadErrorWithPropertiesSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadErrorWithProperties;

	static new(): DBFILESUploadErrorWithPropertiesSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadErrorWithProperties): NSDictionary<string, any>;
}

declare const enum DBFILESUploadErrorWithPropertiesTag {

	Path = 0,

	PropertiesError = 1,

	Other = 2
}

declare class DBFILESUploadSessionAppendArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionAppendArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionAppendArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly close: number;

	readonly cursor: DBFILESUploadSessionCursor;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: DBFILESUploadSessionCursor; });

	constructor(o: { cursor: DBFILESUploadSessionCursor; close: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: DBFILESUploadSessionCursor): this;

	initWithCursorClose(cursor: DBFILESUploadSessionCursor, close: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadSessionAppendArgSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionAppendArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionAppendArg;

	static new(): DBFILESUploadSessionAppendArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionAppendArg): NSDictionary<string, any>;
}

declare class DBFILESUploadSessionCursor extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionCursor; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionCursor; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly offset: number;

	readonly sessionId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sessionId: string; offset: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSessionIdOffset(sessionId: string, offset: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadSessionCursorSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionCursorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionCursor;

	static new(): DBFILESUploadSessionCursorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionCursor): NSDictionary<string, any>;
}

declare class DBFILESUploadSessionFinishArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionFinishArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionFinishArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commit: DBFILESCommitInfo;

	readonly cursor: DBFILESUploadSessionCursor;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: DBFILESUploadSessionCursor; commit: DBFILESCommitInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursorCommit(cursor: DBFILESUploadSessionCursor, commit: DBFILESCommitInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadSessionFinishArgSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionFinishArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionFinishArg;

	static new(): DBFILESUploadSessionFinishArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionFinishArg): NSDictionary<string, any>;
}

declare class DBFILESUploadSessionFinishBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionFinishBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionFinishBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESUploadSessionFinishArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESUploadSessionFinishArg> | DBFILESUploadSessionFinishArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESUploadSessionFinishArg> | DBFILESUploadSessionFinishArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadSessionFinishBatchArgSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionFinishBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionFinishBatchArg;

	static new(): DBFILESUploadSessionFinishBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionFinishBatchArg): NSDictionary<string, any>;
}

declare class DBFILESUploadSessionFinishBatchJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionFinishBatchJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionFinishBatchJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBFILESUploadSessionFinishBatchResult;

	readonly tag: DBFILESUploadSessionFinishBatchJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBFILESUploadSessionFinishBatchResult; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBFILESUploadSessionFinishBatchResult): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESUploadSessionFinishBatchJobStatusSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionFinishBatchJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionFinishBatchJobStatus;

	static new(): DBFILESUploadSessionFinishBatchJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionFinishBatchJobStatus): NSDictionary<string, any>;
}

declare const enum DBFILESUploadSessionFinishBatchJobStatusTag {

	InProgress = 0,

	Complete = 1
}

declare class DBFILESUploadSessionFinishBatchLaunch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionFinishBatchLaunch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionFinishBatchLaunch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: DBFILESUploadSessionFinishBatchResult;

	readonly tag: DBFILESUploadSessionFinishBatchLaunchTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: DBFILESUploadSessionFinishBatchResult; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: DBFILESUploadSessionFinishBatchResult): this;

	initWithOther(): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESUploadSessionFinishBatchLaunchSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionFinishBatchLaunchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionFinishBatchLaunch;

	static new(): DBFILESUploadSessionFinishBatchLaunchSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionFinishBatchLaunch): NSDictionary<string, any>;
}

declare const enum DBFILESUploadSessionFinishBatchLaunchTag {

	AsyncJobId = 0,

	Complete = 1,

	Other = 2
}

declare class DBFILESUploadSessionFinishBatchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionFinishBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionFinishBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly entries: NSArray<DBFILESUploadSessionFinishBatchResultEntry>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBFILESUploadSessionFinishBatchResultEntry> | DBFILESUploadSessionFinishBatchResultEntry[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBFILESUploadSessionFinishBatchResultEntry> | DBFILESUploadSessionFinishBatchResultEntry[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadSessionFinishBatchResultEntry extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionFinishBatchResultEntry; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionFinishBatchResultEntry; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly failure: DBFILESUploadSessionFinishError;

	readonly success: DBFILESFileMetadata;

	readonly tag: DBFILESUploadSessionFinishBatchResultEntryTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { failure: DBFILESUploadSessionFinishError; });

	constructor(o: { success: DBFILESFileMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFailure(failure: DBFILESUploadSessionFinishError): this;

	initWithSuccess(success: DBFILESFileMetadata): this;

	isEqual(object: any): boolean;

	isFailure(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESUploadSessionFinishBatchResultEntrySerializer extends NSObject {

	static alloc(): DBFILESUploadSessionFinishBatchResultEntrySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionFinishBatchResultEntry;

	static new(): DBFILESUploadSessionFinishBatchResultEntrySerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionFinishBatchResultEntry): NSDictionary<string, any>;
}

declare const enum DBFILESUploadSessionFinishBatchResultEntryTag {

	Success = 0,

	Failure = 1
}

declare class DBFILESUploadSessionFinishBatchResultSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionFinishBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionFinishBatchResult;

	static new(): DBFILESUploadSessionFinishBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionFinishBatchResult): NSDictionary<string, any>;
}

declare class DBFILESUploadSessionFinishError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionFinishError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionFinishError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly lookupFailed: DBFILESUploadSessionLookupError;

	readonly path: DBFILESWriteError;

	readonly propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError;

	readonly tag: DBFILESUploadSessionFinishErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { lookupFailed: DBFILESUploadSessionLookupError; });

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESWriteError; });

	constructor(o: { propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError; });

	constructor(o: { tooManySharedFolderTargets: void; });

	constructor(o: { tooManyWriteOperations: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLookupFailed(lookupFailed: DBFILESUploadSessionLookupError): this;

	initWithOther(): this;

	initWithPath(path: DBFILESWriteError): this;

	initWithPropertiesError(propertiesError: DBFILEPROPERTIESInvalidPropertyGroupError): this;

	initWithTooManySharedFolderTargets(): this;

	initWithTooManyWriteOperations(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLookupFailed(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isPropertiesError(): boolean;

	isTooManySharedFolderTargets(): boolean;

	isTooManyWriteOperations(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESUploadSessionFinishErrorSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionFinishErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionFinishError;

	static new(): DBFILESUploadSessionFinishErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionFinishError): NSDictionary<string, any>;
}

declare const enum DBFILESUploadSessionFinishErrorTag {

	LookupFailed = 0,

	Path = 1,

	PropertiesError = 2,

	TooManySharedFolderTargets = 3,

	TooManyWriteOperations = 4,

	Other = 5
}

declare class DBFILESUploadSessionLookupError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionLookupError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionLookupError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly incorrectOffset: DBFILESUploadSessionOffsetError;

	readonly tag: DBFILESUploadSessionLookupErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { closed: void; });

	constructor(o: { incorrectOffset: DBFILESUploadSessionOffsetError; });

	constructor(o: { notClosed: void; });

	constructor(o: { notFound: void; });

	constructor(o: { other: void; });

	constructor(o: { tooLarge: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithClosed(): this;

	initWithIncorrectOffset(incorrectOffset: DBFILESUploadSessionOffsetError): this;

	initWithNotClosed(): this;

	initWithNotFound(): this;

	initWithOther(): this;

	initWithTooLarge(): this;

	isClosed(): boolean;

	isEqual(object: any): boolean;

	isIncorrectOffset(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotClosed(): boolean;

	isNotFound(): boolean;

	isOther(): boolean;

	isTooLarge(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESUploadSessionLookupErrorSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionLookupErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionLookupError;

	static new(): DBFILESUploadSessionLookupErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionLookupError): NSDictionary<string, any>;
}

declare const enum DBFILESUploadSessionLookupErrorTag {

	NotFound = 0,

	IncorrectOffset = 1,

	Closed = 2,

	NotClosed = 3,

	TooLarge = 4,

	Other = 5
}

declare class DBFILESUploadSessionOffsetError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionOffsetError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionOffsetError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly correctOffset: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { correctOffset: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCorrectOffset(correctOffset: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadSessionOffsetErrorSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionOffsetErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionOffsetError;

	static new(): DBFILESUploadSessionOffsetErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionOffsetError): NSDictionary<string, any>;
}

declare class DBFILESUploadSessionStartArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionStartArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionStartArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly close: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { close: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithClose(close: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadSessionStartArgSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionStartArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionStartArg;

	static new(): DBFILESUploadSessionStartArgSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionStartArg): NSDictionary<string, any>;
}

declare class DBFILESUploadSessionStartResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadSessionStartResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadSessionStartResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sessionId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sessionId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSessionId(sessionId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadSessionStartResultSerializer extends NSObject {

	static alloc(): DBFILESUploadSessionStartResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadSessionStartResult;

	static new(): DBFILESUploadSessionStartResultSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadSessionStartResult): NSDictionary<string, any>;
}

declare class DBFILESUploadWriteFailed extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESUploadWriteFailed; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESUploadWriteFailed; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly reason: DBFILESWriteError;

	readonly uploadSessionId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { reason: DBFILESWriteError; uploadSessionId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithReasonUploadSessionId(reason: DBFILESWriteError, uploadSessionId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESUploadWriteFailedSerializer extends NSObject {

	static alloc(): DBFILESUploadWriteFailedSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESUploadWriteFailed;

	static new(): DBFILESUploadWriteFailedSerializer; // inherited from NSObject

	static serialize(instance: DBFILESUploadWriteFailed): NSDictionary<string, any>;
}

declare class DBFILESUserAuthRoutes extends NSObject {

	static alloc(): DBFILESUserAuthRoutes; // inherited from NSObject

	static new(): DBFILESUserAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	alphaGetMetadata(path: string): DBRpcTask<DBFILESMetadata, DBFILESAlphaGetMetadataError>;

	alphaGetMetadataIncludeMediaInfoIncludeDeletedIncludeHasExplicitSharedMembersIncludePropertyGroupsIncludePropertyTemplates(path: string, includeMediaInfo: number, includeDeleted: number, includeHasExplicitSharedMembers: number, includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase, includePropertyTemplates: NSArray<string> | string[]): DBRpcTask<DBFILESMetadata, DBFILESAlphaGetMetadataError>;

	alphaUploadDataInputData(path: string, inputData: NSData): DBUploadTask<DBFILESFileMetadata, DBFILESUploadErrorWithProperties>;

	alphaUploadDataModeAutorenameClientModifiedMutePropertyGroupsStrictConflictInputData(path: string, mode: DBFILESWriteMode, autorename: number, clientModified: Date, mute: number, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[], strictConflict: number, inputData: NSData): DBUploadTask<DBFILESFileMetadata, DBFILESUploadErrorWithProperties>;

	alphaUploadStreamInputStream(path: string, inputStream: NSInputStream): DBUploadTask<DBFILESFileMetadata, DBFILESUploadErrorWithProperties>;

	alphaUploadStreamModeAutorenameClientModifiedMutePropertyGroupsStrictConflictInputStream(path: string, mode: DBFILESWriteMode, autorename: number, clientModified: Date, mute: number, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[], strictConflict: number, inputStream: NSInputStream): DBUploadTask<DBFILESFileMetadata, DBFILESUploadErrorWithProperties>;

	alphaUploadUrlInputUrl(path: string, inputUrl: string): DBUploadTask<DBFILESFileMetadata, DBFILESUploadErrorWithProperties>;

	alphaUploadUrlModeAutorenameClientModifiedMutePropertyGroupsStrictConflictInputUrl(path: string, mode: DBFILESWriteMode, autorename: number, clientModified: Date, mute: number, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[], strictConflict: number, inputUrl: string): DBUploadTask<DBFILESFileMetadata, DBFILESUploadErrorWithProperties>;

	batchUploadFilesQueueProgressBlockResponseBlock(fileUrlsToCommitInfo: NSDictionary<NSURL, DBFILESCommitInfo>, queue: NSOperationQueue, progressBlock: (p1: number, p2: number, p3: number) => void, responseBlock: (p1: NSDictionary<NSURL, DBFILESUploadSessionFinishBatchResultEntry>, p2: DBASYNCPollError, p3: DBRequestError, p4: NSDictionary<NSURL, DBRequestError>) => void): DBBatchUploadTask;

	createFolder(path: string): DBRpcTask<DBFILESFolderMetadata, DBFILESCreateFolderError>;

	createFolderAutorename(path: string, autorename: number): DBRpcTask<DBFILESFolderMetadata, DBFILESCreateFolderError>;

	createFolderBatch(paths: NSArray<string> | string[]): DBRpcTask<DBFILESCreateFolderBatchLaunch, DBNilObject>;

	createFolderBatchAutorenameForceAsync(paths: NSArray<string> | string[], autorename: number, forceAsync: number): DBRpcTask<DBFILESCreateFolderBatchLaunch, DBNilObject>;

	createFolderBatchCheck(asyncJobId: string): DBRpcTask<DBFILESCreateFolderBatchJobStatus, DBASYNCPollError>;

	createFolderV2(path: string): DBRpcTask<DBFILESCreateFolderResult, DBFILESCreateFolderError>;

	createFolderV2Autorename(path: string, autorename: number): DBRpcTask<DBFILESCreateFolderResult, DBFILESCreateFolderError>;

	dCopyBatch(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]): DBRpcTask<DBFILESRelocationBatchLaunch, DBNilObject>;

	dCopyBatchAutorenameAllowSharedFolderAllowOwnershipTransfer(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[], autorename: number, allowSharedFolder: number, allowOwnershipTransfer: number): DBRpcTask<DBFILESRelocationBatchLaunch, DBNilObject>;

	dCopyBatchCheck(asyncJobId: string): DBRpcTask<DBFILESRelocationBatchJobStatus, DBASYNCPollError>;

	dCopyBatchCheckV2(asyncJobId: string): DBRpcTask<DBFILESRelocationBatchV2JobStatus, DBASYNCPollError>;

	dCopyBatchV2(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]): DBRpcTask<DBFILESRelocationBatchV2Launch, DBNilObject>;

	dCopyBatchV2Autorename(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[], autorename: number): DBRpcTask<DBFILESRelocationBatchV2Launch, DBNilObject>;

	dCopyReferenceGet(path: string): DBRpcTask<DBFILESGetCopyReferenceResult, DBFILESGetCopyReferenceError>;

	dCopyReferenceSavePath(dCopyReference: string, path: string): DBRpcTask<DBFILESSaveCopyReferenceResult, DBFILESSaveCopyReferenceError>;

	dCopyToPath(fromPath: string, toPath: string): DBRpcTask<DBFILESMetadata, DBFILESRelocationError>;

	dCopyToPathAllowSharedFolderAutorenameAllowOwnershipTransfer(fromPath: string, toPath: string, allowSharedFolder: number, autorename: number, allowOwnershipTransfer: number): DBRpcTask<DBFILESMetadata, DBFILESRelocationError>;

	dCopyV2ToPath(fromPath: string, toPath: string): DBRpcTask<DBFILESRelocationResult, DBFILESRelocationError>;

	dCopyV2ToPathAllowSharedFolderAutorenameAllowOwnershipTransfer(fromPath: string, toPath: string, allowSharedFolder: number, autorename: number, allowOwnershipTransfer: number): DBRpcTask<DBFILESRelocationResult, DBFILESRelocationError>;

	deleteBatch(entries: NSArray<DBFILESDeleteArg> | DBFILESDeleteArg[]): DBRpcTask<DBFILESDeleteBatchLaunch, DBNilObject>;

	deleteBatchCheck(asyncJobId: string): DBRpcTask<DBFILESDeleteBatchJobStatus, DBASYNCPollError>;

	delete_(path: string): DBRpcTask<DBFILESMetadata, DBFILESDeleteError>;

	delete_ParentRev(path: string, parentRev: string): DBRpcTask<DBFILESMetadata, DBFILESDeleteError>;

	delete_V2(path: string): DBRpcTask<DBFILESDeleteResult, DBFILESDeleteError>;

	delete_V2ParentRev(path: string, parentRev: string): DBRpcTask<DBFILESDeleteResult, DBFILESDeleteError>;

	downloadData(path: string): DBDownloadDataTask<DBFILESFileMetadata, DBFILESDownloadError>;

	downloadDataByteOffsetStartByteOffsetEnd(path: string, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBFILESFileMetadata, DBFILESDownloadError>;

	downloadDataRev(path: string, rev: string): DBDownloadDataTask<DBFILESFileMetadata, DBFILESDownloadError>;

	downloadDataRevByteOffsetStartByteOffsetEnd(path: string, rev: string, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBFILESFileMetadata, DBFILESDownloadError>;

	downloadUrlOverwriteDestination(path: string, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESDownloadError>;

	downloadUrlOverwriteDestinationByteOffsetStartByteOffsetEnd(path: string, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESDownloadError>;

	downloadUrlRevOverwriteDestination(path: string, rev: string, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESDownloadError>;

	downloadUrlRevOverwriteDestinationByteOffsetStartByteOffsetEnd(path: string, rev: string, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESDownloadError>;

	downloadZipData(path: string): DBDownloadDataTask<DBFILESDownloadZipResult, DBFILESDownloadZipError>;

	downloadZipDataByteOffsetStartByteOffsetEnd(path: string, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBFILESDownloadZipResult, DBFILESDownloadZipError>;

	downloadZipUrlOverwriteDestination(path: string, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBFILESDownloadZipResult, DBFILESDownloadZipError>;

	downloadZipUrlOverwriteDestinationByteOffsetStartByteOffsetEnd(path: string, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBFILESDownloadZipResult, DBFILESDownloadZipError>;

	getMetadata(path: string): DBRpcTask<DBFILESMetadata, DBFILESGetMetadataError>;

	getMetadataIncludeMediaInfoIncludeDeletedIncludeHasExplicitSharedMembersIncludePropertyGroups(path: string, includeMediaInfo: number, includeDeleted: number, includeHasExplicitSharedMembers: number, includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase): DBRpcTask<DBFILESMetadata, DBFILESGetMetadataError>;

	getPreviewData(path: string): DBDownloadDataTask<DBFILESFileMetadata, DBFILESPreviewError>;

	getPreviewDataByteOffsetStartByteOffsetEnd(path: string, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBFILESFileMetadata, DBFILESPreviewError>;

	getPreviewDataRev(path: string, rev: string): DBDownloadDataTask<DBFILESFileMetadata, DBFILESPreviewError>;

	getPreviewDataRevByteOffsetStartByteOffsetEnd(path: string, rev: string, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBFILESFileMetadata, DBFILESPreviewError>;

	getPreviewUrlOverwriteDestination(path: string, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESPreviewError>;

	getPreviewUrlOverwriteDestinationByteOffsetStartByteOffsetEnd(path: string, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESPreviewError>;

	getPreviewUrlRevOverwriteDestination(path: string, rev: string, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESPreviewError>;

	getPreviewUrlRevOverwriteDestinationByteOffsetStartByteOffsetEnd(path: string, rev: string, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESPreviewError>;

	getTemporaryLink(path: string): DBRpcTask<DBFILESGetTemporaryLinkResult, DBFILESGetTemporaryLinkError>;

	getTemporaryUploadLink(commitInfo: DBFILESCommitInfo): DBRpcTask<DBFILESGetTemporaryUploadLinkResult, DBNilObject>;

	getTemporaryUploadLinkDuration(commitInfo: DBFILESCommitInfo, duration: number): DBRpcTask<DBFILESGetTemporaryUploadLinkResult, DBNilObject>;

	getThumbnailBatch(entries: NSArray<DBFILESThumbnailArg> | DBFILESThumbnailArg[]): DBRpcTask<DBFILESGetThumbnailBatchResult, DBFILESGetThumbnailBatchError>;

	getThumbnailData(path: string): DBDownloadDataTask<DBFILESFileMetadata, DBFILESThumbnailError>;

	getThumbnailDataByteOffsetStartByteOffsetEnd(path: string, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBFILESFileMetadata, DBFILESThumbnailError>;

	getThumbnailDataFormatSizeMode(path: string, format: DBFILESThumbnailFormat, size: DBFILESThumbnailSize, mode: DBFILESThumbnailMode): DBDownloadDataTask<DBFILESFileMetadata, DBFILESThumbnailError>;

	getThumbnailDataFormatSizeModeByteOffsetStartByteOffsetEnd(path: string, format: DBFILESThumbnailFormat, size: DBFILESThumbnailSize, mode: DBFILESThumbnailMode, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBFILESFileMetadata, DBFILESThumbnailError>;

	getThumbnailUrlFormatSizeModeOverwriteDestination(path: string, format: DBFILESThumbnailFormat, size: DBFILESThumbnailSize, mode: DBFILESThumbnailMode, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESThumbnailError>;

	getThumbnailUrlFormatSizeModeOverwriteDestinationByteOffsetStartByteOffsetEnd(path: string, format: DBFILESThumbnailFormat, size: DBFILESThumbnailSize, mode: DBFILESThumbnailMode, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESThumbnailError>;

	getThumbnailUrlOverwriteDestination(path: string, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESThumbnailError>;

	getThumbnailUrlOverwriteDestinationByteOffsetStartByteOffsetEnd(path: string, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBFILESFileMetadata, DBFILESThumbnailError>;

	init(client: DBTransportClient): this;

	listFolder(path: string): DBRpcTask<DBFILESListFolderResult, DBFILESListFolderError>;

	listFolderContinue(cursor: string): DBRpcTask<DBFILESListFolderResult, DBFILESListFolderContinueError>;

	listFolderGetLatestCursor(path: string): DBRpcTask<DBFILESListFolderGetLatestCursorResult, DBFILESListFolderError>;

	listFolderGetLatestCursorRecursiveIncludeMediaInfoIncludeDeletedIncludeHasExplicitSharedMembersIncludeMountedFoldersLimitSharedLinkIncludePropertyGroups(path: string, recursive: number, includeMediaInfo: number, includeDeleted: number, includeHasExplicitSharedMembers: number, includeMountedFolders: number, limit: number, sharedLink: DBFILESSharedLink, includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase): DBRpcTask<DBFILESListFolderGetLatestCursorResult, DBFILESListFolderError>;

	listFolderLongpoll(cursor: string): DBRpcTask<DBFILESListFolderLongpollResult, DBFILESListFolderLongpollError>;

	listFolderLongpollTimeout(cursor: string, timeout: number): DBRpcTask<DBFILESListFolderLongpollResult, DBFILESListFolderLongpollError>;

	listFolderRecursiveIncludeMediaInfoIncludeDeletedIncludeHasExplicitSharedMembersIncludeMountedFoldersLimitSharedLinkIncludePropertyGroups(path: string, recursive: number, includeMediaInfo: number, includeDeleted: number, includeHasExplicitSharedMembers: number, includeMountedFolders: number, limit: number, sharedLink: DBFILESSharedLink, includePropertyGroups: DBFILEPROPERTIESTemplateFilterBase): DBRpcTask<DBFILESListFolderResult, DBFILESListFolderError>;

	listRevisions(path: string): DBRpcTask<DBFILESListRevisionsResult, DBFILESListRevisionsError>;

	listRevisionsModeLimit(path: string, mode: DBFILESListRevisionsMode, limit: number): DBRpcTask<DBFILESListRevisionsResult, DBFILESListRevisionsError>;

	moveBatch(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]): DBRpcTask<DBFILESRelocationBatchLaunch, DBNilObject>;

	moveBatchAutorenameAllowSharedFolderAllowOwnershipTransfer(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[], autorename: number, allowSharedFolder: number, allowOwnershipTransfer: number): DBRpcTask<DBFILESRelocationBatchLaunch, DBNilObject>;

	moveBatchCheck(asyncJobId: string): DBRpcTask<DBFILESRelocationBatchJobStatus, DBASYNCPollError>;

	moveBatchCheckV2(asyncJobId: string): DBRpcTask<DBFILESRelocationBatchV2JobStatus, DBASYNCPollError>;

	moveBatchV2(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[]): DBRpcTask<DBFILESRelocationBatchV2Launch, DBNilObject>;

	moveBatchV2AutorenameAllowOwnershipTransfer(entries: NSArray<DBFILESRelocationPath> | DBFILESRelocationPath[], autorename: number, allowOwnershipTransfer: number): DBRpcTask<DBFILESRelocationBatchV2Launch, DBNilObject>;

	moveToPath(fromPath: string, toPath: string): DBRpcTask<DBFILESMetadata, DBFILESRelocationError>;

	moveToPathAllowSharedFolderAutorenameAllowOwnershipTransfer(fromPath: string, toPath: string, allowSharedFolder: number, autorename: number, allowOwnershipTransfer: number): DBRpcTask<DBFILESMetadata, DBFILESRelocationError>;

	moveV2ToPath(fromPath: string, toPath: string): DBRpcTask<DBFILESRelocationResult, DBFILESRelocationError>;

	moveV2ToPathAllowSharedFolderAutorenameAllowOwnershipTransfer(fromPath: string, toPath: string, allowSharedFolder: number, autorename: number, allowOwnershipTransfer: number): DBRpcTask<DBFILESRelocationResult, DBFILESRelocationError>;

	permanentlyDelete(path: string): DBRpcTask<DBNilObject, DBFILESDeleteError>;

	permanentlyDeleteParentRev(path: string, parentRev: string): DBRpcTask<DBNilObject, DBFILESDeleteError>;

	propertiesAddPropertyGroups(path: string, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]): DBRpcTask<DBNilObject, DBFILEPROPERTIESAddPropertiesError>;

	propertiesOverwritePropertyGroups(path: string, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[]): DBRpcTask<DBNilObject, DBFILEPROPERTIESInvalidPropertyGroupError>;

	propertiesRemovePropertyTemplateIds(path: string, propertyTemplateIds: NSArray<string> | string[]): DBRpcTask<DBNilObject, DBFILEPROPERTIESRemovePropertiesError>;

	propertiesTemplateGet(templateId: string): DBRpcTask<DBFILEPROPERTIESGetTemplateResult, DBFILEPROPERTIESTemplateError>;

	propertiesTemplateList(): DBRpcTask<DBFILEPROPERTIESListTemplateResult, DBFILEPROPERTIESTemplateError>;

	propertiesUpdateUpdatePropertyGroups(path: string, updatePropertyGroups: NSArray<DBFILEPROPERTIESPropertyGroupUpdate> | DBFILEPROPERTIESPropertyGroupUpdate[]): DBRpcTask<DBNilObject, DBFILEPROPERTIESUpdatePropertiesError>;

	restoreRev(path: string, rev: string): DBRpcTask<DBFILESFileMetadata, DBFILESRestoreError>;

	saveUrlCheckJobStatus(asyncJobId: string): DBRpcTask<DBFILESSaveUrlJobStatus, DBASYNCPollError>;

	saveUrlUrl(path: string, url: string): DBRpcTask<DBFILESSaveUrlResult, DBFILESSaveUrlError>;

	searchQuery(path: string, query: string): DBRpcTask<DBFILESSearchResult, DBFILESSearchError>;

	searchQueryStartMaxResultsMode(path: string, query: string, start: number, maxResults: number, mode: DBFILESSearchMode): DBRpcTask<DBFILESSearchResult, DBFILESSearchError>;

	uploadDataInputData(path: string, inputData: NSData): DBUploadTask<DBFILESFileMetadata, DBFILESUploadError>;

	uploadDataModeAutorenameClientModifiedMutePropertyGroupsStrictConflictInputData(path: string, mode: DBFILESWriteMode, autorename: number, clientModified: Date, mute: number, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[], strictConflict: number, inputData: NSData): DBUploadTask<DBFILESFileMetadata, DBFILESUploadError>;

	uploadSessionAppendDataOffsetInputData(sessionId: string, offset: number, inputData: NSData): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionAppendStreamOffsetInputStream(sessionId: string, offset: number, inputStream: NSInputStream): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionAppendUrlOffsetInputUrl(sessionId: string, offset: number, inputUrl: string): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionAppendV2DataCloseInputData(cursor: DBFILESUploadSessionCursor, close: number, inputData: NSData): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionAppendV2DataInputData(cursor: DBFILESUploadSessionCursor, inputData: NSData): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionAppendV2StreamCloseInputStream(cursor: DBFILESUploadSessionCursor, close: number, inputStream: NSInputStream): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionAppendV2StreamInputStream(cursor: DBFILESUploadSessionCursor, inputStream: NSInputStream): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionAppendV2UrlCloseInputUrl(cursor: DBFILESUploadSessionCursor, close: number, inputUrl: string): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionAppendV2UrlInputUrl(cursor: DBFILESUploadSessionCursor, inputUrl: string): DBUploadTask<DBNilObject, DBFILESUploadSessionLookupError>;

	uploadSessionFinishBatch(entries: NSArray<DBFILESUploadSessionFinishArg> | DBFILESUploadSessionFinishArg[]): DBRpcTask<DBFILESUploadSessionFinishBatchLaunch, DBNilObject>;

	uploadSessionFinishBatchCheck(asyncJobId: string): DBRpcTask<DBFILESUploadSessionFinishBatchJobStatus, DBASYNCPollError>;

	uploadSessionFinishDataCommitInputData(cursor: DBFILESUploadSessionCursor, commit: DBFILESCommitInfo, inputData: NSData): DBUploadTask<DBFILESFileMetadata, DBFILESUploadSessionFinishError>;

	uploadSessionFinishStreamCommitInputStream(cursor: DBFILESUploadSessionCursor, commit: DBFILESCommitInfo, inputStream: NSInputStream): DBUploadTask<DBFILESFileMetadata, DBFILESUploadSessionFinishError>;

	uploadSessionFinishUrlCommitInputUrl(cursor: DBFILESUploadSessionCursor, commit: DBFILESCommitInfo, inputUrl: string): DBUploadTask<DBFILESFileMetadata, DBFILESUploadSessionFinishError>;

	uploadSessionStartData(inputData: NSData): DBUploadTask<DBFILESUploadSessionStartResult, DBNilObject>;

	uploadSessionStartDataInputData(close: number, inputData: NSData): DBUploadTask<DBFILESUploadSessionStartResult, DBNilObject>;

	uploadSessionStartStream(inputStream: NSInputStream): DBUploadTask<DBFILESUploadSessionStartResult, DBNilObject>;

	uploadSessionStartStreamInputStream(close: number, inputStream: NSInputStream): DBUploadTask<DBFILESUploadSessionStartResult, DBNilObject>;

	uploadSessionStartUrl(inputUrl: string): DBUploadTask<DBFILESUploadSessionStartResult, DBNilObject>;

	uploadSessionStartUrlInputUrl(close: number, inputUrl: string): DBUploadTask<DBFILESUploadSessionStartResult, DBNilObject>;

	uploadStreamInputStream(path: string, inputStream: NSInputStream): DBUploadTask<DBFILESFileMetadata, DBFILESUploadError>;

	uploadStreamModeAutorenameClientModifiedMutePropertyGroupsStrictConflictInputStream(path: string, mode: DBFILESWriteMode, autorename: number, clientModified: Date, mute: number, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[], strictConflict: number, inputStream: NSInputStream): DBUploadTask<DBFILESFileMetadata, DBFILESUploadError>;

	uploadUrlInputUrl(path: string, inputUrl: string): DBUploadTask<DBFILESFileMetadata, DBFILESUploadError>;

	uploadUrlModeAutorenameClientModifiedMutePropertyGroupsStrictConflictInputUrl(path: string, mode: DBFILESWriteMode, autorename: number, clientModified: Date, mute: number, propertyGroups: NSArray<DBFILEPROPERTIESPropertyGroup> | DBFILEPROPERTIESPropertyGroup[], strictConflict: number, inputUrl: string): DBUploadTask<DBFILESFileMetadata, DBFILESUploadError>;
}

declare class DBFILESVideoMetadata extends DBFILESMediaMetadata implements DBSerializable, NSCopying {

	static alloc(): DBFILESVideoMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESVideoMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly duration: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { dimensions: DBFILESDimensions; location: DBFILESGpsCoordinates; timeTaken: Date; duration: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDimensionsLocationTimeTakenDuration(dimensions: DBFILESDimensions, location: DBFILESGpsCoordinates, timeTaken: Date, duration: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBFILESVideoMetadataSerializer extends NSObject {

	static alloc(): DBFILESVideoMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESVideoMetadata;

	static new(): DBFILESVideoMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBFILESVideoMetadata): NSDictionary<string, any>;
}

declare class DBFILESWriteConflictError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESWriteConflictError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESWriteConflictError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESWriteConflictErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: void; });

	constructor(o: { fileAncestor: void; });

	constructor(o: { folder: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFile(): this;

	initWithFileAncestor(): this;

	initWithFolder(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isFile(): boolean;

	isFileAncestor(): boolean;

	isFolder(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESWriteConflictErrorSerializer extends NSObject {

	static alloc(): DBFILESWriteConflictErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESWriteConflictError;

	static new(): DBFILESWriteConflictErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESWriteConflictError): NSDictionary<string, any>;
}

declare const enum DBFILESWriteConflictErrorTag {

	File = 0,

	Folder = 1,

	FileAncestor = 2,

	Other = 3
}

declare class DBFILESWriteError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESWriteError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESWriteError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly conflict: DBFILESWriteConflictError;

	readonly malformedPath: string;

	readonly tag: DBFILESWriteErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { conflict: DBFILESWriteConflictError; });

	constructor(o: { disallowedName: void; });

	constructor(o: { insufficientSpace: void; });

	constructor(o: { malformedPath: string; });

	constructor(o: { noWritePermission: void; });

	constructor(o: { other: void; });

	constructor(o: { teamFolder: void; });

	constructor(o: { tooManyWriteOperations: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithConflict(conflict: DBFILESWriteConflictError): this;

	initWithDisallowedName(): this;

	initWithInsufficientSpace(): this;

	initWithMalformedPath(malformedPath: string): this;

	initWithNoWritePermission(): this;

	initWithOther(): this;

	initWithTeamFolder(): this;

	initWithTooManyWriteOperations(): this;

	isConflict(): boolean;

	isDisallowedName(): boolean;

	isEqual(object: any): boolean;

	isInsufficientSpace(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMalformedPath(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoWritePermission(): boolean;

	isOther(): boolean;

	isTeamFolder(): boolean;

	isTooManyWriteOperations(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESWriteErrorSerializer extends NSObject {

	static alloc(): DBFILESWriteErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESWriteError;

	static new(): DBFILESWriteErrorSerializer; // inherited from NSObject

	static serialize(instance: DBFILESWriteError): NSDictionary<string, any>;
}

declare const enum DBFILESWriteErrorTag {

	MalformedPath = 0,

	Conflict = 1,

	NoWritePermission = 2,

	InsufficientSpace = 3,

	DisallowedName = 4,

	TeamFolder = 5,

	TooManyWriteOperations = 6,

	Other = 7
}

declare class DBFILESWriteMode extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBFILESWriteMode; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBFILESWriteMode; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBFILESWriteModeTag;

	readonly update: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { add: void; });

	constructor(o: { overwrite: void; });

	constructor(o: { update: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAdd(): this;

	initWithOverwrite(): this;

	initWithUpdate(update: string): this;

	isAdd(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOverwrite(): boolean;

	isUpdate(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBFILESWriteModeSerializer extends NSObject {

	static alloc(): DBFILESWriteModeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBFILESWriteMode;

	static new(): DBFILESWriteModeSerializer; // inherited from NSObject

	static serialize(instance: DBFILESWriteMode): NSDictionary<string, any>;
}

declare const enum DBFILESWriteModeTag {

	Add = 0,

	Overwrite = 1,

	Update = 2
}

declare class DBGlobalErrorResponseHandler extends NSObject {

	static alloc(): DBGlobalErrorResponseHandler; // inherited from NSObject

	static new(): DBGlobalErrorResponseHandler; // inherited from NSObject

	static registerNetworkErrorResponseBlock(networkErrorResponseBlock: (p1: DBRequestError, p2: DBTask) => void): void;

	static registerNetworkErrorResponseBlockQueue(networkErrorResponseBlock: (p1: DBRequestError, p2: DBTask) => void, queue: NSOperationQueue): void;

	static registerRouteErrorResponseBlockRouteErrorType(routeErrorResponseBlock: (p1: any, p2: DBRequestError, p3: DBTask) => void, routeErrorType: typeof NSObject): void;

	static registerRouteErrorResponseBlockRouteErrorTypeQueue(routeErrorResponseBlock: (p1: any, p2: DBRequestError, p3: DBTask) => void, routeErrorType: typeof NSObject, queue: NSOperationQueue): void;

	static removeNetworkErrorResponseBlock(): void;

	static removeRouteErrorResponseBlockWithRouteErrorType(routeErrorType: typeof NSObject): void;
}

declare class DBLocalizedUserMessage extends NSObject {

	static alloc(): DBLocalizedUserMessage; // inherited from NSObject

	static new(): DBLocalizedUserMessage; // inherited from NSObject

	readonly locale: string;

	readonly text: string;

	constructor(o: { text: string; locale: string; });

	description(): string;

	initWithTextLocale(text: string, locale: string): this;
}

declare class DBMapSerializer extends NSObject {

	static alloc(): DBMapSerializer; // inherited from NSObject

	static deserializeWithBlock(jsonData: NSDictionary<any, any>, deserializeBlock: (p1: any) => any): NSDictionary<any, any>;

	static new(): DBMapSerializer; // inherited from NSObject

	static serializeWithBlock(value: NSDictionary<any, any>, serializeBlock: (p1: any) => any): NSDictionary<any, any>;
}

declare class DBMobileSafariViewController extends SFSafariViewController implements SFSafariViewControllerDelegate {

	static alloc(): DBMobileSafariViewController; // inherited from NSObject

	static new(): DBMobileSafariViewController; // inherited from NSObject

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: NSURL; cancelHandler: () => void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	initWithUrlCancelHandler(url: NSURL, cancelHandler: () => void): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	safariViewControllerActivityItemsForURLTitle(controller: SFSafariViewController, URL: NSURL, title: string): NSArray<UIActivity>;

	safariViewControllerDidCompleteInitialLoad(controller: SFSafariViewController, didLoadSuccessfully: boolean): void;

	safariViewControllerDidFinish(controller: SFSafariViewController): void;

	safariViewControllerExcludedActivityTypesForURLTitle(controller: SFSafariViewController, URL: NSURL, title: string): NSArray<string>;

	safariViewControllerInitialLoadDidRedirectToURL(controller: SFSafariViewController, URL: NSURL): void;

	self(): this;
}

declare class DBMobileSharedApplication extends NSObject implements DBSharedApplication {

	static alloc(): DBMobileSharedApplication; // inherited from NSObject

	static mobileSharedApplication(): DBMobileSharedApplication;

	static new(): DBMobileSharedApplication; // inherited from NSObject

	static setMobileSharedApplication(mobileSharedApplication: DBMobileSharedApplication): void;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedApplication: UIApplication; controller: UIViewController; openURL: (p1: NSURL) => void; });

	canPresentExternalApp(url: NSURL): boolean;

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	dismissAuthController(): void;

	initWithSharedApplicationControllerOpenURL(sharedApplication: UIApplication, controller: UIViewController, openURL: (p1: NSURL) => void): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	presentAuthChannelCancelHandler(authURL: NSURL, cancelHandler: () => void): void;

	presentErrorMessageTitle(message: string, title: string): void;

	presentErrorMessageWithHandlersTitleButtonHandlers(message: string, title: string, buttonHandlers: NSDictionary<string, () => void>): void;

	presentExternalApp(url: NSURL): void;

	presentPlatformSpecificAuth(authURL: NSURL): boolean;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBNSDateSerializer extends NSObject {

	static alloc(): DBNSDateSerializer; // inherited from NSObject

	static deserializeDateFormat(value: string, dateFormat: string): Date;

	static new(): DBNSDateSerializer; // inherited from NSObject

	static serializeDateFormat(value: Date, dateFormat: string): string;
}

declare class DBNilObject extends NSObject {

	static alloc(): DBNilObject; // inherited from NSObject

	static new(): DBNilObject; // inherited from NSObject
}

declare const enum DBOAuthErrorType {

	AuthUnauthorizedClient = 0,

	AuthAccessDenied = 1,

	AuthUnsupportedResponseType = 2,

	AuthInvalidScope = 3,

	AuthServerError = 4,

	AuthTemporarilyUnavailable = 5,

	AuthInconsistentState = 6,

	AuthUnknown = 7
}

declare class DBOAuthManager extends NSObject {

	static alloc(): DBOAuthManager; // inherited from NSObject

	static new(): DBOAuthManager; // inherited from NSObject

	static setSharedOAuthManager(sharedOAuthManager: DBOAuthManager): void;

	static sharedOAuthManager(): DBOAuthManager;

	disableSignup: boolean;

	locale: NSLocale;

	webAuthShouldForceReauthentication: boolean;

	constructor(o: { appKey: string; });

	constructor(o: { appKey: string; host: string; });

	constructor(o: { appKey: string; host: string; redirectURL: string; });

	authorizeFromSharedApplication(sharedApplication: DBSharedApplication): void;

	clearStoredAccessToken(tokenUid: string): boolean;

	clearStoredAccessTokens(): boolean;

	handleRedirectURL(url: NSURL): DBOAuthResult;

	hasStoredAccessTokens(): boolean;

	initWithAppKey(appKey: string): this;

	initWithAppKeyHost(appKey: string, host: string): this;

	initWithAppKeyHostRedirectURL(appKey: string, host: string, redirectURL: string): this;

	retrieveAccessToken(tokenUid: string): DBAccessToken;

	retrieveAllAccessTokens(): NSDictionary<string, DBAccessToken>;

	retrieveFirstAccessToken(): DBAccessToken;

	storeAccessToken(accessToken: DBAccessToken): boolean;
}

declare class DBOAuthMobileManager extends DBOAuthManager {

	static alloc(): DBOAuthMobileManager; // inherited from NSObject

	static new(): DBOAuthMobileManager; // inherited from NSObject
}

declare class DBOAuthResult extends NSObject {

	static alloc(): DBOAuthResult; // inherited from NSObject

	static new(): DBOAuthResult; // inherited from NSObject

	readonly accessToken: DBAccessToken;

	readonly errorDescription: string;

	readonly errorType: DBOAuthErrorType;

	readonly tag: DBOAuthResultTag;

	constructor(o: { cancel: void; });

	constructor(o: { error: string; errorDescription: string; });

	constructor(o: { success: DBAccessToken; });

	description(): string;

	initWithCancel(): this;

	initWithErrorErrorDescription(errorType: string, errorDescription: string): this;

	initWithSuccess(accessToken: DBAccessToken): this;

	isCancel(): boolean;

	isError(): boolean;

	isSuccess(): boolean;

	tagName(): string;
}

declare const enum DBOAuthResultTag {

	AuthSuccess = 0,

	AuthError = 1,

	AuthCancel = 2
}

declare class DBOfficialAppConnector extends NSObject {

	static alloc(): DBOfficialAppConnector; // inherited from NSObject

	static new(): DBOfficialAppConnector; // inherited from NSObject

	static retriveOfficialDropboxAppOpenWithInfo(): DBOpenWithInfo;

	constructor(o: { appKey: string; canOpenURLWrapper: (p1: NSURL) => boolean; openURLWrapper: (p1: NSURL) => void; });

	initWithAppKeyCanOpenURLWrapperOpenURLWrapper(appKey: string, canOpenURLWrapper: (p1: NSURL) => boolean, openURLWrapper: (p1: NSURL) => void): this;

	isRequiredDropboxAppInstalled(): boolean;

	openWithInfoFromURL(url: NSURL): DBOpenWithInfo;

	returnToDropboxAppChangesPending(openWithInfo: DBOpenWithInfo, changesPending: boolean): void;

	returnToDropboxAppChangesPendingErrorNameExtras(openWithInfo: DBOpenWithInfo, changesPending: boolean, errorName: string, extras: NSDictionary<any, any>): void;
}

declare class DBOpenWithInfo extends NSObject implements NSCoding {

	static alloc(): DBOpenWithInfo; // inherited from NSObject

	static new(): DBOpenWithInfo; // inherited from NSObject

	static popFromStorageForSession(sessionId: string): DBOpenWithInfo;

	readonly fileData: NSData;

	readonly fileId: string;

	readonly modifiedTime: Date;

	readonly path: string;

	readonly readOnly: boolean;

	readonly rev: string;

	readonly sessionId: string;

	readonly sourceApp: string;

	readonly userId: string;

	readonly verb: string;

	constructor(o: { coder: NSCoder; }); // inherited from NSCoding

	constructor(o: { userId: string; rev: string; path: string; modifiedTime: Date; readOnly: boolean; verb: string; sessionId: string; fileId: string; fileData: NSData; sourceApp: string; });

	encodeWithCoder(aCoder: NSCoder): void;

	initWithCoder(aDecoder: NSCoder): this;

	initWithUserIdRevPathModifiedTimeReadOnlyVerbSessionIdFileIdFileDataSourceApp(userId: string, rev: string, path: string, modifiedTime: Date, readOnly: boolean, verb: string, sessionId: string, fileId: string, fileData: NSData, sourceApp: string): this;

	writeToStorageForSession(sessionId: string): void;
}

declare class DBPAPERAddMember extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERAddMember; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERAddMember; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly member: DBSHARINGMemberSelector;

	readonly permissionLevel: DBPAPERPaperDocPermissionLevel;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { member: DBSHARINGMemberSelector; });

	constructor(o: { member: DBSHARINGMemberSelector; permissionLevel: DBPAPERPaperDocPermissionLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMember(member: DBSHARINGMemberSelector): this;

	initWithMemberPermissionLevel(member: DBSHARINGMemberSelector, permissionLevel: DBPAPERPaperDocPermissionLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERAddMemberSerializer extends NSObject {

	static alloc(): DBPAPERAddMemberSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERAddMember;

	static new(): DBPAPERAddMemberSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERAddMember): NSDictionary<string, any>;
}

declare class DBPAPERAddPaperDocUser extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERAddPaperDocUser; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERAddPaperDocUser; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly customMessage: string;

	readonly members: NSArray<DBPAPERAddMember>;

	readonly quiet: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; members: NSArray<DBPAPERAddMember> | DBPAPERAddMember[]; });

	constructor(o: { docId: string; members: NSArray<DBPAPERAddMember> | DBPAPERAddMember[]; customMessage: string; quiet: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdMembers(docId: string, members: NSArray<DBPAPERAddMember> | DBPAPERAddMember[]): this;

	initWithDocIdMembersCustomMessageQuiet(docId: string, members: NSArray<DBPAPERAddMember> | DBPAPERAddMember[], customMessage: string, quiet: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERAddPaperDocUserMemberResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERAddPaperDocUserMemberResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERAddPaperDocUserMemberResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly member: DBSHARINGMemberSelector;

	readonly result: DBPAPERAddPaperDocUserResult;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { member: DBSHARINGMemberSelector; result: DBPAPERAddPaperDocUserResult; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMemberResult(member: DBSHARINGMemberSelector, result: DBPAPERAddPaperDocUserResult): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERAddPaperDocUserMemberResultSerializer extends NSObject {

	static alloc(): DBPAPERAddPaperDocUserMemberResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERAddPaperDocUserMemberResult;

	static new(): DBPAPERAddPaperDocUserMemberResultSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERAddPaperDocUserMemberResult): NSDictionary<string, any>;
}

declare class DBPAPERAddPaperDocUserResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERAddPaperDocUserResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERAddPaperDocUserResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERAddPaperDocUserResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { dailyLimitReached: void; });

	constructor(o: { failedUserDataRetrieval: void; });

	constructor(o: { other: void; });

	constructor(o: { permissionAlreadyGranted: void; });

	constructor(o: { sharingOutsideTeamDisabled: void; });

	constructor(o: { success: void; });

	constructor(o: { unknownError: void; });

	constructor(o: { userIsOwner: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDailyLimitReached(): this;

	initWithFailedUserDataRetrieval(): this;

	initWithOther(): this;

	initWithPermissionAlreadyGranted(): this;

	initWithSharingOutsideTeamDisabled(): this;

	initWithSuccess(): this;

	initWithUnknownError(): this;

	initWithUserIsOwner(): this;

	isDailyLimitReached(): boolean;

	isEqual(object: any): boolean;

	isFailedUserDataRetrieval(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPermissionAlreadyGranted(): boolean;

	isSharingOutsideTeamDisabled(): boolean;

	isSuccess(): boolean;

	isUnknownError(): boolean;

	isUserIsOwner(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERAddPaperDocUserResultSerializer extends NSObject {

	static alloc(): DBPAPERAddPaperDocUserResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERAddPaperDocUserResult;

	static new(): DBPAPERAddPaperDocUserResultSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERAddPaperDocUserResult): NSDictionary<string, any>;
}

declare const enum DBPAPERAddPaperDocUserResultTag {

	Success = 0,

	UnknownError = 1,

	SharingOutsideTeamDisabled = 2,

	DailyLimitReached = 3,

	UserIsOwner = 4,

	FailedUserDataRetrieval = 5,

	PermissionAlreadyGranted = 6,

	Other = 7
}

declare class DBPAPERAddPaperDocUserSerializer extends NSObject {

	static alloc(): DBPAPERAddPaperDocUserSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERAddPaperDocUser;

	static new(): DBPAPERAddPaperDocUserSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERAddPaperDocUser): NSDictionary<string, any>;
}

declare class DBPAPERCursor extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERCursor; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERCursor; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly expiration: Date;

	readonly value: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { value: string; });

	constructor(o: { value: string; expiration: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithValue(value: string): this;

	initWithValueExpiration(value: string, expiration: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERCursorSerializer extends NSObject {

	static alloc(): DBPAPERCursorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERCursor;

	static new(): DBPAPERCursorSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERCursor): NSDictionary<string, any>;
}

declare class DBPAPERDocLookupError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERDocLookupError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERDocLookupError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERDocLookupErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docNotFound: void; });

	constructor(o: { insufficientPermissions: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocNotFound(): this;

	initWithInsufficientPermissions(): this;

	initWithOther(): this;

	isDocNotFound(): boolean;

	isEqual(object: any): boolean;

	isInsufficientPermissions(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERDocLookupErrorSerializer extends NSObject {

	static alloc(): DBPAPERDocLookupErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERDocLookupError;

	static new(): DBPAPERDocLookupErrorSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERDocLookupError): NSDictionary<string, any>;
}

declare const enum DBPAPERDocLookupErrorTag {

	InsufficientPermissions = 0,

	Other = 1,

	DocNotFound = 2
}

declare class DBPAPERDocSubscriptionLevel extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERDocSubscriptionLevel; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERDocSubscriptionLevel; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERDocSubscriptionLevelTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default_: void; });

	constructor(o: { every: void; });

	constructor(o: { ignore: void; });

	constructor(o: { noEmail: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDefault_(): this;

	initWithEvery(): this;

	initWithIgnore(): this;

	initWithNoEmail(): this;

	isDefault_(): boolean;

	isEqual(object: any): boolean;

	isEvery(): boolean;

	isIgnore(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoEmail(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERDocSubscriptionLevelSerializer extends NSObject {

	static alloc(): DBPAPERDocSubscriptionLevelSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERDocSubscriptionLevel;

	static new(): DBPAPERDocSubscriptionLevelSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERDocSubscriptionLevel): NSDictionary<string, any>;
}

declare const enum DBPAPERDocSubscriptionLevelTag {

	Default_ = 0,

	Ignore = 1,

	Every = 2,

	NoEmail = 3
}

declare class DBPAPERExportFormat extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERExportFormat; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERExportFormat; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERExportFormatTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { html: void; });

	constructor(o: { markdown: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHtml(): this;

	initWithMarkdown(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isHtml(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMarkdown(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERExportFormatSerializer extends NSObject {

	static alloc(): DBPAPERExportFormatSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERExportFormat;

	static new(): DBPAPERExportFormatSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERExportFormat): NSDictionary<string, any>;
}

declare const enum DBPAPERExportFormatTag {

	Html = 0,

	Markdown = 1,

	Other = 2
}

declare class DBPAPERFolder extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERFolder; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERFolder; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly id_: string;

	readonly name: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; name: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_Name(id_: string, name: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERFolderSerializer extends NSObject {

	static alloc(): DBPAPERFolderSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERFolder;

	static new(): DBPAPERFolderSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERFolder): NSDictionary<string, any>;
}

declare class DBPAPERFolderSharingPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERFolderSharingPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERFolderSharingPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERFolderSharingPolicyTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { inviteOnly: void; });

	constructor(o: { team: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInviteOnly(): this;

	initWithTeam(): this;

	isEqual(object: any): boolean;

	isInviteOnly(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERFolderSharingPolicyTypeSerializer extends NSObject {

	static alloc(): DBPAPERFolderSharingPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERFolderSharingPolicyType;

	static new(): DBPAPERFolderSharingPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERFolderSharingPolicyType): NSDictionary<string, any>;
}

declare const enum DBPAPERFolderSharingPolicyTypeTag {

	Team = 0,

	InviteOnly = 1
}

declare class DBPAPERFolderSubscriptionLevel extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERFolderSubscriptionLevel; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERFolderSubscriptionLevel; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERFolderSubscriptionLevelTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { activityOnly: void; });

	constructor(o: { dailyEmails: void; });

	constructor(o: { none: void; });

	constructor(o: { weeklyEmails: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActivityOnly(): this;

	initWithDailyEmails(): this;

	initWithNone(): this;

	initWithWeeklyEmails(): this;

	isActivityOnly(): boolean;

	isDailyEmails(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNone(): boolean;

	isWeeklyEmails(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERFolderSubscriptionLevelSerializer extends NSObject {

	static alloc(): DBPAPERFolderSubscriptionLevelSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERFolderSubscriptionLevel;

	static new(): DBPAPERFolderSubscriptionLevelSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERFolderSubscriptionLevel): NSDictionary<string, any>;
}

declare const enum DBPAPERFolderSubscriptionLevelTag {

	None = 0,

	ActivityOnly = 1,

	DailyEmails = 2,

	WeeklyEmails = 3
}

declare class DBPAPERFoldersContainingPaperDoc extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERFoldersContainingPaperDoc; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERFoldersContainingPaperDoc; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly folderSharingPolicyType: DBPAPERFolderSharingPolicyType;

	readonly folders: NSArray<DBPAPERFolder>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { folderSharingPolicyType: DBPAPERFolderSharingPolicyType; folders: NSArray<DBPAPERFolder> | DBPAPERFolder[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithFolderSharingPolicyTypeFolders(folderSharingPolicyType: DBPAPERFolderSharingPolicyType, folders: NSArray<DBPAPERFolder> | DBPAPERFolder[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERFoldersContainingPaperDocSerializer extends NSObject {

	static alloc(): DBPAPERFoldersContainingPaperDocSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERFoldersContainingPaperDoc;

	static new(): DBPAPERFoldersContainingPaperDocSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERFoldersContainingPaperDoc): NSDictionary<string, any>;
}

declare class DBPAPERImportFormat extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERImportFormat; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERImportFormat; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERImportFormatTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { html: void; });

	constructor(o: { markdown: void; });

	constructor(o: { other: void; });

	constructor(o: { plainText: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHtml(): this;

	initWithMarkdown(): this;

	initWithOther(): this;

	initWithPlainText(): this;

	isEqual(object: any): boolean;

	isHtml(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMarkdown(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPlainText(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERImportFormatSerializer extends NSObject {

	static alloc(): DBPAPERImportFormatSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERImportFormat;

	static new(): DBPAPERImportFormatSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERImportFormat): NSDictionary<string, any>;
}

declare const enum DBPAPERImportFormatTag {

	Html = 0,

	Markdown = 1,

	PlainText = 2,

	Other = 3
}

declare class DBPAPERInviteeInfoWithPermissionLevel extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERInviteeInfoWithPermissionLevel; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERInviteeInfoWithPermissionLevel; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invitee: DBSHARINGInviteeInfo;

	readonly permissionLevel: DBPAPERPaperDocPermissionLevel;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invitee: DBSHARINGInviteeInfo; permissionLevel: DBPAPERPaperDocPermissionLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInviteePermissionLevel(invitee: DBSHARINGInviteeInfo, permissionLevel: DBPAPERPaperDocPermissionLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERInviteeInfoWithPermissionLevelSerializer extends NSObject {

	static alloc(): DBPAPERInviteeInfoWithPermissionLevelSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERInviteeInfoWithPermissionLevel;

	static new(): DBPAPERInviteeInfoWithPermissionLevelSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERInviteeInfoWithPermissionLevel): NSDictionary<string, any>;
}

declare class DBPAPERListDocsCursorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListDocsCursorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListDocsCursorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursorError: DBPAPERPaperApiCursorError;

	readonly tag: DBPAPERListDocsCursorErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursorError: DBPAPERPaperApiCursorError; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursorError(cursorError: DBPAPERPaperApiCursorError): this;

	initWithOther(): this;

	isCursorError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERListDocsCursorErrorSerializer extends NSObject {

	static alloc(): DBPAPERListDocsCursorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListDocsCursorError;

	static new(): DBPAPERListDocsCursorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListDocsCursorError): NSDictionary<string, any>;
}

declare const enum DBPAPERListDocsCursorErrorTag {

	CursorError = 0,

	Other = 1
}

declare class DBPAPERListPaperDocsArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListPaperDocsArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListPaperDocsArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly filterBy: DBPAPERListPaperDocsFilterBy;

	readonly limit: number;

	readonly sortBy: DBPAPERListPaperDocsSortBy;

	readonly sortOrder: DBPAPERListPaperDocsSortOrder;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { filterBy: DBPAPERListPaperDocsFilterBy; sortBy: DBPAPERListPaperDocsSortBy; sortOrder: DBPAPERListPaperDocsSortOrder; limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithFilterBySortBySortOrderLimit(filterBy: DBPAPERListPaperDocsFilterBy, sortBy: DBPAPERListPaperDocsSortBy, sortOrder: DBPAPERListPaperDocsSortOrder, limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListPaperDocsArgsSerializer extends NSObject {

	static alloc(): DBPAPERListPaperDocsArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListPaperDocsArgs;

	static new(): DBPAPERListPaperDocsArgsSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListPaperDocsArgs): NSDictionary<string, any>;
}

declare class DBPAPERListPaperDocsContinueArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListPaperDocsContinueArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListPaperDocsContinueArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListPaperDocsContinueArgsSerializer extends NSObject {

	static alloc(): DBPAPERListPaperDocsContinueArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListPaperDocsContinueArgs;

	static new(): DBPAPERListPaperDocsContinueArgsSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListPaperDocsContinueArgs): NSDictionary<string, any>;
}

declare class DBPAPERListPaperDocsFilterBy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListPaperDocsFilterBy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListPaperDocsFilterBy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERListPaperDocsFilterByTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docsAccessed: void; });

	constructor(o: { docsCreated: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocsAccessed(): this;

	initWithDocsCreated(): this;

	initWithOther(): this;

	isDocsAccessed(): boolean;

	isDocsCreated(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERListPaperDocsFilterBySerializer extends NSObject {

	static alloc(): DBPAPERListPaperDocsFilterBySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListPaperDocsFilterBy;

	static new(): DBPAPERListPaperDocsFilterBySerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListPaperDocsFilterBy): NSDictionary<string, any>;
}

declare const enum DBPAPERListPaperDocsFilterByTag {

	DocsAccessed = 0,

	DocsCreated = 1,

	Other = 2
}

declare class DBPAPERListPaperDocsResponse extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListPaperDocsResponse; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListPaperDocsResponse; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: DBPAPERCursor;

	readonly docIds: NSArray<string>;

	readonly hasMore: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docIds: NSArray<string> | string[]; cursor: DBPAPERCursor; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdsCursorHasMore(docIds: NSArray<string> | string[], cursor: DBPAPERCursor, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListPaperDocsResponseSerializer extends NSObject {

	static alloc(): DBPAPERListPaperDocsResponseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListPaperDocsResponse;

	static new(): DBPAPERListPaperDocsResponseSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListPaperDocsResponse): NSDictionary<string, any>;
}

declare class DBPAPERListPaperDocsSortBy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListPaperDocsSortBy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListPaperDocsSortBy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERListPaperDocsSortByTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessed: void; });

	constructor(o: { created: void; });

	constructor(o: { modified: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessed(): this;

	initWithCreated(): this;

	initWithModified(): this;

	initWithOther(): this;

	isAccessed(): boolean;

	isCreated(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isModified(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERListPaperDocsSortBySerializer extends NSObject {

	static alloc(): DBPAPERListPaperDocsSortBySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListPaperDocsSortBy;

	static new(): DBPAPERListPaperDocsSortBySerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListPaperDocsSortBy): NSDictionary<string, any>;
}

declare const enum DBPAPERListPaperDocsSortByTag {

	Accessed = 0,

	Modified = 1,

	Created = 2,

	Other = 3
}

declare class DBPAPERListPaperDocsSortOrder extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListPaperDocsSortOrder; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListPaperDocsSortOrder; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERListPaperDocsSortOrderTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { ascending: void; });

	constructor(o: { descending: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAscending(): this;

	initWithDescending(): this;

	initWithOther(): this;

	isAscending(): boolean;

	isDescending(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERListPaperDocsSortOrderSerializer extends NSObject {

	static alloc(): DBPAPERListPaperDocsSortOrderSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListPaperDocsSortOrder;

	static new(): DBPAPERListPaperDocsSortOrderSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListPaperDocsSortOrder): NSDictionary<string, any>;
}

declare const enum DBPAPERListPaperDocsSortOrderTag {

	Ascending = 0,

	Descending = 1,

	Other = 2
}

declare class DBPAPERListUsersCursorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListUsersCursorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListUsersCursorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursorError: DBPAPERPaperApiCursorError;

	readonly tag: DBPAPERListUsersCursorErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursorError: DBPAPERPaperApiCursorError; });

	constructor(o: { docNotFound: void; });

	constructor(o: { insufficientPermissions: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursorError(cursorError: DBPAPERPaperApiCursorError): this;

	initWithDocNotFound(): this;

	initWithInsufficientPermissions(): this;

	initWithOther(): this;

	isCursorError(): boolean;

	isDocNotFound(): boolean;

	isEqual(object: any): boolean;

	isInsufficientPermissions(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERListUsersCursorErrorSerializer extends NSObject {

	static alloc(): DBPAPERListUsersCursorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListUsersCursorError;

	static new(): DBPAPERListUsersCursorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListUsersCursorError): NSDictionary<string, any>;
}

declare const enum DBPAPERListUsersCursorErrorTag {

	InsufficientPermissions = 0,

	Other = 1,

	DocNotFound = 2,

	CursorError = 3
}

declare class DBPAPERListUsersOnFolderArgs extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListUsersOnFolderArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListUsersOnFolderArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdLimit(docId: string, limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListUsersOnFolderArgsSerializer extends NSObject {

	static alloc(): DBPAPERListUsersOnFolderArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListUsersOnFolderArgs;

	static new(): DBPAPERListUsersOnFolderArgsSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListUsersOnFolderArgs): NSDictionary<string, any>;
}

declare class DBPAPERListUsersOnFolderContinueArgs extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListUsersOnFolderContinueArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListUsersOnFolderContinueArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdCursor(docId: string, cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListUsersOnFolderContinueArgsSerializer extends NSObject {

	static alloc(): DBPAPERListUsersOnFolderContinueArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListUsersOnFolderContinueArgs;

	static new(): DBPAPERListUsersOnFolderContinueArgsSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListUsersOnFolderContinueArgs): NSDictionary<string, any>;
}

declare class DBPAPERListUsersOnFolderResponse extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListUsersOnFolderResponse; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListUsersOnFolderResponse; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: DBPAPERCursor;

	readonly hasMore: number;

	readonly invitees: NSArray<DBSHARINGInviteeInfo>;

	readonly users: NSArray<DBSHARINGUserInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invitees: NSArray<DBSHARINGInviteeInfo> | DBSHARINGInviteeInfo[]; users: NSArray<DBSHARINGUserInfo> | DBSHARINGUserInfo[]; cursor: DBPAPERCursor; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInviteesUsersCursorHasMore(invitees: NSArray<DBSHARINGInviteeInfo> | DBSHARINGInviteeInfo[], users: NSArray<DBSHARINGUserInfo> | DBSHARINGUserInfo[], cursor: DBPAPERCursor, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListUsersOnFolderResponseSerializer extends NSObject {

	static alloc(): DBPAPERListUsersOnFolderResponseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListUsersOnFolderResponse;

	static new(): DBPAPERListUsersOnFolderResponseSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListUsersOnFolderResponse): NSDictionary<string, any>;
}

declare class DBPAPERListUsersOnPaperDocArgs extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListUsersOnPaperDocArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListUsersOnPaperDocArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly filterBy: DBPAPERUserOnPaperDocFilter;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; limit: number; filterBy: DBPAPERUserOnPaperDocFilter; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdLimitFilterBy(docId: string, limit: number, filterBy: DBPAPERUserOnPaperDocFilter): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListUsersOnPaperDocArgsSerializer extends NSObject {

	static alloc(): DBPAPERListUsersOnPaperDocArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListUsersOnPaperDocArgs;

	static new(): DBPAPERListUsersOnPaperDocArgsSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListUsersOnPaperDocArgs): NSDictionary<string, any>;
}

declare class DBPAPERListUsersOnPaperDocContinueArgs extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListUsersOnPaperDocContinueArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListUsersOnPaperDocContinueArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdCursor(docId: string, cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListUsersOnPaperDocContinueArgsSerializer extends NSObject {

	static alloc(): DBPAPERListUsersOnPaperDocContinueArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListUsersOnPaperDocContinueArgs;

	static new(): DBPAPERListUsersOnPaperDocContinueArgsSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListUsersOnPaperDocContinueArgs): NSDictionary<string, any>;
}

declare class DBPAPERListUsersOnPaperDocResponse extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERListUsersOnPaperDocResponse; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERListUsersOnPaperDocResponse; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: DBPAPERCursor;

	readonly docOwner: DBSHARINGUserInfo;

	readonly hasMore: number;

	readonly invitees: NSArray<DBPAPERInviteeInfoWithPermissionLevel>;

	readonly users: NSArray<DBPAPERUserInfoWithPermissionLevel>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invitees: NSArray<DBPAPERInviteeInfoWithPermissionLevel> | DBPAPERInviteeInfoWithPermissionLevel[]; users: NSArray<DBPAPERUserInfoWithPermissionLevel> | DBPAPERUserInfoWithPermissionLevel[]; docOwner: DBSHARINGUserInfo; cursor: DBPAPERCursor; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInviteesUsersDocOwnerCursorHasMore(invitees: NSArray<DBPAPERInviteeInfoWithPermissionLevel> | DBPAPERInviteeInfoWithPermissionLevel[], users: NSArray<DBPAPERUserInfoWithPermissionLevel> | DBPAPERUserInfoWithPermissionLevel[], docOwner: DBSHARINGUserInfo, cursor: DBPAPERCursor, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERListUsersOnPaperDocResponseSerializer extends NSObject {

	static alloc(): DBPAPERListUsersOnPaperDocResponseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERListUsersOnPaperDocResponse;

	static new(): DBPAPERListUsersOnPaperDocResponseSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERListUsersOnPaperDocResponse): NSDictionary<string, any>;
}

declare class DBPAPERPaperApiBaseError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperApiBaseError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperApiBaseError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERPaperApiBaseErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { insufficientPermissions: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInsufficientPermissions(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInsufficientPermissions(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERPaperApiBaseErrorSerializer extends NSObject {

	static alloc(): DBPAPERPaperApiBaseErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperApiBaseError;

	static new(): DBPAPERPaperApiBaseErrorSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperApiBaseError): NSDictionary<string, any>;
}

declare const enum DBPAPERPaperApiBaseErrorTag {

	InsufficientPermissions = 0,

	Other = 1
}

declare class DBPAPERPaperApiCursorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperApiCursorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperApiCursorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERPaperApiCursorErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { expiredCursor: void; });

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	constructor(o: { reset: void; });

	constructor(o: { wrongUserInCursor: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithExpiredCursor(): this;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	initWithReset(): this;

	initWithWrongUserInCursor(): this;

	isEqual(object: any): boolean;

	isExpiredCursor(): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReset(): boolean;

	isWrongUserInCursor(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERPaperApiCursorErrorSerializer extends NSObject {

	static alloc(): DBPAPERPaperApiCursorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperApiCursorError;

	static new(): DBPAPERPaperApiCursorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperApiCursorError): NSDictionary<string, any>;
}

declare const enum DBPAPERPaperApiCursorErrorTag {

	ExpiredCursor = 0,

	InvalidCursor = 1,

	WrongUserInCursor = 2,

	Reset = 3,

	Other = 4
}

declare class DBPAPERPaperDocCreateArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocCreateArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocCreateArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly importFormat: DBPAPERImportFormat;

	readonly parentFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { importFormat: DBPAPERImportFormat; });

	constructor(o: { importFormat: DBPAPERImportFormat; parentFolderId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithImportFormat(importFormat: DBPAPERImportFormat): this;

	initWithImportFormatParentFolderId(importFormat: DBPAPERImportFormat, parentFolderId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERPaperDocCreateArgsSerializer extends NSObject {

	static alloc(): DBPAPERPaperDocCreateArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocCreateArgs;

	static new(): DBPAPERPaperDocCreateArgsSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocCreateArgs): NSDictionary<string, any>;
}

declare class DBPAPERPaperDocCreateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocCreateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocCreateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERPaperDocCreateErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { contentMalformed: void; });

	constructor(o: { docLengthExceeded: void; });

	constructor(o: { folderNotFound: void; });

	constructor(o: { imageSizeExceeded: void; });

	constructor(o: { insufficientPermissions: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithContentMalformed(): this;

	initWithDocLengthExceeded(): this;

	initWithFolderNotFound(): this;

	initWithImageSizeExceeded(): this;

	initWithInsufficientPermissions(): this;

	initWithOther(): this;

	isContentMalformed(): boolean;

	isDocLengthExceeded(): boolean;

	isEqual(object: any): boolean;

	isFolderNotFound(): boolean;

	isImageSizeExceeded(): boolean;

	isInsufficientPermissions(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERPaperDocCreateErrorSerializer extends NSObject {

	static alloc(): DBPAPERPaperDocCreateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocCreateError;

	static new(): DBPAPERPaperDocCreateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocCreateError): NSDictionary<string, any>;
}

declare const enum DBPAPERPaperDocCreateErrorTag {

	InsufficientPermissions = 0,

	Other = 1,

	ContentMalformed = 2,

	FolderNotFound = 3,

	DocLengthExceeded = 4,

	ImageSizeExceeded = 5
}

declare class DBPAPERPaperDocCreateUpdateResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocCreateUpdateResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocCreateUpdateResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly docId: string;

	readonly revision: number;

	readonly title: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; revision: number; title: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdRevisionTitle(docId: string, revision: number, title: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERPaperDocCreateUpdateResultSerializer extends NSObject {

	static alloc(): DBPAPERPaperDocCreateUpdateResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocCreateUpdateResult;

	static new(): DBPAPERPaperDocCreateUpdateResultSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocCreateUpdateResult): NSDictionary<string, any>;
}

declare class DBPAPERPaperDocExport extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocExport; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocExport; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly exportFormat: DBPAPERExportFormat;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; exportFormat: DBPAPERExportFormat; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdExportFormat(docId: string, exportFormat: DBPAPERExportFormat): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERPaperDocExportResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocExportResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocExportResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly mimeType: string;

	readonly owner: string;

	readonly revision: number;

	readonly title: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { owner: string; title: string; revision: number; mimeType: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOwnerTitleRevisionMimeType(owner: string, title: string, revision: number, mimeType: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERPaperDocExportResultSerializer extends NSObject {

	static alloc(): DBPAPERPaperDocExportResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocExportResult;

	static new(): DBPAPERPaperDocExportResultSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocExportResult): NSDictionary<string, any>;
}

declare class DBPAPERPaperDocExportSerializer extends NSObject {

	static alloc(): DBPAPERPaperDocExportSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocExport;

	static new(): DBPAPERPaperDocExportSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocExport): NSDictionary<string, any>;
}

declare class DBPAPERPaperDocPermissionLevel extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocPermissionLevel; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocPermissionLevel; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERPaperDocPermissionLevelTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { edit: void; });

	constructor(o: { other: void; });

	constructor(o: { viewAndComment: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEdit(): this;

	initWithOther(): this;

	initWithViewAndComment(): this;

	isEdit(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isViewAndComment(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERPaperDocPermissionLevelSerializer extends NSObject {

	static alloc(): DBPAPERPaperDocPermissionLevelSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocPermissionLevel;

	static new(): DBPAPERPaperDocPermissionLevelSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocPermissionLevel): NSDictionary<string, any>;
}

declare const enum DBPAPERPaperDocPermissionLevelTag {

	Edit = 0,

	ViewAndComment = 1,

	Other = 2
}

declare class DBPAPERPaperDocSharingPolicy extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocSharingPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocSharingPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharingPolicy: DBPAPERSharingPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; sharingPolicy: DBPAPERSharingPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdSharingPolicy(docId: string, sharingPolicy: DBPAPERSharingPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERPaperDocSharingPolicySerializer extends NSObject {

	static alloc(): DBPAPERPaperDocSharingPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocSharingPolicy;

	static new(): DBPAPERPaperDocSharingPolicySerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocSharingPolicy): NSDictionary<string, any>;
}

declare class DBPAPERPaperDocUpdateArgs extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocUpdateArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocUpdateArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly docUpdatePolicy: DBPAPERPaperDocUpdatePolicy;

	readonly importFormat: DBPAPERImportFormat;

	readonly revision: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; docUpdatePolicy: DBPAPERPaperDocUpdatePolicy; revision: number; importFormat: DBPAPERImportFormat; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdDocUpdatePolicyRevisionImportFormat(docId: string, docUpdatePolicy: DBPAPERPaperDocUpdatePolicy, revision: number, importFormat: DBPAPERImportFormat): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERPaperDocUpdateArgsSerializer extends NSObject {

	static alloc(): DBPAPERPaperDocUpdateArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocUpdateArgs;

	static new(): DBPAPERPaperDocUpdateArgsSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocUpdateArgs): NSDictionary<string, any>;
}

declare class DBPAPERPaperDocUpdateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocUpdateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocUpdateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERPaperDocUpdateErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { contentMalformed: void; });

	constructor(o: { docArchived: void; });

	constructor(o: { docDeleted: void; });

	constructor(o: { docLengthExceeded: void; });

	constructor(o: { docNotFound: void; });

	constructor(o: { imageSizeExceeded: void; });

	constructor(o: { insufficientPermissions: void; });

	constructor(o: { other: void; });

	constructor(o: { revisionMismatch: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithContentMalformed(): this;

	initWithDocArchived(): this;

	initWithDocDeleted(): this;

	initWithDocLengthExceeded(): this;

	initWithDocNotFound(): this;

	initWithImageSizeExceeded(): this;

	initWithInsufficientPermissions(): this;

	initWithOther(): this;

	initWithRevisionMismatch(): this;

	isContentMalformed(): boolean;

	isDocArchived(): boolean;

	isDocDeleted(): boolean;

	isDocLengthExceeded(): boolean;

	isDocNotFound(): boolean;

	isEqual(object: any): boolean;

	isImageSizeExceeded(): boolean;

	isInsufficientPermissions(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRevisionMismatch(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERPaperDocUpdateErrorSerializer extends NSObject {

	static alloc(): DBPAPERPaperDocUpdateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocUpdateError;

	static new(): DBPAPERPaperDocUpdateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocUpdateError): NSDictionary<string, any>;
}

declare const enum DBPAPERPaperDocUpdateErrorTag {

	InsufficientPermissions = 0,

	Other = 1,

	DocNotFound = 2,

	ContentMalformed = 3,

	RevisionMismatch = 4,

	DocLengthExceeded = 5,

	ImageSizeExceeded = 6,

	DocArchived = 7,

	DocDeleted = 8
}

declare class DBPAPERPaperDocUpdatePolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERPaperDocUpdatePolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERPaperDocUpdatePolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERPaperDocUpdatePolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { append: void; });

	constructor(o: { other: void; });

	constructor(o: { overwriteAll: void; });

	constructor(o: { prepend: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppend(): this;

	initWithOther(): this;

	initWithOverwriteAll(): this;

	initWithPrepend(): this;

	isAppend(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isOverwriteAll(): boolean;

	isPrepend(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERPaperDocUpdatePolicySerializer extends NSObject {

	static alloc(): DBPAPERPaperDocUpdatePolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERPaperDocUpdatePolicy;

	static new(): DBPAPERPaperDocUpdatePolicySerializer; // inherited from NSObject

	static serialize(instance: DBPAPERPaperDocUpdatePolicy): NSDictionary<string, any>;
}

declare const enum DBPAPERPaperDocUpdatePolicyTag {

	Append = 0,

	Prepend = 1,

	OverwriteAll = 2,

	Other = 3
}

declare class DBPAPERRefPaperDoc extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERRefPaperDoc; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERRefPaperDoc; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly docId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocId(docId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERRefPaperDocSerializer extends NSObject {

	static alloc(): DBPAPERRefPaperDocSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERRefPaperDoc;

	static new(): DBPAPERRefPaperDocSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERRefPaperDoc): NSDictionary<string, any>;
}

declare class DBPAPERRemovePaperDocUser extends DBPAPERRefPaperDoc implements DBSerializable, NSCopying {

	static alloc(): DBPAPERRemovePaperDocUser; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERRemovePaperDocUser; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly member: DBSHARINGMemberSelector;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; member: DBSHARINGMemberSelector; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdMember(docId: string, member: DBSHARINGMemberSelector): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERRemovePaperDocUserSerializer extends NSObject {

	static alloc(): DBPAPERRemovePaperDocUserSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERRemovePaperDocUser;

	static new(): DBPAPERRemovePaperDocUserSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERRemovePaperDocUser): NSDictionary<string, any>;
}

declare class DBPAPERRouteObjects extends NSObject {

	static DBPAPERDocsArchive(): DBRoute;

	static DBPAPERDocsCreate(): DBRoute;

	static DBPAPERDocsDownload(): DBRoute;

	static DBPAPERDocsFolderUsersList(): DBRoute;

	static DBPAPERDocsFolderUsersListContinue(): DBRoute;

	static DBPAPERDocsGetFolderInfo(): DBRoute;

	static DBPAPERDocsList(): DBRoute;

	static DBPAPERDocsListContinue(): DBRoute;

	static DBPAPERDocsPermanentlyDelete(): DBRoute;

	static DBPAPERDocsSharingPolicyGet(): DBRoute;

	static DBPAPERDocsSharingPolicySet(): DBRoute;

	static DBPAPERDocsUpdate(): DBRoute;

	static DBPAPERDocsUsersAdd(): DBRoute;

	static DBPAPERDocsUsersList(): DBRoute;

	static DBPAPERDocsUsersListContinue(): DBRoute;

	static DBPAPERDocsUsersRemove(): DBRoute;

	static alloc(): DBPAPERRouteObjects; // inherited from NSObject

	static new(): DBPAPERRouteObjects; // inherited from NSObject
}

declare class DBPAPERSharingPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERSharingPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERSharingPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly publicSharingPolicy: DBPAPERSharingPublicPolicyType;

	readonly teamSharingPolicy: DBPAPERSharingTeamPolicyType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { publicSharingPolicy: DBPAPERSharingPublicPolicyType; teamSharingPolicy: DBPAPERSharingTeamPolicyType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithPublicSharingPolicyTeamSharingPolicy(publicSharingPolicy: DBPAPERSharingPublicPolicyType, teamSharingPolicy: DBPAPERSharingTeamPolicyType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERSharingPolicySerializer extends NSObject {

	static alloc(): DBPAPERSharingPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERSharingPolicy;

	static new(): DBPAPERSharingPolicySerializer; // inherited from NSObject

	static serialize(instance: DBPAPERSharingPolicy): NSDictionary<string, any>;
}

declare class DBPAPERSharingPublicPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERSharingPublicPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERSharingPublicPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERSharingPublicPolicyTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { inviteOnly: void; });

	constructor(o: { peopleWithLinkCanEdit: void; });

	constructor(o: { peopleWithLinkCanViewAndComment: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithInviteOnly(): this;

	initWithPeopleWithLinkCanEdit(): this;

	initWithPeopleWithLinkCanViewAndComment(): this;

	isDisabled(): boolean;

	isEqual(object: any): boolean;

	isInviteOnly(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPeopleWithLinkCanEdit(): boolean;

	isPeopleWithLinkCanViewAndComment(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERSharingPublicPolicyTypeSerializer extends NSObject {

	static alloc(): DBPAPERSharingPublicPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERSharingPublicPolicyType;

	static new(): DBPAPERSharingPublicPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERSharingPublicPolicyType): NSDictionary<string, any>;
}

declare const enum DBPAPERSharingPublicPolicyTypeTag {

	PeopleWithLinkCanEdit = 0,

	PeopleWithLinkCanViewAndComment = 1,

	InviteOnly = 2,

	Disabled = 3
}

declare class DBPAPERSharingTeamPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERSharingTeamPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERSharingTeamPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERSharingTeamPolicyTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { inviteOnly: void; });

	constructor(o: { peopleWithLinkCanEdit: void; });

	constructor(o: { peopleWithLinkCanViewAndComment: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInviteOnly(): this;

	initWithPeopleWithLinkCanEdit(): this;

	initWithPeopleWithLinkCanViewAndComment(): this;

	isEqual(object: any): boolean;

	isInviteOnly(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPeopleWithLinkCanEdit(): boolean;

	isPeopleWithLinkCanViewAndComment(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERSharingTeamPolicyTypeSerializer extends NSObject {

	static alloc(): DBPAPERSharingTeamPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERSharingTeamPolicyType;

	static new(): DBPAPERSharingTeamPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERSharingTeamPolicyType): NSDictionary<string, any>;
}

declare const enum DBPAPERSharingTeamPolicyTypeTag {

	PeopleWithLinkCanEdit = 0,

	PeopleWithLinkCanViewAndComment = 1,

	InviteOnly = 2
}

declare class DBPAPERUserAuthRoutes extends NSObject {

	static alloc(): DBPAPERUserAuthRoutes; // inherited from NSObject

	static new(): DBPAPERUserAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	docsArchive(docId: string): DBRpcTask<DBNilObject, DBPAPERDocLookupError>;

	docsCreateDataInputData(importFormat: DBPAPERImportFormat, inputData: NSData): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocCreateError>;

	docsCreateDataParentFolderIdInputData(importFormat: DBPAPERImportFormat, parentFolderId: string, inputData: NSData): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocCreateError>;

	docsCreateStreamInputStream(importFormat: DBPAPERImportFormat, inputStream: NSInputStream): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocCreateError>;

	docsCreateStreamParentFolderIdInputStream(importFormat: DBPAPERImportFormat, parentFolderId: string, inputStream: NSInputStream): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocCreateError>;

	docsCreateUrlInputUrl(importFormat: DBPAPERImportFormat, inputUrl: string): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocCreateError>;

	docsCreateUrlParentFolderIdInputUrl(importFormat: DBPAPERImportFormat, parentFolderId: string, inputUrl: string): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocCreateError>;

	docsDownloadDataExportFormat(docId: string, exportFormat: DBPAPERExportFormat): DBDownloadDataTask<DBPAPERPaperDocExportResult, DBPAPERDocLookupError>;

	docsDownloadDataExportFormatByteOffsetStartByteOffsetEnd(docId: string, exportFormat: DBPAPERExportFormat, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBPAPERPaperDocExportResult, DBPAPERDocLookupError>;

	docsDownloadUrlExportFormatOverwriteDestination(docId: string, exportFormat: DBPAPERExportFormat, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBPAPERPaperDocExportResult, DBPAPERDocLookupError>;

	docsDownloadUrlExportFormatOverwriteDestinationByteOffsetStartByteOffsetEnd(docId: string, exportFormat: DBPAPERExportFormat, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBPAPERPaperDocExportResult, DBPAPERDocLookupError>;

	docsFolderUsersList(docId: string): DBRpcTask<DBPAPERListUsersOnFolderResponse, DBPAPERDocLookupError>;

	docsFolderUsersListContinueCursor(docId: string, cursor: string): DBRpcTask<DBPAPERListUsersOnFolderResponse, DBPAPERListUsersCursorError>;

	docsFolderUsersListLimit(docId: string, limit: number): DBRpcTask<DBPAPERListUsersOnFolderResponse, DBPAPERDocLookupError>;

	docsGetFolderInfo(docId: string): DBRpcTask<DBPAPERFoldersContainingPaperDoc, DBPAPERDocLookupError>;

	docsList(): DBRpcTask<DBPAPERListPaperDocsResponse, DBNilObject>;

	docsListContinue(cursor: string): DBRpcTask<DBPAPERListPaperDocsResponse, DBPAPERListDocsCursorError>;

	docsListSortBySortOrderLimit(filterBy: DBPAPERListPaperDocsFilterBy, sortBy: DBPAPERListPaperDocsSortBy, sortOrder: DBPAPERListPaperDocsSortOrder, limit: number): DBRpcTask<DBPAPERListPaperDocsResponse, DBNilObject>;

	docsPermanentlyDelete(docId: string): DBRpcTask<DBNilObject, DBPAPERDocLookupError>;

	docsSharingPolicyGet(docId: string): DBRpcTask<DBPAPERSharingPolicy, DBPAPERDocLookupError>;

	docsSharingPolicySetSharingPolicy(docId: string, sharingPolicy: DBPAPERSharingPolicy): DBRpcTask<DBNilObject, DBPAPERDocLookupError>;

	docsUpdateDataDocUpdatePolicyRevisionImportFormatInputData(docId: string, docUpdatePolicy: DBPAPERPaperDocUpdatePolicy, revision: number, importFormat: DBPAPERImportFormat, inputData: NSData): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocUpdateError>;

	docsUpdateStreamDocUpdatePolicyRevisionImportFormatInputStream(docId: string, docUpdatePolicy: DBPAPERPaperDocUpdatePolicy, revision: number, importFormat: DBPAPERImportFormat, inputStream: NSInputStream): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocUpdateError>;

	docsUpdateUrlDocUpdatePolicyRevisionImportFormatInputUrl(docId: string, docUpdatePolicy: DBPAPERPaperDocUpdatePolicy, revision: number, importFormat: DBPAPERImportFormat, inputUrl: string): DBUploadTask<DBPAPERPaperDocCreateUpdateResult, DBPAPERPaperDocUpdateError>;

	docsUsersAddMembers(docId: string, members: NSArray<DBPAPERAddMember> | DBPAPERAddMember[]): DBRpcTask<NSArray<DBPAPERAddPaperDocUserMemberResult>, DBPAPERDocLookupError>;

	docsUsersAddMembersCustomMessageQuiet(docId: string, members: NSArray<DBPAPERAddMember> | DBPAPERAddMember[], customMessage: string, quiet: number): DBRpcTask<NSArray<DBPAPERAddPaperDocUserMemberResult>, DBPAPERDocLookupError>;

	docsUsersList(docId: string): DBRpcTask<DBPAPERListUsersOnPaperDocResponse, DBPAPERDocLookupError>;

	docsUsersListContinueCursor(docId: string, cursor: string): DBRpcTask<DBPAPERListUsersOnPaperDocResponse, DBPAPERListUsersCursorError>;

	docsUsersListLimitFilterBy(docId: string, limit: number, filterBy: DBPAPERUserOnPaperDocFilter): DBRpcTask<DBPAPERListUsersOnPaperDocResponse, DBPAPERDocLookupError>;

	docsUsersRemoveMember(docId: string, member: DBSHARINGMemberSelector): DBRpcTask<DBNilObject, DBPAPERDocLookupError>;

	init(client: DBTransportClient): this;
}

declare class DBPAPERUserInfoWithPermissionLevel extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERUserInfoWithPermissionLevel; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERUserInfoWithPermissionLevel; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly permissionLevel: DBPAPERPaperDocPermissionLevel;

	readonly user: DBSHARINGUserInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBSHARINGUserInfo; permissionLevel: DBPAPERPaperDocPermissionLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserPermissionLevel(user: DBSHARINGUserInfo, permissionLevel: DBPAPERPaperDocPermissionLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBPAPERUserInfoWithPermissionLevelSerializer extends NSObject {

	static alloc(): DBPAPERUserInfoWithPermissionLevelSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERUserInfoWithPermissionLevel;

	static new(): DBPAPERUserInfoWithPermissionLevelSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERUserInfoWithPermissionLevel): NSDictionary<string, any>;
}

declare class DBPAPERUserOnPaperDocFilter extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBPAPERUserOnPaperDocFilter; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBPAPERUserOnPaperDocFilter; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBPAPERUserOnPaperDocFilterTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { shared: void; });

	constructor(o: { visited: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithShared(): this;

	initWithVisited(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isShared(): boolean;

	isVisited(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBPAPERUserOnPaperDocFilterSerializer extends NSObject {

	static alloc(): DBPAPERUserOnPaperDocFilterSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBPAPERUserOnPaperDocFilter;

	static new(): DBPAPERUserOnPaperDocFilterSerializer; // inherited from NSObject

	static serialize(instance: DBPAPERUserOnPaperDocFilter): NSDictionary<string, any>;
}

declare const enum DBPAPERUserOnPaperDocFilterTag {

	Visited = 0,

	Shared = 1,

	Other = 2
}

declare class DBRequestAccessError extends DBRequestHttpError {

	static alloc(): DBRequestAccessError; // inherited from NSObject

	static new(): DBRequestAccessError; // inherited from NSObject

	readonly structuredAccessError: DBAUTHAccessError;

	constructor(o: { statusCode: string; errorContent: number; userMessage: string; structuredAccessError: DBLocalizedUserMessage; });

	initStatusCodeErrorContentUserMessageStructuredAccessError(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredAccessError: DBAUTHAccessError): this;
}

declare class DBRequestAuthError extends DBRequestHttpError {

	static alloc(): DBRequestAuthError; // inherited from NSObject

	static new(): DBRequestAuthError; // inherited from NSObject

	readonly structuredAuthError: DBAUTHAuthError;

	constructor(o: { statusCode: string; errorContent: number; userMessage: string; structuredAuthError: DBLocalizedUserMessage; });

	initStatusCodeErrorContentUserMessageStructuredAuthError(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredAuthError: DBAUTHAuthError): this;
}

declare class DBRequestBadInputError extends DBRequestHttpError {

	static alloc(): DBRequestBadInputError; // inherited from NSObject

	static new(): DBRequestBadInputError; // inherited from NSObject
}

declare class DBRequestClientError extends NSObject {

	static alloc(): DBRequestClientError; // inherited from NSObject

	static new(): DBRequestClientError; // inherited from NSObject

	readonly nsError: NSError;

	constructor();

	description(): string;

	init(nsError: NSError): this;
}

declare class DBRequestError extends NSObject {

	static alloc(): DBRequestError; // inherited from NSObject

	static new(): DBRequestError; // inherited from NSObject

	readonly backoff: number;

	readonly errorContent: string;

	readonly nsError: NSError;

	readonly requestId: string;

	readonly statusCode: number;

	readonly structuredAccessError: DBAUTHAccessError;

	readonly structuredAuthError: DBAUTHAuthError;

	readonly structuredPathRootError: DBCOMMONPathRootError;

	readonly structuredRateLimitError: DBAUTHRateLimitError;

	readonly tag: DBRequestErrorTag;

	readonly userMessage: DBLocalizedUserMessage;

	constructor(o: { asAccessError: string; statusCode: number; errorContent: string; userMessage: DBLocalizedUserMessage; structuredAccessError: DBAUTHAccessError; });

	constructor(o: { asAuthError: string; statusCode: number; errorContent: string; userMessage: DBLocalizedUserMessage; structuredAuthError: DBAUTHAuthError; });

	constructor(o: { asBadInputError: string; statusCode: number; errorContent: string; userMessage: DBLocalizedUserMessage; });

	constructor(o: { asClientError: NSError; });

	constructor(o: { asHttpError: string; statusCode: number; errorContent: string; userMessage: DBLocalizedUserMessage; });

	constructor(o: { asInternalServerError: string; statusCode: number; errorContent: string; userMessage: DBLocalizedUserMessage; });

	constructor(o: { asPathRootError: string; statusCode: number; errorContent: string; userMessage: DBLocalizedUserMessage; structuredPathRootError: DBCOMMONPathRootError; });

	constructor(o: { asRateLimitError: string; statusCode: number; errorContent: string; userMessage: DBLocalizedUserMessage; structuredRateLimitError: DBAUTHRateLimitError; backoff: number; });

	constructor(o: { requestId: DBRequestErrorTag; statusCode: string; errorContent: number; userMessage: string; structuredAuthError: DBLocalizedUserMessage; structuredAccessError: DBAUTHAuthError; structuredPathRootError: DBAUTHAccessError; structuredRateLimitError: DBCOMMONPathRootError; backoff: DBAUTHRateLimitError; nsError: number; });

	asAccessError(): DBRequestAccessError;

	asAuthError(): DBRequestAuthError;

	asBadInputError(): DBRequestBadInputError;

	asClientError(): DBRequestClientError;

	asHttpError(): DBRequestHttpError;

	asInternalServerError(): DBRequestInternalServerError;

	asPathRootError(): DBRequestPathRootError;

	asRateLimitError(): DBRequestRateLimitError;

	description(): string;

	initAsAccessErrorStatusCodeErrorContentUserMessageStructuredAccessError(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredAccessError: DBAUTHAccessError): this;

	initAsAuthErrorStatusCodeErrorContentUserMessageStructuredAuthError(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredAuthError: DBAUTHAuthError): this;

	initAsBadInputErrorStatusCodeErrorContentUserMessage(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage): this;

	initAsClientError(nsError: NSError): this;

	initAsHttpErrorStatusCodeErrorContentUserMessage(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage): this;

	initAsInternalServerErrorStatusCodeErrorContentUserMessage(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage): this;

	initAsPathRootErrorStatusCodeErrorContentUserMessageStructuredPathRootError(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredPathRootError: DBCOMMONPathRootError): this;

	initAsRateLimitErrorStatusCodeErrorContentUserMessageStructuredRateLimitErrorBackoff(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredRateLimitError: DBAUTHRateLimitError, backoff: number): this;

	initRequestIdStatusCodeErrorContentUserMessageStructuredAuthErrorStructuredAccessErrorStructuredPathRootErrorStructuredRateLimitErrorBackoffNsError(tag: DBRequestErrorTag, requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredAuthError: DBAUTHAuthError, structuredAccessError: DBAUTHAccessError, structuredPathRootError: DBCOMMONPathRootError, structuredRateLimitError: DBAUTHRateLimitError, backoff: number, nsError: NSError): this;

	isAccessError(): boolean;

	isAuthError(): boolean;

	isBadInputError(): boolean;

	isClientError(): boolean;

	isHttpError(): boolean;

	isInternalServerError(): boolean;

	isPathRootError(): boolean;

	isRateLimitError(): boolean;

	tagName(): string;
}

declare const enum DBRequestErrorTag {

	Http = 0,

	BadInput = 1,

	Auth = 2,

	PathRoot = 3,

	Access = 4,

	RateLimit = 5,

	InternalServer = 6,

	Client = 7
}

declare class DBRequestHttpError extends NSObject {

	static alloc(): DBRequestHttpError; // inherited from NSObject

	static new(): DBRequestHttpError; // inherited from NSObject

	readonly errorContent: string;

	readonly requestId: string;

	readonly statusCode: number;

	readonly userMessage: DBLocalizedUserMessage;

	constructor(o: { statusCode: string; errorContent: number; userMessage: string; });

	description(): string;

	initStatusCodeErrorContentUserMessage(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage): this;
}

declare class DBRequestInternalServerError extends DBRequestHttpError {

	static alloc(): DBRequestInternalServerError; // inherited from NSObject

	static new(): DBRequestInternalServerError; // inherited from NSObject
}

declare class DBRequestPathRootError extends DBRequestHttpError {

	static alloc(): DBRequestPathRootError; // inherited from NSObject

	static new(): DBRequestPathRootError; // inherited from NSObject

	readonly structuredPathRootError: DBCOMMONPathRootError;

	constructor(o: { statusCode: string; errorContent: number; userMessage: string; structuredPathRootError: DBLocalizedUserMessage; });

	initStatusCodeErrorContentUserMessageStructuredPathRootError(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredPathRootError: DBCOMMONPathRootError): this;
}

declare class DBRequestRateLimitError extends DBRequestHttpError {

	static alloc(): DBRequestRateLimitError; // inherited from NSObject

	static new(): DBRequestRateLimitError; // inherited from NSObject

	readonly backoff: number;

	readonly structuredRateLimitError: DBAUTHRateLimitError;

	constructor(o: { statusCode: string; errorContent: number; userMessage: string; structuredRateLimitError: DBLocalizedUserMessage; backoff: DBAUTHRateLimitError; });

	initStatusCodeErrorContentUserMessageStructuredRateLimitErrorBackoff(requestId: string, statusCode: number, errorContent: string, userMessage: DBLocalizedUserMessage, structuredRateLimitError: DBAUTHRateLimitError, backoff: number): this;
}

declare class DBRoute extends NSObject {

	static alloc(): DBRoute; // inherited from NSObject

	static new(): DBRoute; // inherited from NSObject

	readonly attrs: NSDictionary<string, string>;

	readonly dataStructDeserialBlock: (p1: any) => any;

	readonly dataStructSerialBlock: (p1: any) => any;

	readonly deprecated: number;

	readonly errorType: typeof NSObject;

	readonly host: DBRouteHost;

	readonly name: string;

	readonly namespace_: string;

	readonly resultType: typeof NSObject;

	constructor(o: { namespace_: string; deprecated: string; resultType: number; errorType: typeof NSObject; attrs: typeof NSObject; dataStructSerialBlock: NSDictionary<string, string>; dataStructDeserialBlock: (p1: any) => any; });

	initNamespace_DeprecatedResultTypeErrorTypeAttrsDataStructSerialBlockDataStructDeserialBlock(name: string, namespace_: string, deprecated: number, resultType: typeof NSObject, errorType: typeof NSObject, attrs: NSDictionary<string, string>, dataStructSerialBlock: (p1: any) => any, dataStructDeserialBlock: (p1: any) => any): this;
}

declare const enum DBRouteHost {

	Unknown = 0,

	Api = 1,

	Content = 2,

	Notify = 3
}

declare class DBRpcTask<TResponse, TError> extends DBTask {

	static alloc<TResponse, TError>(): DBRpcTask<TResponse, TError>; // inherited from NSObject

	static new<TResponse, TError>(): DBRpcTask<TResponse, TError>; // inherited from NSObject

	setProgressBlock(progressBlock: (p1: number, p2: number, p3: number) => void): DBRpcTask<any, any>;

	setProgressBlockQueue(progressBlock: (p1: number, p2: number, p3: number) => void, queue: NSOperationQueue): DBRpcTask<any, any>;

	setResponseBlock(responseBlock: (p1: TResponse, p2: TError, p3: DBRequestError) => void): DBRpcTask<TResponse, TError>;

	setResponseBlockQueue(responseBlock: (p1: TResponse, p2: TError, p3: DBRequestError) => void, queue: NSOperationQueue): DBRpcTask<TResponse, TError>;
}

declare class DBSDKKeychain extends NSObject {

	static alloc(): DBSDKKeychain; // inherited from NSObject

	static checkAndPerformV1TokenMigrationQueueAppKeyAppSecret(responseBlock: (p1: boolean, p2: boolean, p3: NSArray<NSArray<string>>) => void, queue: NSOperationQueue, appKey: string, appSecret: string): boolean;

	static clearAllTokens(): boolean;

	static deleteTokenWithKey(key: string): boolean;

	static new(): DBSDKKeychain; // inherited from NSObject

	static retrieveAllTokenIds(): NSArray<string>;

	static retrieveTokenWithKey(key: string): string;

	static storeValueWithKeyValue(key: string, value: string): boolean;
}

declare class DBSEENSTATEPlatformType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSEENSTATEPlatformType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSEENSTATEPlatformType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSEENSTATEPlatformTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { desktop: void; });

	constructor(o: { mobile: void; });

	constructor(o: { other: void; });

	constructor(o: { unknown: void; });

	constructor(o: { web: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDesktop(): this;

	initWithMobile(): this;

	initWithOther(): this;

	initWithUnknown(): this;

	initWithWeb(): this;

	isDesktop(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMobile(): boolean;

	isOther(): boolean;

	isUnknown(): boolean;

	isWeb(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSEENSTATEPlatformTypeSerializer extends NSObject {

	static alloc(): DBSEENSTATEPlatformTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSEENSTATEPlatformType;

	static new(): DBSEENSTATEPlatformTypeSerializer; // inherited from NSObject

	static serialize(instance: DBSEENSTATEPlatformType): NSDictionary<string, any>;
}

declare const enum DBSEENSTATEPlatformTypeTag {

	Web = 0,

	Mobile = 1,

	Desktop = 2,

	Unknown = 3,

	Other = 4
}

declare class DBSHARINGAccessInheritance extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAccessInheritance; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAccessInheritance; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGAccessInheritanceTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { inherit: void; });

	constructor(o: { noInherit: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInherit(): this;

	initWithNoInherit(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInherit(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoInherit(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGAccessInheritanceSerializer extends NSObject {

	static alloc(): DBSHARINGAccessInheritanceSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAccessInheritance;

	static new(): DBSHARINGAccessInheritanceSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAccessInheritance): NSDictionary<string, any>;
}

declare const enum DBSHARINGAccessInheritanceTag {

	Inherit = 0,

	NoInherit = 1,

	Other = 2
}

declare class DBSHARINGAccessLevel extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAccessLevel; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAccessLevel; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGAccessLevelTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { editor: void; });

	constructor(o: { other: void; });

	constructor(o: { owner: void; });

	constructor(o: { viewer: void; });

	constructor(o: { viewerNoComment: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEditor(): this;

	initWithOther(): this;

	initWithOwner(): this;

	initWithViewer(): this;

	initWithViewerNoComment(): this;

	isEditor(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isOwner(): boolean;

	isViewer(): boolean;

	isViewerNoComment(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGAccessLevelSerializer extends NSObject {

	static alloc(): DBSHARINGAccessLevelSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAccessLevel;

	static new(): DBSHARINGAccessLevelSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAccessLevel): NSDictionary<string, any>;
}

declare const enum DBSHARINGAccessLevelTag {

	Owner = 0,

	Editor = 1,

	Viewer = 2,

	ViewerNoComment = 3,

	Other = 4
}

declare class DBSHARINGAclUpdatePolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAclUpdatePolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAclUpdatePolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGAclUpdatePolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { editors: void; });

	constructor(o: { other: void; });

	constructor(o: { owner: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEditors(): this;

	initWithOther(): this;

	initWithOwner(): this;

	isEditors(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isOwner(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGAclUpdatePolicySerializer extends NSObject {

	static alloc(): DBSHARINGAclUpdatePolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAclUpdatePolicy;

	static new(): DBSHARINGAclUpdatePolicySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAclUpdatePolicy): NSDictionary<string, any>;
}

declare const enum DBSHARINGAclUpdatePolicyTag {

	Owner = 0,

	Editors = 1,

	Other = 2
}

declare class DBSHARINGAddFileMemberArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAddFileMemberArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAddFileMemberArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessLevel: DBSHARINGAccessLevel;

	readonly addMessageAsComment: number;

	readonly customMessage: string;

	readonly file: string;

	readonly members: NSArray<DBSHARINGMemberSelector>;

	readonly quiet: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; members: NSArray<DBSHARINGMemberSelector> | DBSHARINGMemberSelector[]; });

	constructor(o: { file: string; members: NSArray<DBSHARINGMemberSelector> | DBSHARINGMemberSelector[]; customMessage: string; quiet: number; accessLevel: DBSHARINGAccessLevel; addMessageAsComment: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFileMembers(file: string, members: NSArray<DBSHARINGMemberSelector> | DBSHARINGMemberSelector[]): this;

	initWithFileMembersCustomMessageQuietAccessLevelAddMessageAsComment(file: string, members: NSArray<DBSHARINGMemberSelector> | DBSHARINGMemberSelector[], customMessage: string, quiet: number, accessLevel: DBSHARINGAccessLevel, addMessageAsComment: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGAddFileMemberArgsSerializer extends NSObject {

	static alloc(): DBSHARINGAddFileMemberArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAddFileMemberArgs;

	static new(): DBSHARINGAddFileMemberArgsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAddFileMemberArgs): NSDictionary<string, any>;
}

declare class DBSHARINGAddFileMemberError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAddFileMemberError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAddFileMemberError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly tag: DBSHARINGAddFileMemberErrorTag;

	readonly userError: DBSHARINGSharingUserError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { invalidComment: void; });

	constructor(o: { other: void; });

	constructor(o: { rateLimit: void; });

	constructor(o: { userError: DBSHARINGSharingUserError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithInvalidComment(): this;

	initWithOther(): this;

	initWithRateLimit(): this;

	initWithUserError(userError: DBSHARINGSharingUserError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isInvalidComment(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRateLimit(): boolean;

	isUserError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGAddFileMemberErrorSerializer extends NSObject {

	static alloc(): DBSHARINGAddFileMemberErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAddFileMemberError;

	static new(): DBSHARINGAddFileMemberErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAddFileMemberError): NSDictionary<string, any>;
}

declare const enum DBSHARINGAddFileMemberErrorTag {

	UserError = 0,

	AccessError = 1,

	RateLimit = 2,

	InvalidComment = 3,

	Other = 4
}

declare class DBSHARINGAddFolderMemberArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAddFolderMemberArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAddFolderMemberArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly customMessage: string;

	readonly members: NSArray<DBSHARINGAddMember>;

	readonly quiet: number;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; members: NSArray<DBSHARINGAddMember> | DBSHARINGAddMember[]; });

	constructor(o: { sharedFolderId: string; members: NSArray<DBSHARINGAddMember> | DBSHARINGAddMember[]; quiet: number; customMessage: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderIdMembers(sharedFolderId: string, members: NSArray<DBSHARINGAddMember> | DBSHARINGAddMember[]): this;

	initWithSharedFolderIdMembersQuietCustomMessage(sharedFolderId: string, members: NSArray<DBSHARINGAddMember> | DBSHARINGAddMember[], quiet: number, customMessage: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGAddFolderMemberArgSerializer extends NSObject {

	static alloc(): DBSHARINGAddFolderMemberArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAddFolderMemberArg;

	static new(): DBSHARINGAddFolderMemberArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAddFolderMemberArg): NSDictionary<string, any>;
}

declare class DBSHARINGAddFolderMemberError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAddFolderMemberError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAddFolderMemberError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly badMember: DBSHARINGAddMemberSelectorError;

	readonly tag: DBSHARINGAddFolderMemberErrorTag;

	readonly tooManyMembers: number;

	readonly tooManyPendingInvites: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { badMember: DBSHARINGAddMemberSelectorError; });

	constructor(o: { cantShareOutsideTeam: void; });

	constructor(o: { emailUnverified: void; });

	constructor(o: { insufficientPlan: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	constructor(o: { rateLimit: void; });

	constructor(o: { teamFolder: void; });

	constructor(o: { tooManyInvitees: void; });

	constructor(o: { tooManyMembers: number; });

	constructor(o: { tooManyPendingInvites: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithBadMember(badMember: DBSHARINGAddMemberSelectorError): this;

	initWithCantShareOutsideTeam(): this;

	initWithEmailUnverified(): this;

	initWithInsufficientPlan(): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	initWithRateLimit(): this;

	initWithTeamFolder(): this;

	initWithTooManyInvitees(): this;

	initWithTooManyMembers(tooManyMembers: number): this;

	initWithTooManyPendingInvites(tooManyPendingInvites: number): this;

	isAccessError(): boolean;

	isBadMember(): boolean;

	isCantShareOutsideTeam(): boolean;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isInsufficientPlan(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	isRateLimit(): boolean;

	isTeamFolder(): boolean;

	isTooManyInvitees(): boolean;

	isTooManyMembers(): boolean;

	isTooManyPendingInvites(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGAddFolderMemberErrorSerializer extends NSObject {

	static alloc(): DBSHARINGAddFolderMemberErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAddFolderMemberError;

	static new(): DBSHARINGAddFolderMemberErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAddFolderMemberError): NSDictionary<string, any>;
}

declare const enum DBSHARINGAddFolderMemberErrorTag {

	AccessError = 0,

	EmailUnverified = 1,

	BadMember = 2,

	CantShareOutsideTeam = 3,

	TooManyMembers = 4,

	TooManyPendingInvites = 5,

	RateLimit = 6,

	TooManyInvitees = 7,

	InsufficientPlan = 8,

	TeamFolder = 9,

	NoPermission = 10,

	Other = 11
}

declare class DBSHARINGAddMember extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAddMember; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAddMember; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessLevel: DBSHARINGAccessLevel;

	readonly member: DBSHARINGMemberSelector;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { member: DBSHARINGMemberSelector; });

	constructor(o: { member: DBSHARINGMemberSelector; accessLevel: DBSHARINGAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMember(member: DBSHARINGMemberSelector): this;

	initWithMemberAccessLevel(member: DBSHARINGMemberSelector, accessLevel: DBSHARINGAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGAddMemberSelectorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAddMemberSelectorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAddMemberSelectorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invalidDropboxId: string;

	readonly invalidEmail: string;

	readonly tag: DBSHARINGAddMemberSelectorErrorTag;

	readonly unverifiedDropboxId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { automaticGroup: void; });

	constructor(o: { groupDeleted: void; });

	constructor(o: { groupNotOnTeam: void; });

	constructor(o: { invalidDropboxId: string; });

	constructor(o: { invalidEmail: string; });

	constructor(o: { other: void; });

	constructor(o: { unverifiedDropboxId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAutomaticGroup(): this;

	initWithGroupDeleted(): this;

	initWithGroupNotOnTeam(): this;

	initWithInvalidDropboxId(invalidDropboxId: string): this;

	initWithInvalidEmail(invalidEmail: string): this;

	initWithOther(): this;

	initWithUnverifiedDropboxId(unverifiedDropboxId: string): this;

	isAutomaticGroup(): boolean;

	isEqual(object: any): boolean;

	isGroupDeleted(): boolean;

	isGroupNotOnTeam(): boolean;

	isInvalidDropboxId(): boolean;

	isInvalidEmail(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUnverifiedDropboxId(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGAddMemberSelectorErrorSerializer extends NSObject {

	static alloc(): DBSHARINGAddMemberSelectorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAddMemberSelectorError;

	static new(): DBSHARINGAddMemberSelectorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAddMemberSelectorError): NSDictionary<string, any>;
}

declare const enum DBSHARINGAddMemberSelectorErrorTag {

	AutomaticGroup = 0,

	InvalidDropboxId = 1,

	InvalidEmail = 2,

	UnverifiedDropboxId = 3,

	GroupDeleted = 4,

	GroupNotOnTeam = 5,

	Other = 6
}

declare class DBSHARINGAddMemberSerializer extends NSObject {

	static alloc(): DBSHARINGAddMemberSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAddMember;

	static new(): DBSHARINGAddMemberSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAddMember): NSDictionary<string, any>;
}

declare class DBSHARINGAudienceExceptionContentInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAudienceExceptionContentInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAudienceExceptionContentInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly name: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithName(name: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGAudienceExceptionContentInfoSerializer extends NSObject {

	static alloc(): DBSHARINGAudienceExceptionContentInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAudienceExceptionContentInfo;

	static new(): DBSHARINGAudienceExceptionContentInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAudienceExceptionContentInfo): NSDictionary<string, any>;
}

declare class DBSHARINGAudienceExceptions extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAudienceExceptions; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAudienceExceptions; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly count: number;

	readonly exceptions: NSArray<DBSHARINGAudienceExceptionContentInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { count: number; exceptions: NSArray<DBSHARINGAudienceExceptionContentInfo> | DBSHARINGAudienceExceptionContentInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCountExceptions(count: number, exceptions: NSArray<DBSHARINGAudienceExceptionContentInfo> | DBSHARINGAudienceExceptionContentInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGAudienceExceptionsSerializer extends NSObject {

	static alloc(): DBSHARINGAudienceExceptionsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAudienceExceptions;

	static new(): DBSHARINGAudienceExceptionsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAudienceExceptions): NSDictionary<string, any>;
}

declare class DBSHARINGAudienceRestrictingSharedFolder extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGAudienceRestrictingSharedFolder; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGAudienceRestrictingSharedFolder; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly audience: DBSHARINGLinkAudience;

	readonly name: string;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; name: string; audience: DBSHARINGLinkAudience; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderIdNameAudience(sharedFolderId: string, name: string, audience: DBSHARINGLinkAudience): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGAudienceRestrictingSharedFolderSerializer extends NSObject {

	static alloc(): DBSHARINGAudienceRestrictingSharedFolderSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGAudienceRestrictingSharedFolder;

	static new(): DBSHARINGAudienceRestrictingSharedFolderSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGAudienceRestrictingSharedFolder): NSDictionary<string, any>;
}

declare class DBSHARINGChangeFileMemberAccessArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGChangeFileMemberAccessArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGChangeFileMemberAccessArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessLevel: DBSHARINGAccessLevel;

	readonly file: string;

	readonly member: DBSHARINGMemberSelector;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; member: DBSHARINGMemberSelector; accessLevel: DBSHARINGAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFileMemberAccessLevel(file: string, member: DBSHARINGMemberSelector, accessLevel: DBSHARINGAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGChangeFileMemberAccessArgsSerializer extends NSObject {

	static alloc(): DBSHARINGChangeFileMemberAccessArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGChangeFileMemberAccessArgs;

	static new(): DBSHARINGChangeFileMemberAccessArgsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGChangeFileMemberAccessArgs): NSDictionary<string, any>;
}

declare class DBSHARINGCollectionLinkMetadata extends DBSHARINGLinkMetadata implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGCollectionLinkMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGCollectionLinkMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGCollectionLinkMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGCollectionLinkMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGCollectionLinkMetadata;

	static new(): DBSHARINGCollectionLinkMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGCollectionLinkMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGCreateSharedLinkArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGCreateSharedLinkArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGCreateSharedLinkArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly pendingUpload: DBSHARINGPendingUploadMode;

	readonly shortUrl: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; shortUrl: number; pendingUpload: DBSHARINGPendingUploadMode; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathShortUrlPendingUpload(path: string, shortUrl: number, pendingUpload: DBSHARINGPendingUploadMode): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGCreateSharedLinkArgSerializer extends NSObject {

	static alloc(): DBSHARINGCreateSharedLinkArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGCreateSharedLinkArg;

	static new(): DBSHARINGCreateSharedLinkArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGCreateSharedLinkArg): NSDictionary<string, any>;
}

declare class DBSHARINGCreateSharedLinkError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGCreateSharedLinkError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGCreateSharedLinkError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBSHARINGCreateSharedLinkErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGCreateSharedLinkErrorSerializer extends NSObject {

	static alloc(): DBSHARINGCreateSharedLinkErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGCreateSharedLinkError;

	static new(): DBSHARINGCreateSharedLinkErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGCreateSharedLinkError): NSDictionary<string, any>;
}

declare const enum DBSHARINGCreateSharedLinkErrorTag {

	Path = 0,

	Other = 1
}

declare class DBSHARINGCreateSharedLinkWithSettingsArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGCreateSharedLinkWithSettingsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGCreateSharedLinkWithSettingsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly settings: DBSHARINGSharedLinkSettings;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; settings: DBSHARINGSharedLinkSettings; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathSettings(path: string, settings: DBSHARINGSharedLinkSettings): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGCreateSharedLinkWithSettingsArgSerializer extends NSObject {

	static alloc(): DBSHARINGCreateSharedLinkWithSettingsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGCreateSharedLinkWithSettingsArg;

	static new(): DBSHARINGCreateSharedLinkWithSettingsArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGCreateSharedLinkWithSettingsArg): NSDictionary<string, any>;
}

declare class DBSHARINGCreateSharedLinkWithSettingsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGCreateSharedLinkWithSettingsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGCreateSharedLinkWithSettingsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly settingsError: DBSHARINGSharedLinkSettingsError;

	readonly tag: DBSHARINGCreateSharedLinkWithSettingsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessDenied: void; });

	constructor(o: { emailNotVerified: void; });

	constructor(o: { path: DBFILESLookupError; });

	constructor(o: { settingsError: DBSHARINGSharedLinkSettingsError; });

	constructor(o: { sharedLinkAlreadyExists: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessDenied(): this;

	initWithEmailNotVerified(): this;

	initWithPath(path: DBFILESLookupError): this;

	initWithSettingsError(settingsError: DBSHARINGSharedLinkSettingsError): this;

	initWithSharedLinkAlreadyExists(): this;

	isAccessDenied(): boolean;

	isEmailNotVerified(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPath(): boolean;

	isSettingsError(): boolean;

	isSharedLinkAlreadyExists(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGCreateSharedLinkWithSettingsErrorSerializer extends NSObject {

	static alloc(): DBSHARINGCreateSharedLinkWithSettingsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGCreateSharedLinkWithSettingsError;

	static new(): DBSHARINGCreateSharedLinkWithSettingsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGCreateSharedLinkWithSettingsError): NSDictionary<string, any>;
}

declare const enum DBSHARINGCreateSharedLinkWithSettingsErrorTag {

	Path = 0,

	EmailNotVerified = 1,

	SharedLinkAlreadyExists = 2,

	SettingsError = 3,

	AccessDenied = 4
}

declare class DBSHARINGExpectedSharedContentLinkMetadata extends DBSHARINGSharedContentLinkMetadataBase implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGExpectedSharedContentLinkMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGExpectedSharedContentLinkMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGExpectedSharedContentLinkMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGExpectedSharedContentLinkMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGExpectedSharedContentLinkMetadata;

	static new(): DBSHARINGExpectedSharedContentLinkMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGExpectedSharedContentLinkMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGFileAction extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFileAction; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFileAction; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGFileActionTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { createLink: void; });

	constructor(o: { disableViewerInfo: void; });

	constructor(o: { editContents: void; });

	constructor(o: { enableViewerInfo: void; });

	constructor(o: { inviteEditor: void; });

	constructor(o: { inviteViewer: void; });

	constructor(o: { inviteViewerNoComment: void; });

	constructor(o: { other: void; });

	constructor(o: { relinquishMembership: void; });

	constructor(o: { shareLink: void; });

	constructor(o: { unshare: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCreateLink(): this;

	initWithDisableViewerInfo(): this;

	initWithEditContents(): this;

	initWithEnableViewerInfo(): this;

	initWithInviteEditor(): this;

	initWithInviteViewer(): this;

	initWithInviteViewerNoComment(): this;

	initWithOther(): this;

	initWithRelinquishMembership(): this;

	initWithShareLink(): this;

	initWithUnshare(): this;

	isCreateLink(): boolean;

	isDisableViewerInfo(): boolean;

	isEditContents(): boolean;

	isEnableViewerInfo(): boolean;

	isEqual(object: any): boolean;

	isInviteEditor(): boolean;

	isInviteViewer(): boolean;

	isInviteViewerNoComment(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRelinquishMembership(): boolean;

	isShareLink(): boolean;

	isUnshare(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGFileActionSerializer extends NSObject {

	static alloc(): DBSHARINGFileActionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFileAction;

	static new(): DBSHARINGFileActionSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFileAction): NSDictionary<string, any>;
}

declare const enum DBSHARINGFileActionTag {

	DisableViewerInfo = 0,

	EditContents = 1,

	EnableViewerInfo = 2,

	InviteViewer = 3,

	InviteViewerNoComment = 4,

	InviteEditor = 5,

	Unshare = 6,

	RelinquishMembership = 7,

	ShareLink = 8,

	CreateLink = 9,

	Other = 10
}

declare class DBSHARINGFileErrorResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFileErrorResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFileErrorResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fileNotFoundError: string;

	readonly invalidFileActionError: string;

	readonly permissionDeniedError: string;

	readonly tag: DBSHARINGFileErrorResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { fileNotFoundError: string; });

	constructor(o: { invalidFileActionError: string; });

	constructor(o: { other: void; });

	constructor(o: { permissionDeniedError: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFileNotFoundError(fileNotFoundError: string): this;

	initWithInvalidFileActionError(invalidFileActionError: string): this;

	initWithOther(): this;

	initWithPermissionDeniedError(permissionDeniedError: string): this;

	isEqual(object: any): boolean;

	isFileNotFoundError(): boolean;

	isInvalidFileActionError(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPermissionDeniedError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGFileErrorResultSerializer extends NSObject {

	static alloc(): DBSHARINGFileErrorResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFileErrorResult;

	static new(): DBSHARINGFileErrorResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFileErrorResult): NSDictionary<string, any>;
}

declare const enum DBSHARINGFileErrorResultTag {

	FileNotFoundError = 0,

	InvalidFileActionError = 1,

	PermissionDeniedError = 2,

	Other = 3
}

declare class DBSHARINGFileLinkMetadata extends DBSHARINGSharedLinkMetadata implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFileLinkMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFileLinkMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly clientModified: Date;

	readonly rev: string;

	readonly serverModified: Date;

	readonly size: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: string; name: string; linkPermissions: DBSHARINGLinkPermissions; clientModified: Date; serverModified: Date; rev: string; size: number; });

	constructor(o: { url: string; name: string; linkPermissions: DBSHARINGLinkPermissions; clientModified: Date; serverModified: Date; rev: string; size: number; id_: string; expires: Date; pathLower: string; teamMemberInfo: DBSHARINGTeamMemberInfo; contentOwnerTeamInfo: DBUSERSTeam; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUrlNameLinkPermissionsClientModifiedServerModifiedRevSize(url: string, name: string, linkPermissions: DBSHARINGLinkPermissions, clientModified: Date, serverModified: Date, rev: string, size: number): this;

	initWithUrlNameLinkPermissionsClientModifiedServerModifiedRevSizeId_ExpiresPathLowerTeamMemberInfoContentOwnerTeamInfo(url: string, name: string, linkPermissions: DBSHARINGLinkPermissions, clientModified: Date, serverModified: Date, rev: string, size: number, id_: string, expires: Date, pathLower: string, teamMemberInfo: DBSHARINGTeamMemberInfo, contentOwnerTeamInfo: DBUSERSTeam): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGFileLinkMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGFileLinkMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFileLinkMetadata;

	static new(): DBSHARINGFileLinkMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFileLinkMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGFileMemberActionError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFileMemberActionError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFileMemberActionError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly noExplicitAccess: DBSHARINGMemberAccessLevelResult;

	readonly tag: DBSHARINGFileMemberActionErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { invalidMember: void; });

	constructor(o: { noExplicitAccess: DBSHARINGMemberAccessLevelResult; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithInvalidMember(): this;

	initWithNoExplicitAccess(noExplicitAccess: DBSHARINGMemberAccessLevelResult): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isInvalidMember(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoExplicitAccess(): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGFileMemberActionErrorSerializer extends NSObject {

	static alloc(): DBSHARINGFileMemberActionErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFileMemberActionError;

	static new(): DBSHARINGFileMemberActionErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFileMemberActionError): NSDictionary<string, any>;
}

declare const enum DBSHARINGFileMemberActionErrorTag {

	InvalidMember = 0,

	NoPermission = 1,

	AccessError = 2,

	NoExplicitAccess = 3,

	Other = 4
}

declare class DBSHARINGFileMemberActionIndividualResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFileMemberActionIndividualResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFileMemberActionIndividualResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly memberError: DBSHARINGFileMemberActionError;

	readonly success: DBSHARINGAccessLevel;

	readonly tag: DBSHARINGFileMemberActionIndividualResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { memberError: DBSHARINGFileMemberActionError; });

	constructor(o: { success: DBSHARINGAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMemberError(memberError: DBSHARINGFileMemberActionError): this;

	initWithSuccess(success: DBSHARINGAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberError(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGFileMemberActionIndividualResultSerializer extends NSObject {

	static alloc(): DBSHARINGFileMemberActionIndividualResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFileMemberActionIndividualResult;

	static new(): DBSHARINGFileMemberActionIndividualResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFileMemberActionIndividualResult): NSDictionary<string, any>;
}

declare const enum DBSHARINGFileMemberActionIndividualResultTag {

	Success = 0,

	MemberError = 1
}

declare class DBSHARINGFileMemberActionResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFileMemberActionResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFileMemberActionResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly member: DBSHARINGMemberSelector;

	readonly result: DBSHARINGFileMemberActionIndividualResult;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { member: DBSHARINGMemberSelector; result: DBSHARINGFileMemberActionIndividualResult; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMemberResult(member: DBSHARINGMemberSelector, result: DBSHARINGFileMemberActionIndividualResult): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGFileMemberActionResultSerializer extends NSObject {

	static alloc(): DBSHARINGFileMemberActionResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFileMemberActionResult;

	static new(): DBSHARINGFileMemberActionResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFileMemberActionResult): NSDictionary<string, any>;
}

declare class DBSHARINGFileMemberRemoveActionResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFileMemberRemoveActionResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFileMemberRemoveActionResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly memberError: DBSHARINGFileMemberActionError;

	readonly success: DBSHARINGMemberAccessLevelResult;

	readonly tag: DBSHARINGFileMemberRemoveActionResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { memberError: DBSHARINGFileMemberActionError; });

	constructor(o: { other: void; });

	constructor(o: { success: DBSHARINGMemberAccessLevelResult; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMemberError(memberError: DBSHARINGFileMemberActionError): this;

	initWithOther(): this;

	initWithSuccess(success: DBSHARINGMemberAccessLevelResult): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberError(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGFileMemberRemoveActionResultSerializer extends NSObject {

	static alloc(): DBSHARINGFileMemberRemoveActionResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFileMemberRemoveActionResult;

	static new(): DBSHARINGFileMemberRemoveActionResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFileMemberRemoveActionResult): NSDictionary<string, any>;
}

declare const enum DBSHARINGFileMemberRemoveActionResultTag {

	Success = 0,

	MemberError = 1,

	Other = 2
}

declare class DBSHARINGFilePermission extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFilePermission; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFilePermission; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly action: DBSHARINGFileAction;

	readonly allow: number;

	readonly reason: DBSHARINGPermissionDeniedReason;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { action: DBSHARINGFileAction; allow: number; });

	constructor(o: { action: DBSHARINGFileAction; allow: number; reason: DBSHARINGPermissionDeniedReason; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActionAllow(action: DBSHARINGFileAction, allow: number): this;

	initWithActionAllowReason(action: DBSHARINGFileAction, allow: number, reason: DBSHARINGPermissionDeniedReason): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGFilePermissionSerializer extends NSObject {

	static alloc(): DBSHARINGFilePermissionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFilePermission;

	static new(): DBSHARINGFilePermissionSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFilePermission): NSDictionary<string, any>;
}

declare class DBSHARINGFolderAction extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFolderAction; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFolderAction; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGFolderActionTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { changeOptions: void; });

	constructor(o: { createLink: void; });

	constructor(o: { disableViewerInfo: void; });

	constructor(o: { editContents: void; });

	constructor(o: { enableViewerInfo: void; });

	constructor(o: { inviteEditor: void; });

	constructor(o: { inviteViewer: void; });

	constructor(o: { inviteViewerNoComment: void; });

	constructor(o: { leaveACopy: void; });

	constructor(o: { other: void; });

	constructor(o: { relinquishMembership: void; });

	constructor(o: { setAccessInheritance: void; });

	constructor(o: { shareLink: void; });

	constructor(o: { unmount: void; });

	constructor(o: { unshare: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithChangeOptions(): this;

	initWithCreateLink(): this;

	initWithDisableViewerInfo(): this;

	initWithEditContents(): this;

	initWithEnableViewerInfo(): this;

	initWithInviteEditor(): this;

	initWithInviteViewer(): this;

	initWithInviteViewerNoComment(): this;

	initWithLeaveACopy(): this;

	initWithOther(): this;

	initWithRelinquishMembership(): this;

	initWithSetAccessInheritance(): this;

	initWithShareLink(): this;

	initWithUnmount(): this;

	initWithUnshare(): this;

	isChangeOptions(): boolean;

	isCreateLink(): boolean;

	isDisableViewerInfo(): boolean;

	isEditContents(): boolean;

	isEnableViewerInfo(): boolean;

	isEqual(object: any): boolean;

	isInviteEditor(): boolean;

	isInviteViewer(): boolean;

	isInviteViewerNoComment(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLeaveACopy(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRelinquishMembership(): boolean;

	isSetAccessInheritance(): boolean;

	isShareLink(): boolean;

	isUnmount(): boolean;

	isUnshare(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGFolderActionSerializer extends NSObject {

	static alloc(): DBSHARINGFolderActionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFolderAction;

	static new(): DBSHARINGFolderActionSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFolderAction): NSDictionary<string, any>;
}

declare const enum DBSHARINGFolderActionTag {

	ChangeOptions = 0,

	DisableViewerInfo = 1,

	EditContents = 2,

	EnableViewerInfo = 3,

	InviteEditor = 4,

	InviteViewer = 5,

	InviteViewerNoComment = 6,

	RelinquishMembership = 7,

	Unmount = 8,

	Unshare = 9,

	LeaveACopy = 10,

	ShareLink = 11,

	CreateLink = 12,

	SetAccessInheritance = 13,

	Other = 14
}

declare class DBSHARINGFolderLinkMetadata extends DBSHARINGSharedLinkMetadata implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFolderLinkMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFolderLinkMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGFolderLinkMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGFolderLinkMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFolderLinkMetadata;

	static new(): DBSHARINGFolderLinkMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFolderLinkMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGFolderPermission extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFolderPermission; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFolderPermission; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly action: DBSHARINGFolderAction;

	readonly allow: number;

	readonly reason: DBSHARINGPermissionDeniedReason;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { action: DBSHARINGFolderAction; allow: number; });

	constructor(o: { action: DBSHARINGFolderAction; allow: number; reason: DBSHARINGPermissionDeniedReason; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActionAllow(action: DBSHARINGFolderAction, allow: number): this;

	initWithActionAllowReason(action: DBSHARINGFolderAction, allow: number, reason: DBSHARINGPermissionDeniedReason): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGFolderPermissionSerializer extends NSObject {

	static alloc(): DBSHARINGFolderPermissionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFolderPermission;

	static new(): DBSHARINGFolderPermissionSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFolderPermission): NSDictionary<string, any>;
}

declare class DBSHARINGFolderPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGFolderPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGFolderPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly aclUpdatePolicy: DBSHARINGAclUpdatePolicy;

	readonly memberPolicy: DBSHARINGMemberPolicy;

	readonly resolvedMemberPolicy: DBSHARINGMemberPolicy;

	readonly sharedLinkPolicy: DBSHARINGSharedLinkPolicy;

	readonly viewerInfoPolicy: DBSHARINGViewerInfoPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { aclUpdatePolicy: DBSHARINGAclUpdatePolicy; sharedLinkPolicy: DBSHARINGSharedLinkPolicy; });

	constructor(o: { aclUpdatePolicy: DBSHARINGAclUpdatePolicy; sharedLinkPolicy: DBSHARINGSharedLinkPolicy; memberPolicy: DBSHARINGMemberPolicy; resolvedMemberPolicy: DBSHARINGMemberPolicy; viewerInfoPolicy: DBSHARINGViewerInfoPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAclUpdatePolicySharedLinkPolicy(aclUpdatePolicy: DBSHARINGAclUpdatePolicy, sharedLinkPolicy: DBSHARINGSharedLinkPolicy): this;

	initWithAclUpdatePolicySharedLinkPolicyMemberPolicyResolvedMemberPolicyViewerInfoPolicy(aclUpdatePolicy: DBSHARINGAclUpdatePolicy, sharedLinkPolicy: DBSHARINGSharedLinkPolicy, memberPolicy: DBSHARINGMemberPolicy, resolvedMemberPolicy: DBSHARINGMemberPolicy, viewerInfoPolicy: DBSHARINGViewerInfoPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGFolderPolicySerializer extends NSObject {

	static alloc(): DBSHARINGFolderPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGFolderPolicy;

	static new(): DBSHARINGFolderPolicySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGFolderPolicy): NSDictionary<string, any>;
}

declare class DBSHARINGGetFileMetadataArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetFileMetadataArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetFileMetadataArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actions: NSArray<DBSHARINGFileAction>;

	readonly file: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; });

	constructor(o: { file: string; actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFile(file: string): this;

	initWithFileActions(file: string, actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGetFileMetadataArgSerializer extends NSObject {

	static alloc(): DBSHARINGGetFileMetadataArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetFileMetadataArg;

	static new(): DBSHARINGGetFileMetadataArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetFileMetadataArg): NSDictionary<string, any>;
}

declare class DBSHARINGGetFileMetadataBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetFileMetadataBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetFileMetadataBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actions: NSArray<DBSHARINGFileAction>;

	readonly files: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { files: NSArray<string> | string[]; });

	constructor(o: { files: NSArray<string> | string[]; actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFiles(files: NSArray<string> | string[]): this;

	initWithFilesActions(files: NSArray<string> | string[], actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGetFileMetadataBatchArgSerializer extends NSObject {

	static alloc(): DBSHARINGGetFileMetadataBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetFileMetadataBatchArg;

	static new(): DBSHARINGGetFileMetadataBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetFileMetadataBatchArg): NSDictionary<string, any>;
}

declare class DBSHARINGGetFileMetadataBatchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetFileMetadataBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetFileMetadataBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly file: string;

	readonly result: DBSHARINGGetFileMetadataIndividualResult;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; result: DBSHARINGGetFileMetadataIndividualResult; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFileResult(file: string, result: DBSHARINGGetFileMetadataIndividualResult): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGetFileMetadataBatchResultSerializer extends NSObject {

	static alloc(): DBSHARINGGetFileMetadataBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetFileMetadataBatchResult;

	static new(): DBSHARINGGetFileMetadataBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetFileMetadataBatchResult): NSDictionary<string, any>;
}

declare class DBSHARINGGetFileMetadataError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetFileMetadataError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetFileMetadataError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly tag: DBSHARINGGetFileMetadataErrorTag;

	readonly userError: DBSHARINGSharingUserError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { other: void; });

	constructor(o: { userError: DBSHARINGSharingUserError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithOther(): this;

	initWithUserError(userError: DBSHARINGSharingUserError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUserError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGGetFileMetadataErrorSerializer extends NSObject {

	static alloc(): DBSHARINGGetFileMetadataErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetFileMetadataError;

	static new(): DBSHARINGGetFileMetadataErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetFileMetadataError): NSDictionary<string, any>;
}

declare const enum DBSHARINGGetFileMetadataErrorTag {

	UserError = 0,

	AccessError = 1,

	Other = 2
}

declare class DBSHARINGGetFileMetadataIndividualResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetFileMetadataIndividualResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetFileMetadataIndividualResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly metadata: DBSHARINGSharedFileMetadata;

	readonly tag: DBSHARINGGetFileMetadataIndividualResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { metadata: DBSHARINGSharedFileMetadata; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithMetadata(metadata: DBSHARINGSharedFileMetadata): this;

	initWithOther(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMetadata(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGGetFileMetadataIndividualResultSerializer extends NSObject {

	static alloc(): DBSHARINGGetFileMetadataIndividualResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetFileMetadataIndividualResult;

	static new(): DBSHARINGGetFileMetadataIndividualResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetFileMetadataIndividualResult): NSDictionary<string, any>;
}

declare const enum DBSHARINGGetFileMetadataIndividualResultTag {

	Metadata = 0,

	AccessError = 1,

	Other = 2
}

declare class DBSHARINGGetMetadataArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetMetadataArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetMetadataArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actions: NSArray<DBSHARINGFolderAction>;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; });

	constructor(o: { sharedFolderId: string; actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderId(sharedFolderId: string): this;

	initWithSharedFolderIdActions(sharedFolderId: string, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGetMetadataArgsSerializer extends NSObject {

	static alloc(): DBSHARINGGetMetadataArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetMetadataArgs;

	static new(): DBSHARINGGetMetadataArgsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetMetadataArgs): NSDictionary<string, any>;
}

declare class DBSHARINGGetSharedLinkFileError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetSharedLinkFileError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetSharedLinkFileError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGGetSharedLinkFileErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { sharedLinkAccessDenied: void; });

	constructor(o: { sharedLinkIsDirectory: void; });

	constructor(o: { sharedLinkNotFound: void; });

	constructor(o: { unsupportedLinkType: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithSharedLinkAccessDenied(): this;

	initWithSharedLinkIsDirectory(): this;

	initWithSharedLinkNotFound(): this;

	initWithUnsupportedLinkType(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSharedLinkAccessDenied(): boolean;

	isSharedLinkIsDirectory(): boolean;

	isSharedLinkNotFound(): boolean;

	isUnsupportedLinkType(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGGetSharedLinkFileErrorSerializer extends NSObject {

	static alloc(): DBSHARINGGetSharedLinkFileErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetSharedLinkFileError;

	static new(): DBSHARINGGetSharedLinkFileErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetSharedLinkFileError): NSDictionary<string, any>;
}

declare const enum DBSHARINGGetSharedLinkFileErrorTag {

	SharedLinkNotFound = 0,

	SharedLinkAccessDenied = 1,

	UnsupportedLinkType = 2,

	Other = 3,

	SharedLinkIsDirectory = 4
}

declare class DBSHARINGGetSharedLinkMetadataArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetSharedLinkMetadataArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetSharedLinkMetadataArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly linkPassword: string;

	readonly path: string;

	readonly url: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: string; });

	constructor(o: { url: string; path: string; linkPassword: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUrl(url: string): this;

	initWithUrlPathLinkPassword(url: string, path: string, linkPassword: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGetSharedLinkMetadataArgSerializer extends NSObject {

	static alloc(): DBSHARINGGetSharedLinkMetadataArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetSharedLinkMetadataArg;

	static new(): DBSHARINGGetSharedLinkMetadataArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetSharedLinkMetadataArg): NSDictionary<string, any>;
}

declare class DBSHARINGGetSharedLinksArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetSharedLinksArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetSharedLinksArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { path: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithPath(path: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGetSharedLinksArgSerializer extends NSObject {

	static alloc(): DBSHARINGGetSharedLinksArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetSharedLinksArg;

	static new(): DBSHARINGGetSharedLinksArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetSharedLinksArg): NSDictionary<string, any>;
}

declare class DBSHARINGGetSharedLinksError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetSharedLinksError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetSharedLinksError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly tag: DBSHARINGGetSharedLinksErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGGetSharedLinksErrorSerializer extends NSObject {

	static alloc(): DBSHARINGGetSharedLinksErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetSharedLinksError;

	static new(): DBSHARINGGetSharedLinksErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetSharedLinksError): NSDictionary<string, any>;
}

declare const enum DBSHARINGGetSharedLinksErrorTag {

	Path = 0,

	Other = 1
}

declare class DBSHARINGGetSharedLinksResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGetSharedLinksResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGetSharedLinksResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly links: NSArray<DBSHARINGLinkMetadata>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { links: NSArray<DBSHARINGLinkMetadata> | DBSHARINGLinkMetadata[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLinks(links: NSArray<DBSHARINGLinkMetadata> | DBSHARINGLinkMetadata[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGetSharedLinksResultSerializer extends NSObject {

	static alloc(): DBSHARINGGetSharedLinksResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGetSharedLinksResult;

	static new(): DBSHARINGGetSharedLinksResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGetSharedLinksResult): NSDictionary<string, any>;
}

declare class DBSHARINGGroupInfo extends DBTEAMCOMMONGroupSummary implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGroupInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGroupInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly groupType: DBTEAMCOMMONGroupType;

	readonly isMember: number;

	readonly isOwner: number;

	readonly sameTeam: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupName: string; groupId: string; groupManagementType: DBTEAMCOMMONGroupManagementType; groupType: DBTEAMCOMMONGroupType; isMember: number; isOwner: number; sameTeam: number; });

	constructor(o: { groupName: string; groupId: string; groupManagementType: DBTEAMCOMMONGroupManagementType; groupType: DBTEAMCOMMONGroupType; isMember: number; isOwner: number; sameTeam: number; groupExternalId: string; memberCount: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNameGroupIdGroupManagementTypeGroupTypeIsMemberIsOwnerSameTeam(groupName: string, groupId: string, groupManagementType: DBTEAMCOMMONGroupManagementType, groupType: DBTEAMCOMMONGroupType, isMember: number, isOwner: number, sameTeam: number): this;

	initWithGroupNameGroupIdGroupManagementTypeGroupTypeIsMemberIsOwnerSameTeamGroupExternalIdMemberCount(groupName: string, groupId: string, groupManagementType: DBTEAMCOMMONGroupManagementType, groupType: DBTEAMCOMMONGroupType, isMember: number, isOwner: number, sameTeam: number, groupExternalId: string, memberCount: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGroupInfoSerializer extends NSObject {

	static alloc(): DBSHARINGGroupInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGroupInfo;

	static new(): DBSHARINGGroupInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGroupInfo): NSDictionary<string, any>;
}

declare class DBSHARINGGroupMembershipInfo extends DBSHARINGMembershipInfo implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGGroupMembershipInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGGroupMembershipInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly group: DBSHARINGGroupInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessType: DBSHARINGAccessLevel; group: DBSHARINGGroupInfo; });

	constructor(o: { accessType: DBSHARINGAccessLevel; group: DBSHARINGGroupInfo; permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[]; initials: string; isInherited: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessTypeGroup(accessType: DBSHARINGAccessLevel, group: DBSHARINGGroupInfo): this;

	initWithAccessTypeGroupPermissionsInitialsIsInherited(accessType: DBSHARINGAccessLevel, group: DBSHARINGGroupInfo, permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[], initials: string, isInherited: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGGroupMembershipInfoSerializer extends NSObject {

	static alloc(): DBSHARINGGroupMembershipInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGGroupMembershipInfo;

	static new(): DBSHARINGGroupMembershipInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGGroupMembershipInfo): NSDictionary<string, any>;
}

declare class DBSHARINGInsufficientPlan extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGInsufficientPlan; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGInsufficientPlan; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly message: string;

	readonly upsellUrl: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { message: string; });

	constructor(o: { message: string; upsellUrl: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMessage(message: string): this;

	initWithMessageUpsellUrl(message: string, upsellUrl: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGInsufficientPlanSerializer extends NSObject {

	static alloc(): DBSHARINGInsufficientPlanSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGInsufficientPlan;

	static new(): DBSHARINGInsufficientPlanSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGInsufficientPlan): NSDictionary<string, any>;
}

declare class DBSHARINGInsufficientQuotaAmounts extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGInsufficientQuotaAmounts; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGInsufficientQuotaAmounts; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly spaceLeft: number;

	readonly spaceNeeded: number;

	readonly spaceShortage: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { spaceNeeded: number; spaceShortage: number; spaceLeft: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSpaceNeededSpaceShortageSpaceLeft(spaceNeeded: number, spaceShortage: number, spaceLeft: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGInsufficientQuotaAmountsSerializer extends NSObject {

	static alloc(): DBSHARINGInsufficientQuotaAmountsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGInsufficientQuotaAmounts;

	static new(): DBSHARINGInsufficientQuotaAmountsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGInsufficientQuotaAmounts): NSDictionary<string, any>;
}

declare class DBSHARINGInviteeInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGInviteeInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGInviteeInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly email: string;

	readonly tag: DBSHARINGInviteeInfoTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { email: string; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmail(email: string): this;

	initWithOther(): this;

	isEmail(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGInviteeInfoSerializer extends NSObject {

	static alloc(): DBSHARINGInviteeInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGInviteeInfo;

	static new(): DBSHARINGInviteeInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGInviteeInfo): NSDictionary<string, any>;
}

declare const enum DBSHARINGInviteeInfoTag {

	Email = 0,

	Other = 1
}

declare class DBSHARINGInviteeMembershipInfo extends DBSHARINGMembershipInfo implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGInviteeMembershipInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGInviteeMembershipInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invitee: DBSHARINGInviteeInfo;

	readonly user: DBSHARINGUserInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessType: DBSHARINGAccessLevel; invitee: DBSHARINGInviteeInfo; });

	constructor(o: { accessType: DBSHARINGAccessLevel; invitee: DBSHARINGInviteeInfo; permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[]; initials: string; isInherited: number; user: DBSHARINGUserInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessTypeInvitee(accessType: DBSHARINGAccessLevel, invitee: DBSHARINGInviteeInfo): this;

	initWithAccessTypeInviteePermissionsInitialsIsInheritedUser(accessType: DBSHARINGAccessLevel, invitee: DBSHARINGInviteeInfo, permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[], initials: string, isInherited: number, user: DBSHARINGUserInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGInviteeMembershipInfoSerializer extends NSObject {

	static alloc(): DBSHARINGInviteeMembershipInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGInviteeMembershipInfo;

	static new(): DBSHARINGInviteeMembershipInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGInviteeMembershipInfo): NSDictionary<string, any>;
}

declare class DBSHARINGJobError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGJobError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGJobError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly relinquishFolderMembershipError: DBSHARINGRelinquishFolderMembershipError;

	readonly removeFolderMemberError: DBSHARINGRemoveFolderMemberError;

	readonly tag: DBSHARINGJobErrorTag;

	readonly unshareFolderError: DBSHARINGUnshareFolderError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { relinquishFolderMembershipError: DBSHARINGRelinquishFolderMembershipError; });

	constructor(o: { removeFolderMemberError: DBSHARINGRemoveFolderMemberError; });

	constructor(o: { unshareFolderError: DBSHARINGUnshareFolderError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithRelinquishFolderMembershipError(relinquishFolderMembershipError: DBSHARINGRelinquishFolderMembershipError): this;

	initWithRemoveFolderMemberError(removeFolderMemberError: DBSHARINGRemoveFolderMemberError): this;

	initWithUnshareFolderError(unshareFolderError: DBSHARINGUnshareFolderError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRelinquishFolderMembershipError(): boolean;

	isRemoveFolderMemberError(): boolean;

	isUnshareFolderError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGJobErrorSerializer extends NSObject {

	static alloc(): DBSHARINGJobErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGJobError;

	static new(): DBSHARINGJobErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGJobError): NSDictionary<string, any>;
}

declare const enum DBSHARINGJobErrorTag {

	UnshareFolderError = 0,

	RemoveFolderMemberError = 1,

	RelinquishFolderMembershipError = 2,

	Other = 3
}

declare class DBSHARINGJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly failed: DBSHARINGJobError;

	readonly tag: DBSHARINGJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: void; });

	constructor(o: { failed: DBSHARINGJobError; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(): this;

	initWithFailed(failed: DBSHARINGJobError): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGJobStatusSerializer extends NSObject {

	static alloc(): DBSHARINGJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGJobStatus;

	static new(): DBSHARINGJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGJobStatus): NSDictionary<string, any>;
}

declare const enum DBSHARINGJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2
}

declare class DBSHARINGLinkAction extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGLinkAction; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGLinkAction; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGLinkActionTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { changeAccessLevel: void; });

	constructor(o: { changeAudience: void; });

	constructor(o: { other: void; });

	constructor(o: { removeExpiry: void; });

	constructor(o: { removePassword: void; });

	constructor(o: { setExpiry: void; });

	constructor(o: { setPassword: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithChangeAccessLevel(): this;

	initWithChangeAudience(): this;

	initWithOther(): this;

	initWithRemoveExpiry(): this;

	initWithRemovePassword(): this;

	initWithSetExpiry(): this;

	initWithSetPassword(): this;

	isChangeAccessLevel(): boolean;

	isChangeAudience(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRemoveExpiry(): boolean;

	isRemovePassword(): boolean;

	isSetExpiry(): boolean;

	isSetPassword(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGLinkActionSerializer extends NSObject {

	static alloc(): DBSHARINGLinkActionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGLinkAction;

	static new(): DBSHARINGLinkActionSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGLinkAction): NSDictionary<string, any>;
}

declare const enum DBSHARINGLinkActionTag {

	ChangeAccessLevel = 0,

	ChangeAudience = 1,

	RemoveExpiry = 2,

	RemovePassword = 3,

	SetExpiry = 4,

	SetPassword = 5,

	Other = 6
}

declare class DBSHARINGLinkAudience extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGLinkAudience; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGLinkAudience; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGLinkAudienceTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { members: void; });

	constructor(o: { noOne: void; });

	constructor(o: { other: void; });

	constructor(o: { public: void; });

	constructor(o: { team: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMembers(): this;

	initWithNoOne(): this;

	initWithOther(): this;

	initWithPublic(): this;

	initWithTeam(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMembers(): boolean;

	isNoOne(): boolean;

	isOther(): boolean;

	isPublic(): boolean;

	isTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGLinkAudienceSerializer extends NSObject {

	static alloc(): DBSHARINGLinkAudienceSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGLinkAudience;

	static new(): DBSHARINGLinkAudienceSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGLinkAudience): NSDictionary<string, any>;
}

declare const enum DBSHARINGLinkAudienceTag {

	Public = 0,

	Team = 1,

	NoOne = 2,

	Members = 3,

	Other = 4
}

declare class DBSHARINGLinkExpiry extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGLinkExpiry; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGLinkExpiry; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly setExpiry: Date;

	readonly tag: DBSHARINGLinkExpiryTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { removeExpiry: void; });

	constructor(o: { setExpiry: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithRemoveExpiry(): this;

	initWithSetExpiry(setExpiry: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRemoveExpiry(): boolean;

	isSetExpiry(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGLinkExpirySerializer extends NSObject {

	static alloc(): DBSHARINGLinkExpirySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGLinkExpiry;

	static new(): DBSHARINGLinkExpirySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGLinkExpiry): NSDictionary<string, any>;
}

declare const enum DBSHARINGLinkExpiryTag {

	RemoveExpiry = 0,

	SetExpiry = 1,

	Other = 2
}

declare class DBSHARINGLinkMetadata extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGLinkMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGLinkMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly expires: Date;

	readonly url: string;

	readonly visibility: DBSHARINGVisibility;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: string; visibility: DBSHARINGVisibility; });

	constructor(o: { url: string; visibility: DBSHARINGVisibility; expires: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUrlVisibility(url: string, visibility: DBSHARINGVisibility): this;

	initWithUrlVisibilityExpires(url: string, visibility: DBSHARINGVisibility, expires: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGLinkMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGLinkMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGLinkMetadata;

	static new(): DBSHARINGLinkMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGLinkMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGLinkPassword extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGLinkPassword; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGLinkPassword; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly setPassword: string;

	readonly tag: DBSHARINGLinkPasswordTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { removePassword: void; });

	constructor(o: { setPassword: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithRemovePassword(): this;

	initWithSetPassword(setPassword: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRemovePassword(): boolean;

	isSetPassword(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGLinkPasswordSerializer extends NSObject {

	static alloc(): DBSHARINGLinkPasswordSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGLinkPassword;

	static new(): DBSHARINGLinkPasswordSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGLinkPassword): NSDictionary<string, any>;
}

declare const enum DBSHARINGLinkPasswordTag {

	RemovePassword = 0,

	SetPassword = 1,

	Other = 2
}

declare class DBSHARINGLinkPermission extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGLinkPermission; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGLinkPermission; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly action: DBSHARINGLinkAction;

	readonly allow: number;

	readonly reason: DBSHARINGPermissionDeniedReason;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { action: DBSHARINGLinkAction; allow: number; });

	constructor(o: { action: DBSHARINGLinkAction; allow: number; reason: DBSHARINGPermissionDeniedReason; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActionAllow(action: DBSHARINGLinkAction, allow: number): this;

	initWithActionAllowReason(action: DBSHARINGLinkAction, allow: number, reason: DBSHARINGPermissionDeniedReason): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGLinkPermissionSerializer extends NSObject {

	static alloc(): DBSHARINGLinkPermissionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGLinkPermission;

	static new(): DBSHARINGLinkPermissionSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGLinkPermission): NSDictionary<string, any>;
}

declare class DBSHARINGLinkPermissions extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGLinkPermissions; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGLinkPermissions; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly canRevoke: number;

	readonly requestedVisibility: DBSHARINGRequestedVisibility;

	readonly resolvedVisibility: DBSHARINGResolvedVisibility;

	readonly revokeFailureReason: DBSHARINGSharedLinkAccessFailureReason;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { canRevoke: number; });

	constructor(o: { canRevoke: number; resolvedVisibility: DBSHARINGResolvedVisibility; requestedVisibility: DBSHARINGRequestedVisibility; revokeFailureReason: DBSHARINGSharedLinkAccessFailureReason; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCanRevoke(canRevoke: number): this;

	initWithCanRevokeResolvedVisibilityRequestedVisibilityRevokeFailureReason(canRevoke: number, resolvedVisibility: DBSHARINGResolvedVisibility, requestedVisibility: DBSHARINGRequestedVisibility, revokeFailureReason: DBSHARINGSharedLinkAccessFailureReason): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGLinkPermissionsSerializer extends NSObject {

	static alloc(): DBSHARINGLinkPermissionsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGLinkPermissions;

	static new(): DBSHARINGLinkPermissionsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGLinkPermissions): NSDictionary<string, any>;
}

declare class DBSHARINGLinkSettings extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGLinkSettings; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGLinkSettings; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessLevel: DBSHARINGAccessLevel;

	readonly audience: DBSHARINGLinkAudience;

	readonly expiry: DBSHARINGLinkExpiry;

	readonly password: DBSHARINGLinkPassword;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { accessLevel: DBSHARINGAccessLevel; audience: DBSHARINGLinkAudience; expiry: DBSHARINGLinkExpiry; password: DBSHARINGLinkPassword; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithAccessLevelAudienceExpiryPassword(accessLevel: DBSHARINGAccessLevel, audience: DBSHARINGLinkAudience, expiry: DBSHARINGLinkExpiry, password: DBSHARINGLinkPassword): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGLinkSettingsSerializer extends NSObject {

	static alloc(): DBSHARINGLinkSettingsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGLinkSettings;

	static new(): DBSHARINGLinkSettingsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGLinkSettings): NSDictionary<string, any>;
}

declare class DBSHARINGListFileMembersArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFileMembersArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFileMembersArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actions: NSArray<DBSHARINGMemberAction>;

	readonly file: string;

	readonly includeInherited: number;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; });

	constructor(o: { file: string; actions: NSArray<DBSHARINGMemberAction> | DBSHARINGMemberAction[]; includeInherited: number; limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFile(file: string): this;

	initWithFileActionsIncludeInheritedLimit(file: string, actions: NSArray<DBSHARINGMemberAction> | DBSHARINGMemberAction[], includeInherited: number, limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFileMembersArgSerializer extends NSObject {

	static alloc(): DBSHARINGListFileMembersArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFileMembersArg;

	static new(): DBSHARINGListFileMembersArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFileMembersArg): NSDictionary<string, any>;
}

declare class DBSHARINGListFileMembersBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFileMembersBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFileMembersBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly files: NSArray<string>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { files: NSArray<string> | string[]; });

	constructor(o: { files: NSArray<string> | string[]; limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFiles(files: NSArray<string> | string[]): this;

	initWithFilesLimit(files: NSArray<string> | string[], limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFileMembersBatchArgSerializer extends NSObject {

	static alloc(): DBSHARINGListFileMembersBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFileMembersBatchArg;

	static new(): DBSHARINGListFileMembersBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFileMembersBatchArg): NSDictionary<string, any>;
}

declare class DBSHARINGListFileMembersBatchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFileMembersBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFileMembersBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly file: string;

	readonly result: DBSHARINGListFileMembersIndividualResult;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; result: DBSHARINGListFileMembersIndividualResult; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFileResult(file: string, result: DBSHARINGListFileMembersIndividualResult): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFileMembersBatchResultSerializer extends NSObject {

	static alloc(): DBSHARINGListFileMembersBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFileMembersBatchResult;

	static new(): DBSHARINGListFileMembersBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFileMembersBatchResult): NSDictionary<string, any>;
}

declare class DBSHARINGListFileMembersContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFileMembersContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFileMembersContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFileMembersContinueArgSerializer extends NSObject {

	static alloc(): DBSHARINGListFileMembersContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFileMembersContinueArg;

	static new(): DBSHARINGListFileMembersContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFileMembersContinueArg): NSDictionary<string, any>;
}

declare class DBSHARINGListFileMembersContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFileMembersContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFileMembersContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly tag: DBSHARINGListFileMembersContinueErrorTag;

	readonly userError: DBSHARINGSharingUserError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	constructor(o: { userError: DBSHARINGSharingUserError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	initWithUserError(userError: DBSHARINGSharingUserError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUserError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGListFileMembersContinueErrorSerializer extends NSObject {

	static alloc(): DBSHARINGListFileMembersContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFileMembersContinueError;

	static new(): DBSHARINGListFileMembersContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFileMembersContinueError): NSDictionary<string, any>;
}

declare const enum DBSHARINGListFileMembersContinueErrorTag {

	UserError = 0,

	AccessError = 1,

	InvalidCursor = 2,

	Other = 3
}

declare class DBSHARINGListFileMembersCountResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFileMembersCountResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFileMembersCountResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly memberCount: number;

	readonly members: DBSHARINGSharedFileMembers;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { members: DBSHARINGSharedFileMembers; memberCount: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMembersMemberCount(members: DBSHARINGSharedFileMembers, memberCount: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFileMembersCountResultSerializer extends NSObject {

	static alloc(): DBSHARINGListFileMembersCountResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFileMembersCountResult;

	static new(): DBSHARINGListFileMembersCountResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFileMembersCountResult): NSDictionary<string, any>;
}

declare class DBSHARINGListFileMembersError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFileMembersError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFileMembersError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly tag: DBSHARINGListFileMembersErrorTag;

	readonly userError: DBSHARINGSharingUserError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { other: void; });

	constructor(o: { userError: DBSHARINGSharingUserError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithOther(): this;

	initWithUserError(userError: DBSHARINGSharingUserError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUserError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGListFileMembersErrorSerializer extends NSObject {

	static alloc(): DBSHARINGListFileMembersErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFileMembersError;

	static new(): DBSHARINGListFileMembersErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFileMembersError): NSDictionary<string, any>;
}

declare const enum DBSHARINGListFileMembersErrorTag {

	UserError = 0,

	AccessError = 1,

	Other = 2
}

declare class DBSHARINGListFileMembersIndividualResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFileMembersIndividualResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFileMembersIndividualResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly result: DBSHARINGListFileMembersCountResult;

	readonly tag: DBSHARINGListFileMembersIndividualResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { other: void; });

	constructor(o: { result: DBSHARINGListFileMembersCountResult; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithOther(): this;

	initWithResult(result: DBSHARINGListFileMembersCountResult): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isResult(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGListFileMembersIndividualResultSerializer extends NSObject {

	static alloc(): DBSHARINGListFileMembersIndividualResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFileMembersIndividualResult;

	static new(): DBSHARINGListFileMembersIndividualResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFileMembersIndividualResult): NSDictionary<string, any>;
}

declare const enum DBSHARINGListFileMembersIndividualResultTag {

	Result = 0,

	AccessError = 1,

	Other = 2
}

declare class DBSHARINGListFilesArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFilesArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFilesArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actions: NSArray<DBSHARINGFileAction>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { limit: number; actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithLimitActions(limit: number, actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFilesArgSerializer extends NSObject {

	static alloc(): DBSHARINGListFilesArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFilesArg;

	static new(): DBSHARINGListFilesArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFilesArg): NSDictionary<string, any>;
}

declare class DBSHARINGListFilesContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFilesContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFilesContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFilesContinueArgSerializer extends NSObject {

	static alloc(): DBSHARINGListFilesContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFilesContinueArg;

	static new(): DBSHARINGListFilesContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFilesContinueArg): NSDictionary<string, any>;
}

declare class DBSHARINGListFilesContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFilesContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFilesContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGListFilesContinueErrorTag;

	readonly userError: DBSHARINGSharingUserError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	constructor(o: { userError: DBSHARINGSharingUserError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	initWithUserError(userError: DBSHARINGSharingUserError): this;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUserError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGListFilesContinueErrorSerializer extends NSObject {

	static alloc(): DBSHARINGListFilesContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFilesContinueError;

	static new(): DBSHARINGListFilesContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFilesContinueError): NSDictionary<string, any>;
}

declare const enum DBSHARINGListFilesContinueErrorTag {

	UserError = 0,

	InvalidCursor = 1,

	Other = 2
}

declare class DBSHARINGListFilesResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFilesResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFilesResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly entries: NSArray<DBSHARINGSharedFileMetadata>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBSHARINGSharedFileMetadata> | DBSHARINGSharedFileMetadata[]; });

	constructor(o: { entries: NSArray<DBSHARINGSharedFileMetadata> | DBSHARINGSharedFileMetadata[]; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBSHARINGSharedFileMetadata> | DBSHARINGSharedFileMetadata[]): this;

	initWithEntriesCursor(entries: NSArray<DBSHARINGSharedFileMetadata> | DBSHARINGSharedFileMetadata[], cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFilesResultSerializer extends NSObject {

	static alloc(): DBSHARINGListFilesResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFilesResult;

	static new(): DBSHARINGListFilesResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFilesResult): NSDictionary<string, any>;
}

declare class DBSHARINGListFolderMembersArgs extends DBSHARINGListFolderMembersCursorArg implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFolderMembersArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFolderMembersArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; });

	constructor(o: { sharedFolderId: string; actions: NSArray<DBSHARINGMemberAction> | DBSHARINGMemberAction[]; limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderId(sharedFolderId: string): this;

	initWithSharedFolderIdActionsLimit(sharedFolderId: string, actions: NSArray<DBSHARINGMemberAction> | DBSHARINGMemberAction[], limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFolderMembersArgsSerializer extends NSObject {

	static alloc(): DBSHARINGListFolderMembersArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFolderMembersArgs;

	static new(): DBSHARINGListFolderMembersArgsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFolderMembersArgs): NSDictionary<string, any>;
}

declare class DBSHARINGListFolderMembersContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFolderMembersContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFolderMembersContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFolderMembersContinueArgSerializer extends NSObject {

	static alloc(): DBSHARINGListFolderMembersContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFolderMembersContinueArg;

	static new(): DBSHARINGListFolderMembersContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFolderMembersContinueArg): NSDictionary<string, any>;
}

declare class DBSHARINGListFolderMembersContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFolderMembersContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFolderMembersContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly tag: DBSHARINGListFolderMembersContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGListFolderMembersContinueErrorSerializer extends NSObject {

	static alloc(): DBSHARINGListFolderMembersContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFolderMembersContinueError;

	static new(): DBSHARINGListFolderMembersContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFolderMembersContinueError): NSDictionary<string, any>;
}

declare const enum DBSHARINGListFolderMembersContinueErrorTag {

	AccessError = 0,

	InvalidCursor = 1,

	Other = 2
}

declare class DBSHARINGListFolderMembersCursorArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFolderMembersCursorArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFolderMembersCursorArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actions: NSArray<DBSHARINGMemberAction>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { actions: NSArray<DBSHARINGMemberAction> | DBSHARINGMemberAction[]; limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithActionsLimit(actions: NSArray<DBSHARINGMemberAction> | DBSHARINGMemberAction[], limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFolderMembersCursorArgSerializer extends NSObject {

	static alloc(): DBSHARINGListFolderMembersCursorArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFolderMembersCursorArg;

	static new(): DBSHARINGListFolderMembersCursorArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFolderMembersCursorArg): NSDictionary<string, any>;
}

declare class DBSHARINGListFoldersArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFoldersArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFoldersArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actions: NSArray<DBSHARINGFolderAction>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { limit: number; actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithLimitActions(limit: number, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFoldersArgsSerializer extends NSObject {

	static alloc(): DBSHARINGListFoldersArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFoldersArgs;

	static new(): DBSHARINGListFoldersArgsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFoldersArgs): NSDictionary<string, any>;
}

declare class DBSHARINGListFoldersContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFoldersContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFoldersContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFoldersContinueArgSerializer extends NSObject {

	static alloc(): DBSHARINGListFoldersContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFoldersContinueArg;

	static new(): DBSHARINGListFoldersContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFoldersContinueArg): NSDictionary<string, any>;
}

declare class DBSHARINGListFoldersContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFoldersContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFoldersContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGListFoldersContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGListFoldersContinueErrorSerializer extends NSObject {

	static alloc(): DBSHARINGListFoldersContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFoldersContinueError;

	static new(): DBSHARINGListFoldersContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFoldersContinueError): NSDictionary<string, any>;
}

declare const enum DBSHARINGListFoldersContinueErrorTag {

	InvalidCursor = 0,

	Other = 1
}

declare class DBSHARINGListFoldersResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListFoldersResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListFoldersResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly entries: NSArray<DBSHARINGSharedFolderMetadata>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { entries: NSArray<DBSHARINGSharedFolderMetadata> | DBSHARINGSharedFolderMetadata[]; });

	constructor(o: { entries: NSArray<DBSHARINGSharedFolderMetadata> | DBSHARINGSharedFolderMetadata[]; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEntries(entries: NSArray<DBSHARINGSharedFolderMetadata> | DBSHARINGSharedFolderMetadata[]): this;

	initWithEntriesCursor(entries: NSArray<DBSHARINGSharedFolderMetadata> | DBSHARINGSharedFolderMetadata[], cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListFoldersResultSerializer extends NSObject {

	static alloc(): DBSHARINGListFoldersResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListFoldersResult;

	static new(): DBSHARINGListFoldersResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListFoldersResult): NSDictionary<string, any>;
}

declare class DBSHARINGListSharedLinksArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListSharedLinksArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListSharedLinksArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly directOnly: number;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { path: string; cursor: string; directOnly: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithPathCursorDirectOnly(path: string, cursor: string, directOnly: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListSharedLinksArgSerializer extends NSObject {

	static alloc(): DBSHARINGListSharedLinksArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListSharedLinksArg;

	static new(): DBSHARINGListSharedLinksArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListSharedLinksArg): NSDictionary<string, any>;
}

declare class DBSHARINGListSharedLinksError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListSharedLinksError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListSharedLinksError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: DBFILESLookupError;

	readonly tag: DBSHARINGListSharedLinksErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { path: DBFILESLookupError; });

	constructor(o: { reset: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPath(path: DBFILESLookupError): this;

	initWithReset(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPath(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGListSharedLinksErrorSerializer extends NSObject {

	static alloc(): DBSHARINGListSharedLinksErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListSharedLinksError;

	static new(): DBSHARINGListSharedLinksErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListSharedLinksError): NSDictionary<string, any>;
}

declare const enum DBSHARINGListSharedLinksErrorTag {

	Path = 0,

	Reset = 1,

	Other = 2
}

declare class DBSHARINGListSharedLinksResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGListSharedLinksResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGListSharedLinksResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly hasMore: number;

	readonly links: NSArray<DBSHARINGSharedLinkMetadata>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { links: NSArray<DBSHARINGSharedLinkMetadata> | DBSHARINGSharedLinkMetadata[]; hasMore: number; });

	constructor(o: { links: NSArray<DBSHARINGSharedLinkMetadata> | DBSHARINGSharedLinkMetadata[]; hasMore: number; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLinksHasMore(links: NSArray<DBSHARINGSharedLinkMetadata> | DBSHARINGSharedLinkMetadata[], hasMore: number): this;

	initWithLinksHasMoreCursor(links: NSArray<DBSHARINGSharedLinkMetadata> | DBSHARINGSharedLinkMetadata[], hasMore: number, cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGListSharedLinksResultSerializer extends NSObject {

	static alloc(): DBSHARINGListSharedLinksResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGListSharedLinksResult;

	static new(): DBSHARINGListSharedLinksResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGListSharedLinksResult): NSDictionary<string, any>;
}

declare class DBSHARINGMemberAccessLevelResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGMemberAccessLevelResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGMemberAccessLevelResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessDetails: NSArray<DBSHARINGParentFolderAccessInfo>;

	readonly accessLevel: DBSHARINGAccessLevel;

	readonly warning: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { accessLevel: DBSHARINGAccessLevel; warning: string; accessDetails: NSArray<DBSHARINGParentFolderAccessInfo> | DBSHARINGParentFolderAccessInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithAccessLevelWarningAccessDetails(accessLevel: DBSHARINGAccessLevel, warning: string, accessDetails: NSArray<DBSHARINGParentFolderAccessInfo> | DBSHARINGParentFolderAccessInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGMemberAccessLevelResultSerializer extends NSObject {

	static alloc(): DBSHARINGMemberAccessLevelResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGMemberAccessLevelResult;

	static new(): DBSHARINGMemberAccessLevelResultSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGMemberAccessLevelResult): NSDictionary<string, any>;
}

declare class DBSHARINGMemberAction extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGMemberAction; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGMemberAction; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGMemberActionTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { leaveACopy: void; });

	constructor(o: { makeEditor: void; });

	constructor(o: { makeOwner: void; });

	constructor(o: { makeViewer: void; });

	constructor(o: { makeViewerNoComment: void; });

	constructor(o: { other: void; });

	constructor(o: { remove: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLeaveACopy(): this;

	initWithMakeEditor(): this;

	initWithMakeOwner(): this;

	initWithMakeViewer(): this;

	initWithMakeViewerNoComment(): this;

	initWithOther(): this;

	initWithRemove(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLeaveACopy(): boolean;

	isMakeEditor(): boolean;

	isMakeOwner(): boolean;

	isMakeViewer(): boolean;

	isMakeViewerNoComment(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRemove(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGMemberActionSerializer extends NSObject {

	static alloc(): DBSHARINGMemberActionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGMemberAction;

	static new(): DBSHARINGMemberActionSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGMemberAction): NSDictionary<string, any>;
}

declare const enum DBSHARINGMemberActionTag {

	LeaveACopy = 0,

	MakeEditor = 1,

	MakeOwner = 2,

	MakeViewer = 3,

	MakeViewerNoComment = 4,

	Remove = 5,

	Other = 6
}

declare class DBSHARINGMemberPermission extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGMemberPermission; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGMemberPermission; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly action: DBSHARINGMemberAction;

	readonly allow: number;

	readonly reason: DBSHARINGPermissionDeniedReason;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { action: DBSHARINGMemberAction; allow: number; });

	constructor(o: { action: DBSHARINGMemberAction; allow: number; reason: DBSHARINGPermissionDeniedReason; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActionAllow(action: DBSHARINGMemberAction, allow: number): this;

	initWithActionAllowReason(action: DBSHARINGMemberAction, allow: number, reason: DBSHARINGPermissionDeniedReason): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGMemberPermissionSerializer extends NSObject {

	static alloc(): DBSHARINGMemberPermissionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGMemberPermission;

	static new(): DBSHARINGMemberPermissionSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGMemberPermission): NSDictionary<string, any>;
}

declare class DBSHARINGMemberPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGMemberPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGMemberPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGMemberPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { anyone: void; });

	constructor(o: { other: void; });

	constructor(o: { team: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAnyone(): this;

	initWithOther(): this;

	initWithTeam(): this;

	isAnyone(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGMemberPolicySerializer extends NSObject {

	static alloc(): DBSHARINGMemberPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGMemberPolicy;

	static new(): DBSHARINGMemberPolicySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGMemberPolicy): NSDictionary<string, any>;
}

declare const enum DBSHARINGMemberPolicyTag {

	Team = 0,

	Anyone = 1,

	Other = 2
}

declare class DBSHARINGMemberSelector extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGMemberSelector; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGMemberSelector; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dropboxId: string;

	readonly email: string;

	readonly tag: DBSHARINGMemberSelectorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { dropboxId: string; });

	constructor(o: { email: string; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDropboxId(dropboxId: string): this;

	initWithEmail(email: string): this;

	initWithOther(): this;

	isDropboxId(): boolean;

	isEmail(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGMemberSelectorSerializer extends NSObject {

	static alloc(): DBSHARINGMemberSelectorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGMemberSelector;

	static new(): DBSHARINGMemberSelectorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGMemberSelector): NSDictionary<string, any>;
}

declare const enum DBSHARINGMemberSelectorTag {

	DropboxId = 0,

	Email = 1,

	Other = 2
}

declare class DBSHARINGMembershipInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGMembershipInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGMembershipInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessType: DBSHARINGAccessLevel;

	readonly initials: string;

	readonly isInherited: number;

	readonly permissions: NSArray<DBSHARINGMemberPermission>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessType: DBSHARINGAccessLevel; });

	constructor(o: { accessType: DBSHARINGAccessLevel; permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[]; initials: string; isInherited: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessType(accessType: DBSHARINGAccessLevel): this;

	initWithAccessTypePermissionsInitialsIsInherited(accessType: DBSHARINGAccessLevel, permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[], initials: string, isInherited: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGMembershipInfoSerializer extends NSObject {

	static alloc(): DBSHARINGMembershipInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGMembershipInfo;

	static new(): DBSHARINGMembershipInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGMembershipInfo): NSDictionary<string, any>;
}

declare class DBSHARINGModifySharedLinkSettingsArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGModifySharedLinkSettingsArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGModifySharedLinkSettingsArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly removeExpiration: number;

	readonly settings: DBSHARINGSharedLinkSettings;

	readonly url: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: string; settings: DBSHARINGSharedLinkSettings; });

	constructor(o: { url: string; settings: DBSHARINGSharedLinkSettings; removeExpiration: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUrlSettings(url: string, settings: DBSHARINGSharedLinkSettings): this;

	initWithUrlSettingsRemoveExpiration(url: string, settings: DBSHARINGSharedLinkSettings, removeExpiration: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGModifySharedLinkSettingsArgsSerializer extends NSObject {

	static alloc(): DBSHARINGModifySharedLinkSettingsArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGModifySharedLinkSettingsArgs;

	static new(): DBSHARINGModifySharedLinkSettingsArgsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGModifySharedLinkSettingsArgs): NSDictionary<string, any>;
}

declare class DBSHARINGModifySharedLinkSettingsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGModifySharedLinkSettingsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGModifySharedLinkSettingsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly settingsError: DBSHARINGSharedLinkSettingsError;

	readonly tag: DBSHARINGModifySharedLinkSettingsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { emailNotVerified: void; });

	constructor(o: { other: void; });

	constructor(o: { settingsError: DBSHARINGSharedLinkSettingsError; });

	constructor(o: { sharedLinkAccessDenied: void; });

	constructor(o: { sharedLinkNotFound: void; });

	constructor(o: { unsupportedLinkType: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmailNotVerified(): this;

	initWithOther(): this;

	initWithSettingsError(settingsError: DBSHARINGSharedLinkSettingsError): this;

	initWithSharedLinkAccessDenied(): this;

	initWithSharedLinkNotFound(): this;

	initWithUnsupportedLinkType(): this;

	isEmailNotVerified(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSettingsError(): boolean;

	isSharedLinkAccessDenied(): boolean;

	isSharedLinkNotFound(): boolean;

	isUnsupportedLinkType(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGModifySharedLinkSettingsErrorSerializer extends NSObject {

	static alloc(): DBSHARINGModifySharedLinkSettingsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGModifySharedLinkSettingsError;

	static new(): DBSHARINGModifySharedLinkSettingsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGModifySharedLinkSettingsError): NSDictionary<string, any>;
}

declare const enum DBSHARINGModifySharedLinkSettingsErrorTag {

	SharedLinkNotFound = 0,

	SharedLinkAccessDenied = 1,

	UnsupportedLinkType = 2,

	Other = 3,

	SettingsError = 4,

	EmailNotVerified = 5
}

declare class DBSHARINGMountFolderArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGMountFolderArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGMountFolderArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderId(sharedFolderId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGMountFolderArgSerializer extends NSObject {

	static alloc(): DBSHARINGMountFolderArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGMountFolderArg;

	static new(): DBSHARINGMountFolderArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGMountFolderArg): NSDictionary<string, any>;
}

declare class DBSHARINGMountFolderError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGMountFolderError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGMountFolderError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly insufficientQuota: DBSHARINGInsufficientQuotaAmounts;

	readonly tag: DBSHARINGMountFolderErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { alreadyMounted: void; });

	constructor(o: { insideSharedFolder: void; });

	constructor(o: { insufficientQuota: DBSHARINGInsufficientQuotaAmounts; });

	constructor(o: { noPermission: void; });

	constructor(o: { notMountable: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithAlreadyMounted(): this;

	initWithInsideSharedFolder(): this;

	initWithInsufficientQuota(insufficientQuota: DBSHARINGInsufficientQuotaAmounts): this;

	initWithNoPermission(): this;

	initWithNotMountable(): this;

	initWithOther(): this;

	isAccessError(): boolean;

	isAlreadyMounted(): boolean;

	isEqual(object: any): boolean;

	isInsideSharedFolder(): boolean;

	isInsufficientQuota(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isNotMountable(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGMountFolderErrorSerializer extends NSObject {

	static alloc(): DBSHARINGMountFolderErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGMountFolderError;

	static new(): DBSHARINGMountFolderErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGMountFolderError): NSDictionary<string, any>;
}

declare const enum DBSHARINGMountFolderErrorTag {

	AccessError = 0,

	InsideSharedFolder = 1,

	InsufficientQuota = 2,

	AlreadyMounted = 3,

	NoPermission = 4,

	NotMountable = 5,

	Other = 6
}

declare class DBSHARINGParentFolderAccessInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGParentFolderAccessInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGParentFolderAccessInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly folderName: string;

	readonly path: string;

	readonly permissions: NSArray<DBSHARINGMemberPermission>;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { folderName: string; sharedFolderId: string; permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[]; path: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFolderNameSharedFolderIdPermissionsPath(folderName: string, sharedFolderId: string, permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[], path: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGParentFolderAccessInfoSerializer extends NSObject {

	static alloc(): DBSHARINGParentFolderAccessInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGParentFolderAccessInfo;

	static new(): DBSHARINGParentFolderAccessInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGParentFolderAccessInfo): NSDictionary<string, any>;
}

declare class DBSHARINGPathLinkMetadata extends DBSHARINGLinkMetadata implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGPathLinkMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGPathLinkMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly path: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: string; visibility: DBSHARINGVisibility; path: string; });

	constructor(o: { url: string; visibility: DBSHARINGVisibility; path: string; expires: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUrlVisibilityPath(url: string, visibility: DBSHARINGVisibility, path: string): this;

	initWithUrlVisibilityPathExpires(url: string, visibility: DBSHARINGVisibility, path: string, expires: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGPathLinkMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGPathLinkMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGPathLinkMetadata;

	static new(): DBSHARINGPathLinkMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGPathLinkMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGPendingUploadMode extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGPendingUploadMode; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGPendingUploadMode; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGPendingUploadModeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: void; });

	constructor(o: { folder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFile(): this;

	initWithFolder(): this;

	isEqual(object: any): boolean;

	isFile(): boolean;

	isFolder(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGPendingUploadModeSerializer extends NSObject {

	static alloc(): DBSHARINGPendingUploadModeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGPendingUploadMode;

	static new(): DBSHARINGPendingUploadModeSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGPendingUploadMode): NSDictionary<string, any>;
}

declare const enum DBSHARINGPendingUploadModeTag {

	File = 0,

	Folder = 1
}

declare class DBSHARINGPermissionDeniedReason extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGPermissionDeniedReason; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGPermissionDeniedReason; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly insufficientPlan: DBSHARINGInsufficientPlan;

	readonly tag: DBSHARINGPermissionDeniedReasonTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { folderIsInsideSharedFolder: void; });

	constructor(o: { folderIsLimitedTeamFolder: void; });

	constructor(o: { insufficientPlan: DBSHARINGInsufficientPlan; });

	constructor(o: { other: void; });

	constructor(o: { ownerNotOnTeam: void; });

	constructor(o: { permissionDenied: void; });

	constructor(o: { restrictedByParentFolder: void; });

	constructor(o: { restrictedByTeam: void; });

	constructor(o: { targetIsIndirectMember: void; });

	constructor(o: { targetIsOwner: void; });

	constructor(o: { targetIsSelf: void; });

	constructor(o: { targetNotActive: void; });

	constructor(o: { userAccountType: void; });

	constructor(o: { userNotAllowedByOwner: void; });

	constructor(o: { userNotOnTeam: void; });

	constructor(o: { userNotSameTeamAsOwner: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFolderIsInsideSharedFolder(): this;

	initWithFolderIsLimitedTeamFolder(): this;

	initWithInsufficientPlan(insufficientPlan: DBSHARINGInsufficientPlan): this;

	initWithOther(): this;

	initWithOwnerNotOnTeam(): this;

	initWithPermissionDenied(): this;

	initWithRestrictedByParentFolder(): this;

	initWithRestrictedByTeam(): this;

	initWithTargetIsIndirectMember(): this;

	initWithTargetIsOwner(): this;

	initWithTargetIsSelf(): this;

	initWithTargetNotActive(): this;

	initWithUserAccountType(): this;

	initWithUserNotAllowedByOwner(): this;

	initWithUserNotOnTeam(): this;

	initWithUserNotSameTeamAsOwner(): this;

	isEqual(object: any): boolean;

	isFolderIsInsideSharedFolder(): boolean;

	isFolderIsLimitedTeamFolder(): boolean;

	isInsufficientPlan(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isOwnerNotOnTeam(): boolean;

	isPermissionDenied(): boolean;

	isRestrictedByParentFolder(): boolean;

	isRestrictedByTeam(): boolean;

	isTargetIsIndirectMember(): boolean;

	isTargetIsOwner(): boolean;

	isTargetIsSelf(): boolean;

	isTargetNotActive(): boolean;

	isUserAccountType(): boolean;

	isUserNotAllowedByOwner(): boolean;

	isUserNotOnTeam(): boolean;

	isUserNotSameTeamAsOwner(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGPermissionDeniedReasonSerializer extends NSObject {

	static alloc(): DBSHARINGPermissionDeniedReasonSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGPermissionDeniedReason;

	static new(): DBSHARINGPermissionDeniedReasonSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGPermissionDeniedReason): NSDictionary<string, any>;
}

declare const enum DBSHARINGPermissionDeniedReasonTag {

	UserNotSameTeamAsOwner = 0,

	UserNotAllowedByOwner = 1,

	TargetIsIndirectMember = 2,

	TargetIsOwner = 3,

	TargetIsSelf = 4,

	TargetNotActive = 5,

	FolderIsLimitedTeamFolder = 6,

	OwnerNotOnTeam = 7,

	PermissionDenied = 8,

	RestrictedByTeam = 9,

	UserAccountType = 10,

	UserNotOnTeam = 11,

	FolderIsInsideSharedFolder = 12,

	RestrictedByParentFolder = 13,

	InsufficientPlan = 14,

	Other = 15
}

declare class DBSHARINGRelinquishFileMembershipArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRelinquishFileMembershipArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRelinquishFileMembershipArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly file: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFile(file: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGRelinquishFileMembershipArgSerializer extends NSObject {

	static alloc(): DBSHARINGRelinquishFileMembershipArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRelinquishFileMembershipArg;

	static new(): DBSHARINGRelinquishFileMembershipArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRelinquishFileMembershipArg): NSDictionary<string, any>;
}

declare class DBSHARINGRelinquishFileMembershipError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRelinquishFileMembershipError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRelinquishFileMembershipError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly tag: DBSHARINGRelinquishFileMembershipErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { groupAccess: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithGroupAccess(): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isGroupAccess(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGRelinquishFileMembershipErrorSerializer extends NSObject {

	static alloc(): DBSHARINGRelinquishFileMembershipErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRelinquishFileMembershipError;

	static new(): DBSHARINGRelinquishFileMembershipErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRelinquishFileMembershipError): NSDictionary<string, any>;
}

declare const enum DBSHARINGRelinquishFileMembershipErrorTag {

	AccessError = 0,

	GroupAccess = 1,

	NoPermission = 2,

	Other = 3
}

declare class DBSHARINGRelinquishFolderMembershipArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRelinquishFolderMembershipArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRelinquishFolderMembershipArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly leaveACopy: number;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; });

	constructor(o: { sharedFolderId: string; leaveACopy: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderId(sharedFolderId: string): this;

	initWithSharedFolderIdLeaveACopy(sharedFolderId: string, leaveACopy: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGRelinquishFolderMembershipArgSerializer extends NSObject {

	static alloc(): DBSHARINGRelinquishFolderMembershipArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRelinquishFolderMembershipArg;

	static new(): DBSHARINGRelinquishFolderMembershipArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRelinquishFolderMembershipArg): NSDictionary<string, any>;
}

declare class DBSHARINGRelinquishFolderMembershipError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRelinquishFolderMembershipError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRelinquishFolderMembershipError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly tag: DBSHARINGRelinquishFolderMembershipErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { folderOwner: void; });

	constructor(o: { groupAccess: void; });

	constructor(o: { mounted: void; });

	constructor(o: { noExplicitAccess: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	constructor(o: { teamFolder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithFolderOwner(): this;

	initWithGroupAccess(): this;

	initWithMounted(): this;

	initWithNoExplicitAccess(): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	initWithTeamFolder(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isFolderOwner(): boolean;

	isGroupAccess(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMounted(): boolean;

	isNoExplicitAccess(): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	isTeamFolder(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGRelinquishFolderMembershipErrorSerializer extends NSObject {

	static alloc(): DBSHARINGRelinquishFolderMembershipErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRelinquishFolderMembershipError;

	static new(): DBSHARINGRelinquishFolderMembershipErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRelinquishFolderMembershipError): NSDictionary<string, any>;
}

declare const enum DBSHARINGRelinquishFolderMembershipErrorTag {

	AccessError = 0,

	FolderOwner = 1,

	Mounted = 2,

	GroupAccess = 3,

	TeamFolder = 4,

	NoPermission = 5,

	NoExplicitAccess = 6,

	Other = 7
}

declare class DBSHARINGRemoveFileMemberArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRemoveFileMemberArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRemoveFileMemberArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly file: string;

	readonly member: DBSHARINGMemberSelector;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; member: DBSHARINGMemberSelector; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFileMember(file: string, member: DBSHARINGMemberSelector): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGRemoveFileMemberArgSerializer extends NSObject {

	static alloc(): DBSHARINGRemoveFileMemberArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRemoveFileMemberArg;

	static new(): DBSHARINGRemoveFileMemberArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRemoveFileMemberArg): NSDictionary<string, any>;
}

declare class DBSHARINGRemoveFileMemberError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRemoveFileMemberError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRemoveFileMemberError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly noExplicitAccess: DBSHARINGMemberAccessLevelResult;

	readonly tag: DBSHARINGRemoveFileMemberErrorTag;

	readonly userError: DBSHARINGSharingUserError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { noExplicitAccess: DBSHARINGMemberAccessLevelResult; });

	constructor(o: { other: void; });

	constructor(o: { userError: DBSHARINGSharingUserError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithNoExplicitAccess(noExplicitAccess: DBSHARINGMemberAccessLevelResult): this;

	initWithOther(): this;

	initWithUserError(userError: DBSHARINGSharingUserError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoExplicitAccess(): boolean;

	isOther(): boolean;

	isUserError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGRemoveFileMemberErrorSerializer extends NSObject {

	static alloc(): DBSHARINGRemoveFileMemberErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRemoveFileMemberError;

	static new(): DBSHARINGRemoveFileMemberErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRemoveFileMemberError): NSDictionary<string, any>;
}

declare const enum DBSHARINGRemoveFileMemberErrorTag {

	UserError = 0,

	AccessError = 1,

	NoExplicitAccess = 2,

	Other = 3
}

declare class DBSHARINGRemoveFolderMemberArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRemoveFolderMemberArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRemoveFolderMemberArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly leaveACopy: number;

	readonly member: DBSHARINGMemberSelector;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; member: DBSHARINGMemberSelector; leaveACopy: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderIdMemberLeaveACopy(sharedFolderId: string, member: DBSHARINGMemberSelector, leaveACopy: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGRemoveFolderMemberArgSerializer extends NSObject {

	static alloc(): DBSHARINGRemoveFolderMemberArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRemoveFolderMemberArg;

	static new(): DBSHARINGRemoveFolderMemberArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRemoveFolderMemberArg): NSDictionary<string, any>;
}

declare class DBSHARINGRemoveFolderMemberError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRemoveFolderMemberError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRemoveFolderMemberError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly memberError: DBSHARINGSharedFolderMemberError;

	readonly tag: DBSHARINGRemoveFolderMemberErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { folderOwner: void; });

	constructor(o: { groupAccess: void; });

	constructor(o: { memberError: DBSHARINGSharedFolderMemberError; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	constructor(o: { teamFolder: void; });

	constructor(o: { tooManyFiles: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithFolderOwner(): this;

	initWithGroupAccess(): this;

	initWithMemberError(memberError: DBSHARINGSharedFolderMemberError): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	initWithTeamFolder(): this;

	initWithTooManyFiles(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isFolderOwner(): boolean;

	isGroupAccess(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberError(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	isTeamFolder(): boolean;

	isTooManyFiles(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGRemoveFolderMemberErrorSerializer extends NSObject {

	static alloc(): DBSHARINGRemoveFolderMemberErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRemoveFolderMemberError;

	static new(): DBSHARINGRemoveFolderMemberErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRemoveFolderMemberError): NSDictionary<string, any>;
}

declare const enum DBSHARINGRemoveFolderMemberErrorTag {

	AccessError = 0,

	MemberError = 1,

	FolderOwner = 2,

	GroupAccess = 3,

	TeamFolder = 4,

	NoPermission = 5,

	TooManyFiles = 6,

	Other = 7
}

declare class DBSHARINGRemoveMemberJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRemoveMemberJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRemoveMemberJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBSHARINGMemberAccessLevelResult;

	readonly failed: DBSHARINGRemoveFolderMemberError;

	readonly tag: DBSHARINGRemoveMemberJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBSHARINGMemberAccessLevelResult; });

	constructor(o: { failed: DBSHARINGRemoveFolderMemberError; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBSHARINGMemberAccessLevelResult): this;

	initWithFailed(failed: DBSHARINGRemoveFolderMemberError): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGRemoveMemberJobStatusSerializer extends NSObject {

	static alloc(): DBSHARINGRemoveMemberJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRemoveMemberJobStatus;

	static new(): DBSHARINGRemoveMemberJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRemoveMemberJobStatus): NSDictionary<string, any>;
}

declare const enum DBSHARINGRemoveMemberJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2
}

declare class DBSHARINGRequestedVisibility extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRequestedVisibility; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRequestedVisibility; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGRequestedVisibilityTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { password: void; });

	constructor(o: { public: void; });

	constructor(o: { teamOnly: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPassword(): this;

	initWithPublic(): this;

	initWithTeamOnly(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPassword(): boolean;

	isPublic(): boolean;

	isTeamOnly(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGRequestedVisibilitySerializer extends NSObject {

	static alloc(): DBSHARINGRequestedVisibilitySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRequestedVisibility;

	static new(): DBSHARINGRequestedVisibilitySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRequestedVisibility): NSDictionary<string, any>;
}

declare const enum DBSHARINGRequestedVisibilityTag {

	Public = 0,

	TeamOnly = 1,

	Password = 2
}

declare class DBSHARINGResolvedVisibility extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGResolvedVisibility; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGResolvedVisibility; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGResolvedVisibilityTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { password: void; });

	constructor(o: { public: void; });

	constructor(o: { sharedFolderOnly: void; });

	constructor(o: { teamAndPassword: void; });

	constructor(o: { teamOnly: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPassword(): this;

	initWithPublic(): this;

	initWithSharedFolderOnly(): this;

	initWithTeamAndPassword(): this;

	initWithTeamOnly(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPassword(): boolean;

	isPublic(): boolean;

	isSharedFolderOnly(): boolean;

	isTeamAndPassword(): boolean;

	isTeamOnly(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGResolvedVisibilitySerializer extends NSObject {

	static alloc(): DBSHARINGResolvedVisibilitySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGResolvedVisibility;

	static new(): DBSHARINGResolvedVisibilitySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGResolvedVisibility): NSDictionary<string, any>;
}

declare const enum DBSHARINGResolvedVisibilityTag {

	Public = 0,

	TeamOnly = 1,

	Password = 2,

	TeamAndPassword = 3,

	SharedFolderOnly = 4,

	Other = 5
}

declare class DBSHARINGRevokeSharedLinkArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRevokeSharedLinkArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRevokeSharedLinkArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly url: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUrl(url: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGRevokeSharedLinkArgSerializer extends NSObject {

	static alloc(): DBSHARINGRevokeSharedLinkArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRevokeSharedLinkArg;

	static new(): DBSHARINGRevokeSharedLinkArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRevokeSharedLinkArg): NSDictionary<string, any>;
}

declare class DBSHARINGRevokeSharedLinkError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGRevokeSharedLinkError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGRevokeSharedLinkError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGRevokeSharedLinkErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { sharedLinkAccessDenied: void; });

	constructor(o: { sharedLinkMalformed: void; });

	constructor(o: { sharedLinkNotFound: void; });

	constructor(o: { unsupportedLinkType: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithSharedLinkAccessDenied(): this;

	initWithSharedLinkMalformed(): this;

	initWithSharedLinkNotFound(): this;

	initWithUnsupportedLinkType(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSharedLinkAccessDenied(): boolean;

	isSharedLinkMalformed(): boolean;

	isSharedLinkNotFound(): boolean;

	isUnsupportedLinkType(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGRevokeSharedLinkErrorSerializer extends NSObject {

	static alloc(): DBSHARINGRevokeSharedLinkErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGRevokeSharedLinkError;

	static new(): DBSHARINGRevokeSharedLinkErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGRevokeSharedLinkError): NSDictionary<string, any>;
}

declare const enum DBSHARINGRevokeSharedLinkErrorTag {

	SharedLinkNotFound = 0,

	SharedLinkAccessDenied = 1,

	UnsupportedLinkType = 2,

	Other = 3,

	SharedLinkMalformed = 4
}

declare class DBSHARINGRouteObjects extends NSObject {

	static DBSHARINGAddFileMember(): DBRoute;

	static DBSHARINGAddFolderMember(): DBRoute;

	static DBSHARINGChangeFileMemberAccess(): DBRoute;

	static DBSHARINGCheckJobStatus(): DBRoute;

	static DBSHARINGCheckRemoveMemberJobStatus(): DBRoute;

	static DBSHARINGCheckShareJobStatus(): DBRoute;

	static DBSHARINGCreateSharedLink(): DBRoute;

	static DBSHARINGCreateSharedLinkWithSettings(): DBRoute;

	static DBSHARINGGetFileMetadata(): DBRoute;

	static DBSHARINGGetFileMetadataBatch(): DBRoute;

	static DBSHARINGGetFolderMetadata(): DBRoute;

	static DBSHARINGGetSharedLinkFile(): DBRoute;

	static DBSHARINGGetSharedLinkMetadata(): DBRoute;

	static DBSHARINGGetSharedLinks(): DBRoute;

	static DBSHARINGListFileMembers(): DBRoute;

	static DBSHARINGListFileMembersBatch(): DBRoute;

	static DBSHARINGListFileMembersContinue(): DBRoute;

	static DBSHARINGListFolderMembers(): DBRoute;

	static DBSHARINGListFolderMembersContinue(): DBRoute;

	static DBSHARINGListFolders(): DBRoute;

	static DBSHARINGListFoldersContinue(): DBRoute;

	static DBSHARINGListMountableFolders(): DBRoute;

	static DBSHARINGListMountableFoldersContinue(): DBRoute;

	static DBSHARINGListReceivedFiles(): DBRoute;

	static DBSHARINGListReceivedFilesContinue(): DBRoute;

	static DBSHARINGListSharedLinks(): DBRoute;

	static DBSHARINGModifySharedLinkSettings(): DBRoute;

	static DBSHARINGMountFolder(): DBRoute;

	static DBSHARINGRelinquishFileMembership(): DBRoute;

	static DBSHARINGRelinquishFolderMembership(): DBRoute;

	static DBSHARINGRemoveFileMember(): DBRoute;

	static DBSHARINGRemoveFileMember2(): DBRoute;

	static DBSHARINGRemoveFolderMember(): DBRoute;

	static DBSHARINGRevokeSharedLink(): DBRoute;

	static DBSHARINGSetAccessInheritance(): DBRoute;

	static DBSHARINGShareFolder(): DBRoute;

	static DBSHARINGTransferFolder(): DBRoute;

	static DBSHARINGUnmountFolder(): DBRoute;

	static DBSHARINGUnshareFile(): DBRoute;

	static DBSHARINGUnshareFolder(): DBRoute;

	static DBSHARINGUpdateFileMember(): DBRoute;

	static DBSHARINGUpdateFolderMember(): DBRoute;

	static DBSHARINGUpdateFolderPolicy(): DBRoute;

	static alloc(): DBSHARINGRouteObjects; // inherited from NSObject

	static new(): DBSHARINGRouteObjects; // inherited from NSObject
}

declare class DBSHARINGSetAccessInheritanceArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSetAccessInheritanceArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSetAccessInheritanceArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessInheritance: DBSHARINGAccessInheritance;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; });

	constructor(o: { sharedFolderId: string; accessInheritance: DBSHARINGAccessInheritance; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderId(sharedFolderId: string): this;

	initWithSharedFolderIdAccessInheritance(sharedFolderId: string, accessInheritance: DBSHARINGAccessInheritance): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSetAccessInheritanceArgSerializer extends NSObject {

	static alloc(): DBSHARINGSetAccessInheritanceArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSetAccessInheritanceArg;

	static new(): DBSHARINGSetAccessInheritanceArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSetAccessInheritanceArg): NSDictionary<string, any>;
}

declare class DBSHARINGSetAccessInheritanceError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSetAccessInheritanceError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSetAccessInheritanceError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly tag: DBSHARINGSetAccessInheritanceErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSetAccessInheritanceErrorSerializer extends NSObject {

	static alloc(): DBSHARINGSetAccessInheritanceErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSetAccessInheritanceError;

	static new(): DBSHARINGSetAccessInheritanceErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSetAccessInheritanceError): NSDictionary<string, any>;
}

declare const enum DBSHARINGSetAccessInheritanceErrorTag {

	AccessError = 0,

	NoPermission = 1,

	Other = 2
}

declare class DBSHARINGShareFolderArg extends DBSHARINGShareFolderArgBase implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGShareFolderArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGShareFolderArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actions: NSArray<DBSHARINGFolderAction>;

	readonly linkSettings: DBSHARINGLinkSettings;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; aclUpdatePolicy: DBSHARINGAclUpdatePolicy; forceAsync: number; memberPolicy: DBSHARINGMemberPolicy; sharedLinkPolicy: DBSHARINGSharedLinkPolicy; viewerInfoPolicy: DBSHARINGViewerInfoPolicy; accessInheritance: DBSHARINGAccessInheritance; actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]; linkSettings: DBSHARINGLinkSettings; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPathAclUpdatePolicyForceAsyncMemberPolicySharedLinkPolicyViewerInfoPolicyAccessInheritanceActionsLinkSettings(path: string, aclUpdatePolicy: DBSHARINGAclUpdatePolicy, forceAsync: number, memberPolicy: DBSHARINGMemberPolicy, sharedLinkPolicy: DBSHARINGSharedLinkPolicy, viewerInfoPolicy: DBSHARINGViewerInfoPolicy, accessInheritance: DBSHARINGAccessInheritance, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[], linkSettings: DBSHARINGLinkSettings): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGShareFolderArgBase extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGShareFolderArgBase; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGShareFolderArgBase; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessInheritance: DBSHARINGAccessInheritance;

	readonly aclUpdatePolicy: DBSHARINGAclUpdatePolicy;

	readonly forceAsync: number;

	readonly memberPolicy: DBSHARINGMemberPolicy;

	readonly path: string;

	readonly sharedLinkPolicy: DBSHARINGSharedLinkPolicy;

	readonly viewerInfoPolicy: DBSHARINGViewerInfoPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: string; });

	constructor(o: { path: string; aclUpdatePolicy: DBSHARINGAclUpdatePolicy; forceAsync: number; memberPolicy: DBSHARINGMemberPolicy; sharedLinkPolicy: DBSHARINGSharedLinkPolicy; viewerInfoPolicy: DBSHARINGViewerInfoPolicy; accessInheritance: DBSHARINGAccessInheritance; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: string): this;

	initWithPathAclUpdatePolicyForceAsyncMemberPolicySharedLinkPolicyViewerInfoPolicyAccessInheritance(path: string, aclUpdatePolicy: DBSHARINGAclUpdatePolicy, forceAsync: number, memberPolicy: DBSHARINGMemberPolicy, sharedLinkPolicy: DBSHARINGSharedLinkPolicy, viewerInfoPolicy: DBSHARINGViewerInfoPolicy, accessInheritance: DBSHARINGAccessInheritance): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGShareFolderArgBaseSerializer extends NSObject {

	static alloc(): DBSHARINGShareFolderArgBaseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGShareFolderArgBase;

	static new(): DBSHARINGShareFolderArgBaseSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGShareFolderArgBase): NSDictionary<string, any>;
}

declare class DBSHARINGShareFolderArgSerializer extends NSObject {

	static alloc(): DBSHARINGShareFolderArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGShareFolderArg;

	static new(): DBSHARINGShareFolderArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGShareFolderArg): NSDictionary<string, any>;
}

declare class DBSHARINGShareFolderError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGShareFolderError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGShareFolderError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly badPath: DBSHARINGSharePathError;

	readonly tag: DBSHARINGShareFolderErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { badPath: DBSHARINGSharePathError; });

	constructor(o: { disallowedSharedLinkPolicy: void; });

	constructor(o: { emailUnverified: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	constructor(o: { teamPolicyDisallowsMemberPolicy: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithBadPath(badPath: DBSHARINGSharePathError): this;

	initWithDisallowedSharedLinkPolicy(): this;

	initWithEmailUnverified(): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	initWithTeamPolicyDisallowsMemberPolicy(): this;

	isBadPath(): boolean;

	isDisallowedSharedLinkPolicy(): boolean;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	isTeamPolicyDisallowsMemberPolicy(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGShareFolderErrorBase extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGShareFolderErrorBase; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGShareFolderErrorBase; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly badPath: DBSHARINGSharePathError;

	readonly tag: DBSHARINGShareFolderErrorBaseTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { badPath: DBSHARINGSharePathError; });

	constructor(o: { disallowedSharedLinkPolicy: void; });

	constructor(o: { emailUnverified: void; });

	constructor(o: { other: void; });

	constructor(o: { teamPolicyDisallowsMemberPolicy: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithBadPath(badPath: DBSHARINGSharePathError): this;

	initWithDisallowedSharedLinkPolicy(): this;

	initWithEmailUnverified(): this;

	initWithOther(): this;

	initWithTeamPolicyDisallowsMemberPolicy(): this;

	isBadPath(): boolean;

	isDisallowedSharedLinkPolicy(): boolean;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeamPolicyDisallowsMemberPolicy(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGShareFolderErrorBaseSerializer extends NSObject {

	static alloc(): DBSHARINGShareFolderErrorBaseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGShareFolderErrorBase;

	static new(): DBSHARINGShareFolderErrorBaseSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGShareFolderErrorBase): NSDictionary<string, any>;
}

declare const enum DBSHARINGShareFolderErrorBaseTag {

	EmailUnverified = 0,

	BadPath = 1,

	TeamPolicyDisallowsMemberPolicy = 2,

	DisallowedSharedLinkPolicy = 3,

	Other = 4
}

declare class DBSHARINGShareFolderErrorSerializer extends NSObject {

	static alloc(): DBSHARINGShareFolderErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGShareFolderError;

	static new(): DBSHARINGShareFolderErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGShareFolderError): NSDictionary<string, any>;
}

declare const enum DBSHARINGShareFolderErrorTag {

	EmailUnverified = 0,

	BadPath = 1,

	TeamPolicyDisallowsMemberPolicy = 2,

	DisallowedSharedLinkPolicy = 3,

	Other = 4,

	NoPermission = 5
}

declare class DBSHARINGShareFolderJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGShareFolderJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGShareFolderJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBSHARINGSharedFolderMetadata;

	readonly failed: DBSHARINGShareFolderError;

	readonly tag: DBSHARINGShareFolderJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBSHARINGSharedFolderMetadata; });

	constructor(o: { failed: DBSHARINGShareFolderError; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBSHARINGSharedFolderMetadata): this;

	initWithFailed(failed: DBSHARINGShareFolderError): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGShareFolderJobStatusSerializer extends NSObject {

	static alloc(): DBSHARINGShareFolderJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGShareFolderJobStatus;

	static new(): DBSHARINGShareFolderJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGShareFolderJobStatus): NSDictionary<string, any>;
}

declare const enum DBSHARINGShareFolderJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2
}

declare class DBSHARINGShareFolderLaunch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGShareFolderLaunch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGShareFolderLaunch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: DBSHARINGSharedFolderMetadata;

	readonly tag: DBSHARINGShareFolderLaunchTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: DBSHARINGSharedFolderMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: DBSHARINGSharedFolderMetadata): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGShareFolderLaunchSerializer extends NSObject {

	static alloc(): DBSHARINGShareFolderLaunchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGShareFolderLaunch;

	static new(): DBSHARINGShareFolderLaunchSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGShareFolderLaunch): NSDictionary<string, any>;
}

declare const enum DBSHARINGShareFolderLaunchTag {

	AsyncJobId = 0,

	Complete = 1
}

declare class DBSHARINGSharePathError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharePathError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharePathError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly alreadyShared: DBSHARINGSharedFolderMetadata;

	readonly tag: DBSHARINGSharePathErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { alreadyShared: DBSHARINGSharedFolderMetadata; });

	constructor(o: { containsAppFolder: void; });

	constructor(o: { containsSharedFolder: void; });

	constructor(o: { containsTeamFolder: void; });

	constructor(o: { insideAppFolder: void; });

	constructor(o: { insideOsxPackage: void; });

	constructor(o: { insidePublicFolder: void; });

	constructor(o: { insideSharedFolder: void; });

	constructor(o: { invalidPath: void; });

	constructor(o: { isAppFolder: void; });

	constructor(o: { isFile: void; });

	constructor(o: { isOsxPackage: void; });

	constructor(o: { isPublicFolder: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAlreadyShared(alreadyShared: DBSHARINGSharedFolderMetadata): this;

	initWithContainsAppFolder(): this;

	initWithContainsSharedFolder(): this;

	initWithContainsTeamFolder(): this;

	initWithInsideAppFolder(): this;

	initWithInsideOsxPackage(): this;

	initWithInsidePublicFolder(): this;

	initWithInsideSharedFolder(): this;

	initWithInvalidPath(): this;

	initWithIsAppFolder(): this;

	initWithIsFile(): this;

	initWithIsOsxPackage(): this;

	initWithIsPublicFolder(): this;

	initWithOther(): this;

	isAlreadyShared(): boolean;

	isContainsAppFolder(): boolean;

	isContainsSharedFolder(): boolean;

	isContainsTeamFolder(): boolean;

	isEqual(object: any): boolean;

	isInsideAppFolder(): boolean;

	isInsideOsxPackage(): boolean;

	isInsidePublicFolder(): boolean;

	isInsideSharedFolder(): boolean;

	isInvalidPath(): boolean;

	isIsAppFolder(): boolean;

	isIsFile(): boolean;

	isIsOsxPackage(): boolean;

	isIsPublicFolder(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharePathErrorSerializer extends NSObject {

	static alloc(): DBSHARINGSharePathErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharePathError;

	static new(): DBSHARINGSharePathErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharePathError): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharePathErrorTag {

	IsFile = 0,

	InsideSharedFolder = 1,

	ContainsSharedFolder = 2,

	ContainsAppFolder = 3,

	ContainsTeamFolder = 4,

	IsAppFolder = 5,

	InsideAppFolder = 6,

	IsPublicFolder = 7,

	InsidePublicFolder = 8,

	AlreadyShared = 9,

	InvalidPath = 10,

	IsOsxPackage = 11,

	InsideOsxPackage = 12,

	Other = 13
}

declare class DBSHARINGSharedContentLinkMetadata extends DBSHARINGSharedContentLinkMetadataBase implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedContentLinkMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedContentLinkMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly audienceExceptions: DBSHARINGAudienceExceptions;

	readonly url: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { audienceOptions: NSArray<DBSHARINGLinkAudience> | DBSHARINGLinkAudience[]; currentAudience: DBSHARINGLinkAudience; linkPermissions: NSArray<DBSHARINGLinkPermission> | DBSHARINGLinkPermission[]; passwordProtected: number; url: string; });

	constructor(o: { audienceOptions: NSArray<DBSHARINGLinkAudience> | DBSHARINGLinkAudience[]; currentAudience: DBSHARINGLinkAudience; linkPermissions: NSArray<DBSHARINGLinkPermission> | DBSHARINGLinkPermission[]; passwordProtected: number; url: string; accessLevel: DBSHARINGAccessLevel; audienceRestrictingSharedFolder: DBSHARINGAudienceRestrictingSharedFolder; expiry: Date; audienceExceptions: DBSHARINGAudienceExceptions; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAudienceOptionsCurrentAudienceLinkPermissionsPasswordProtectedUrl(audienceOptions: NSArray<DBSHARINGLinkAudience> | DBSHARINGLinkAudience[], currentAudience: DBSHARINGLinkAudience, linkPermissions: NSArray<DBSHARINGLinkPermission> | DBSHARINGLinkPermission[], passwordProtected: number, url: string): this;

	initWithAudienceOptionsCurrentAudienceLinkPermissionsPasswordProtectedUrlAccessLevelAudienceRestrictingSharedFolderExpiryAudienceExceptions(audienceOptions: NSArray<DBSHARINGLinkAudience> | DBSHARINGLinkAudience[], currentAudience: DBSHARINGLinkAudience, linkPermissions: NSArray<DBSHARINGLinkPermission> | DBSHARINGLinkPermission[], passwordProtected: number, url: string, accessLevel: DBSHARINGAccessLevel, audienceRestrictingSharedFolder: DBSHARINGAudienceRestrictingSharedFolder, expiry: Date, audienceExceptions: DBSHARINGAudienceExceptions): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedContentLinkMetadataBase extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedContentLinkMetadataBase; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedContentLinkMetadataBase; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessLevel: DBSHARINGAccessLevel;

	readonly audienceOptions: NSArray<DBSHARINGLinkAudience>;

	readonly audienceRestrictingSharedFolder: DBSHARINGAudienceRestrictingSharedFolder;

	readonly currentAudience: DBSHARINGLinkAudience;

	readonly expiry: Date;

	readonly linkPermissions: NSArray<DBSHARINGLinkPermission>;

	readonly passwordProtected: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { audienceOptions: NSArray<DBSHARINGLinkAudience> | DBSHARINGLinkAudience[]; currentAudience: DBSHARINGLinkAudience; linkPermissions: NSArray<DBSHARINGLinkPermission> | DBSHARINGLinkPermission[]; passwordProtected: number; });

	constructor(o: { audienceOptions: NSArray<DBSHARINGLinkAudience> | DBSHARINGLinkAudience[]; currentAudience: DBSHARINGLinkAudience; linkPermissions: NSArray<DBSHARINGLinkPermission> | DBSHARINGLinkPermission[]; passwordProtected: number; accessLevel: DBSHARINGAccessLevel; audienceRestrictingSharedFolder: DBSHARINGAudienceRestrictingSharedFolder; expiry: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAudienceOptionsCurrentAudienceLinkPermissionsPasswordProtected(audienceOptions: NSArray<DBSHARINGLinkAudience> | DBSHARINGLinkAudience[], currentAudience: DBSHARINGLinkAudience, linkPermissions: NSArray<DBSHARINGLinkPermission> | DBSHARINGLinkPermission[], passwordProtected: number): this;

	initWithAudienceOptionsCurrentAudienceLinkPermissionsPasswordProtectedAccessLevelAudienceRestrictingSharedFolderExpiry(audienceOptions: NSArray<DBSHARINGLinkAudience> | DBSHARINGLinkAudience[], currentAudience: DBSHARINGLinkAudience, linkPermissions: NSArray<DBSHARINGLinkPermission> | DBSHARINGLinkPermission[], passwordProtected: number, accessLevel: DBSHARINGAccessLevel, audienceRestrictingSharedFolder: DBSHARINGAudienceRestrictingSharedFolder, expiry: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedContentLinkMetadataBaseSerializer extends NSObject {

	static alloc(): DBSHARINGSharedContentLinkMetadataBaseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedContentLinkMetadataBase;

	static new(): DBSHARINGSharedContentLinkMetadataBaseSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedContentLinkMetadataBase): NSDictionary<string, any>;
}

declare class DBSHARINGSharedContentLinkMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGSharedContentLinkMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedContentLinkMetadata;

	static new(): DBSHARINGSharedContentLinkMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedContentLinkMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGSharedFileMembers extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedFileMembers; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedFileMembers; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly groups: NSArray<DBSHARINGGroupMembershipInfo>;

	readonly invitees: NSArray<DBSHARINGInviteeMembershipInfo>;

	readonly users: NSArray<DBSHARINGUserFileMembershipInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { users: NSArray<DBSHARINGUserFileMembershipInfo> | DBSHARINGUserFileMembershipInfo[]; groups: NSArray<DBSHARINGGroupMembershipInfo> | DBSHARINGGroupMembershipInfo[]; invitees: NSArray<DBSHARINGInviteeMembershipInfo> | DBSHARINGInviteeMembershipInfo[]; });

	constructor(o: { users: NSArray<DBSHARINGUserFileMembershipInfo> | DBSHARINGUserFileMembershipInfo[]; groups: NSArray<DBSHARINGGroupMembershipInfo> | DBSHARINGGroupMembershipInfo[]; invitees: NSArray<DBSHARINGInviteeMembershipInfo> | DBSHARINGInviteeMembershipInfo[]; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUsersGroupsInvitees(users: NSArray<DBSHARINGUserFileMembershipInfo> | DBSHARINGUserFileMembershipInfo[], groups: NSArray<DBSHARINGGroupMembershipInfo> | DBSHARINGGroupMembershipInfo[], invitees: NSArray<DBSHARINGInviteeMembershipInfo> | DBSHARINGInviteeMembershipInfo[]): this;

	initWithUsersGroupsInviteesCursor(users: NSArray<DBSHARINGUserFileMembershipInfo> | DBSHARINGUserFileMembershipInfo[], groups: NSArray<DBSHARINGGroupMembershipInfo> | DBSHARINGGroupMembershipInfo[], invitees: NSArray<DBSHARINGInviteeMembershipInfo> | DBSHARINGInviteeMembershipInfo[], cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedFileMembersSerializer extends NSObject {

	static alloc(): DBSHARINGSharedFileMembersSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedFileMembers;

	static new(): DBSHARINGSharedFileMembersSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedFileMembers): NSDictionary<string, any>;
}

declare class DBSHARINGSharedFileMetadata extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedFileMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedFileMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessType: DBSHARINGAccessLevel;

	readonly expectedLinkMetadata: DBSHARINGExpectedSharedContentLinkMetadata;

	readonly id_: string;

	readonly linkMetadata: DBSHARINGSharedContentLinkMetadata;

	readonly name: string;

	readonly ownerDisplayNames: NSArray<string>;

	readonly ownerTeam: DBUSERSTeam;

	readonly parentSharedFolderId: string;

	readonly pathDisplay: string;

	readonly pathLower: string;

	readonly permissions: NSArray<DBSHARINGFilePermission>;

	readonly policy: DBSHARINGFolderPolicy;

	readonly previewUrl: string;

	readonly timeInvited: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; name: string; policy: DBSHARINGFolderPolicy; previewUrl: string; });

	constructor(o: { id_: string; name: string; policy: DBSHARINGFolderPolicy; previewUrl: string; accessType: DBSHARINGAccessLevel; expectedLinkMetadata: DBSHARINGExpectedSharedContentLinkMetadata; linkMetadata: DBSHARINGSharedContentLinkMetadata; ownerDisplayNames: NSArray<string> | string[]; ownerTeam: DBUSERSTeam; parentSharedFolderId: string; pathDisplay: string; pathLower: string; permissions: NSArray<DBSHARINGFilePermission> | DBSHARINGFilePermission[]; timeInvited: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_NamePolicyPreviewUrl(id_: string, name: string, policy: DBSHARINGFolderPolicy, previewUrl: string): this;

	initWithId_NamePolicyPreviewUrlAccessTypeExpectedLinkMetadataLinkMetadataOwnerDisplayNamesOwnerTeamParentSharedFolderIdPathDisplayPathLowerPermissionsTimeInvited(id_: string, name: string, policy: DBSHARINGFolderPolicy, previewUrl: string, accessType: DBSHARINGAccessLevel, expectedLinkMetadata: DBSHARINGExpectedSharedContentLinkMetadata, linkMetadata: DBSHARINGSharedContentLinkMetadata, ownerDisplayNames: NSArray<string> | string[], ownerTeam: DBUSERSTeam, parentSharedFolderId: string, pathDisplay: string, pathLower: string, permissions: NSArray<DBSHARINGFilePermission> | DBSHARINGFilePermission[], timeInvited: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedFileMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGSharedFileMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedFileMetadata;

	static new(): DBSHARINGSharedFileMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedFileMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGSharedFolderAccessError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedFolderAccessError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedFolderAccessError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGSharedFolderAccessErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { emailUnverified: void; });

	constructor(o: { invalidId: void; });

	constructor(o: { notAMember: void; });

	constructor(o: { other: void; });

	constructor(o: { unmounted: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmailUnverified(): this;

	initWithInvalidId(): this;

	initWithNotAMember(): this;

	initWithOther(): this;

	initWithUnmounted(): this;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isInvalidId(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotAMember(): boolean;

	isOther(): boolean;

	isUnmounted(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharedFolderAccessErrorSerializer extends NSObject {

	static alloc(): DBSHARINGSharedFolderAccessErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedFolderAccessError;

	static new(): DBSHARINGSharedFolderAccessErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedFolderAccessError): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharedFolderAccessErrorTag {

	InvalidId = 0,

	NotAMember = 1,

	EmailUnverified = 2,

	Unmounted = 3,

	Other = 4
}

declare class DBSHARINGSharedFolderMemberError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedFolderMemberError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedFolderMemberError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly noExplicitAccess: DBSHARINGMemberAccessLevelResult;

	readonly tag: DBSHARINGSharedFolderMemberErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidDropboxId: void; });

	constructor(o: { noExplicitAccess: DBSHARINGMemberAccessLevelResult; });

	constructor(o: { notAMember: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidDropboxId(): this;

	initWithNoExplicitAccess(noExplicitAccess: DBSHARINGMemberAccessLevelResult): this;

	initWithNotAMember(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidDropboxId(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoExplicitAccess(): boolean;

	isNotAMember(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharedFolderMemberErrorSerializer extends NSObject {

	static alloc(): DBSHARINGSharedFolderMemberErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedFolderMemberError;

	static new(): DBSHARINGSharedFolderMemberErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedFolderMemberError): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharedFolderMemberErrorTag {

	InvalidDropboxId = 0,

	NotAMember = 1,

	NoExplicitAccess = 2,

	Other = 3
}

declare class DBSHARINGSharedFolderMembers extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedFolderMembers; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedFolderMembers; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly groups: NSArray<DBSHARINGGroupMembershipInfo>;

	readonly invitees: NSArray<DBSHARINGInviteeMembershipInfo>;

	readonly users: NSArray<DBSHARINGUserMembershipInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { users: NSArray<DBSHARINGUserMembershipInfo> | DBSHARINGUserMembershipInfo[]; groups: NSArray<DBSHARINGGroupMembershipInfo> | DBSHARINGGroupMembershipInfo[]; invitees: NSArray<DBSHARINGInviteeMembershipInfo> | DBSHARINGInviteeMembershipInfo[]; });

	constructor(o: { users: NSArray<DBSHARINGUserMembershipInfo> | DBSHARINGUserMembershipInfo[]; groups: NSArray<DBSHARINGGroupMembershipInfo> | DBSHARINGGroupMembershipInfo[]; invitees: NSArray<DBSHARINGInviteeMembershipInfo> | DBSHARINGInviteeMembershipInfo[]; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUsersGroupsInvitees(users: NSArray<DBSHARINGUserMembershipInfo> | DBSHARINGUserMembershipInfo[], groups: NSArray<DBSHARINGGroupMembershipInfo> | DBSHARINGGroupMembershipInfo[], invitees: NSArray<DBSHARINGInviteeMembershipInfo> | DBSHARINGInviteeMembershipInfo[]): this;

	initWithUsersGroupsInviteesCursor(users: NSArray<DBSHARINGUserMembershipInfo> | DBSHARINGUserMembershipInfo[], groups: NSArray<DBSHARINGGroupMembershipInfo> | DBSHARINGGroupMembershipInfo[], invitees: NSArray<DBSHARINGInviteeMembershipInfo> | DBSHARINGInviteeMembershipInfo[], cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedFolderMembersSerializer extends NSObject {

	static alloc(): DBSHARINGSharedFolderMembersSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedFolderMembers;

	static new(): DBSHARINGSharedFolderMembersSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedFolderMembers): NSDictionary<string, any>;
}

declare class DBSHARINGSharedFolderMetadata extends DBSHARINGSharedFolderMetadataBase implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedFolderMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedFolderMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessInheritance: DBSHARINGAccessInheritance;

	readonly linkMetadata: DBSHARINGSharedContentLinkMetadata;

	readonly name: string;

	readonly permissions: NSArray<DBSHARINGFolderPermission>;

	readonly policy: DBSHARINGFolderPolicy;

	readonly previewUrl: string;

	readonly sharedFolderId: string;

	readonly timeInvited: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessType: DBSHARINGAccessLevel; isInsideTeamFolder: number; isTeamFolder: number; name: string; policy: DBSHARINGFolderPolicy; previewUrl: string; sharedFolderId: string; timeInvited: Date; });

	constructor(o: { accessType: DBSHARINGAccessLevel; isInsideTeamFolder: number; isTeamFolder: number; name: string; policy: DBSHARINGFolderPolicy; previewUrl: string; sharedFolderId: string; timeInvited: Date; ownerDisplayNames: NSArray<string> | string[]; ownerTeam: DBUSERSTeam; parentSharedFolderId: string; pathLower: string; linkMetadata: DBSHARINGSharedContentLinkMetadata; permissions: NSArray<DBSHARINGFolderPermission> | DBSHARINGFolderPermission[]; accessInheritance: DBSHARINGAccessInheritance; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessTypeIsInsideTeamFolderIsTeamFolderNamePolicyPreviewUrlSharedFolderIdTimeInvited(accessType: DBSHARINGAccessLevel, isInsideTeamFolder: number, isTeamFolder: number, name: string, policy: DBSHARINGFolderPolicy, previewUrl: string, sharedFolderId: string, timeInvited: Date): this;

	initWithAccessTypeIsInsideTeamFolderIsTeamFolderNamePolicyPreviewUrlSharedFolderIdTimeInvitedOwnerDisplayNamesOwnerTeamParentSharedFolderIdPathLowerLinkMetadataPermissionsAccessInheritance(accessType: DBSHARINGAccessLevel, isInsideTeamFolder: number, isTeamFolder: number, name: string, policy: DBSHARINGFolderPolicy, previewUrl: string, sharedFolderId: string, timeInvited: Date, ownerDisplayNames: NSArray<string> | string[], ownerTeam: DBUSERSTeam, parentSharedFolderId: string, pathLower: string, linkMetadata: DBSHARINGSharedContentLinkMetadata, permissions: NSArray<DBSHARINGFolderPermission> | DBSHARINGFolderPermission[], accessInheritance: DBSHARINGAccessInheritance): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedFolderMetadataBase extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedFolderMetadataBase; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedFolderMetadataBase; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessType: DBSHARINGAccessLevel;

	readonly isInsideTeamFolder: number;

	readonly isTeamFolder: number;

	readonly ownerDisplayNames: NSArray<string>;

	readonly ownerTeam: DBUSERSTeam;

	readonly parentSharedFolderId: string;

	readonly pathLower: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessType: DBSHARINGAccessLevel; isInsideTeamFolder: number; isTeamFolder: number; });

	constructor(o: { accessType: DBSHARINGAccessLevel; isInsideTeamFolder: number; isTeamFolder: number; ownerDisplayNames: NSArray<string> | string[]; ownerTeam: DBUSERSTeam; parentSharedFolderId: string; pathLower: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessTypeIsInsideTeamFolderIsTeamFolder(accessType: DBSHARINGAccessLevel, isInsideTeamFolder: number, isTeamFolder: number): this;

	initWithAccessTypeIsInsideTeamFolderIsTeamFolderOwnerDisplayNamesOwnerTeamParentSharedFolderIdPathLower(accessType: DBSHARINGAccessLevel, isInsideTeamFolder: number, isTeamFolder: number, ownerDisplayNames: NSArray<string> | string[], ownerTeam: DBUSERSTeam, parentSharedFolderId: string, pathLower: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedFolderMetadataBaseSerializer extends NSObject {

	static alloc(): DBSHARINGSharedFolderMetadataBaseSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedFolderMetadataBase;

	static new(): DBSHARINGSharedFolderMetadataBaseSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedFolderMetadataBase): NSDictionary<string, any>;
}

declare class DBSHARINGSharedFolderMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGSharedFolderMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedFolderMetadata;

	static new(): DBSHARINGSharedFolderMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedFolderMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGSharedLinkAccessFailureReason extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedLinkAccessFailureReason; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedLinkAccessFailureReason; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGSharedLinkAccessFailureReasonTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { emailVerifyRequired: void; });

	constructor(o: { loginRequired: void; });

	constructor(o: { other: void; });

	constructor(o: { ownerOnly: void; });

	constructor(o: { passwordRequired: void; });

	constructor(o: { teamOnly: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmailVerifyRequired(): this;

	initWithLoginRequired(): this;

	initWithOther(): this;

	initWithOwnerOnly(): this;

	initWithPasswordRequired(): this;

	initWithTeamOnly(): this;

	isEmailVerifyRequired(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLoginRequired(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isOwnerOnly(): boolean;

	isPasswordRequired(): boolean;

	isTeamOnly(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharedLinkAccessFailureReasonSerializer extends NSObject {

	static alloc(): DBSHARINGSharedLinkAccessFailureReasonSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedLinkAccessFailureReason;

	static new(): DBSHARINGSharedLinkAccessFailureReasonSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedLinkAccessFailureReason): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharedLinkAccessFailureReasonTag {

	LoginRequired = 0,

	EmailVerifyRequired = 1,

	PasswordRequired = 2,

	TeamOnly = 3,

	OwnerOnly = 4,

	Other = 5
}

declare class DBSHARINGSharedLinkError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedLinkError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedLinkError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGSharedLinkErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { sharedLinkAccessDenied: void; });

	constructor(o: { sharedLinkNotFound: void; });

	constructor(o: { unsupportedLinkType: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithSharedLinkAccessDenied(): this;

	initWithSharedLinkNotFound(): this;

	initWithUnsupportedLinkType(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSharedLinkAccessDenied(): boolean;

	isSharedLinkNotFound(): boolean;

	isUnsupportedLinkType(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharedLinkErrorSerializer extends NSObject {

	static alloc(): DBSHARINGSharedLinkErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedLinkError;

	static new(): DBSHARINGSharedLinkErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedLinkError): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharedLinkErrorTag {

	SharedLinkNotFound = 0,

	SharedLinkAccessDenied = 1,

	UnsupportedLinkType = 2,

	Other = 3
}

declare class DBSHARINGSharedLinkMetadata extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedLinkMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedLinkMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly contentOwnerTeamInfo: DBUSERSTeam;

	readonly expires: Date;

	readonly id_: string;

	readonly linkPermissions: DBSHARINGLinkPermissions;

	readonly name: string;

	readonly pathLower: string;

	readonly teamMemberInfo: DBSHARINGTeamMemberInfo;

	readonly url: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { url: string; name: string; linkPermissions: DBSHARINGLinkPermissions; });

	constructor(o: { url: string; name: string; linkPermissions: DBSHARINGLinkPermissions; id_: string; expires: Date; pathLower: string; teamMemberInfo: DBSHARINGTeamMemberInfo; contentOwnerTeamInfo: DBUSERSTeam; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUrlNameLinkPermissions(url: string, name: string, linkPermissions: DBSHARINGLinkPermissions): this;

	initWithUrlNameLinkPermissionsId_ExpiresPathLowerTeamMemberInfoContentOwnerTeamInfo(url: string, name: string, linkPermissions: DBSHARINGLinkPermissions, id_: string, expires: Date, pathLower: string, teamMemberInfo: DBSHARINGTeamMemberInfo, contentOwnerTeamInfo: DBUSERSTeam): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedLinkMetadataSerializer extends NSObject {

	static alloc(): DBSHARINGSharedLinkMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedLinkMetadata;

	static new(): DBSHARINGSharedLinkMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedLinkMetadata): NSDictionary<string, any>;
}

declare class DBSHARINGSharedLinkPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedLinkPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedLinkPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGSharedLinkPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { anyone: void; });

	constructor(o: { members: void; });

	constructor(o: { other: void; });

	constructor(o: { team: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAnyone(): this;

	initWithMembers(): this;

	initWithOther(): this;

	initWithTeam(): this;

	isAnyone(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMembers(): boolean;

	isOther(): boolean;

	isTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharedLinkPolicySerializer extends NSObject {

	static alloc(): DBSHARINGSharedLinkPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedLinkPolicy;

	static new(): DBSHARINGSharedLinkPolicySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedLinkPolicy): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharedLinkPolicyTag {

	Anyone = 0,

	Team = 1,

	Members = 2,

	Other = 3
}

declare class DBSHARINGSharedLinkSettings extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedLinkSettings; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedLinkSettings; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly expires: Date;

	readonly linkPassword: string;

	readonly requestedVisibility: DBSHARINGRequestedVisibility;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { requestedVisibility: DBSHARINGRequestedVisibility; linkPassword: string; expires: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithRequestedVisibilityLinkPasswordExpires(requestedVisibility: DBSHARINGRequestedVisibility, linkPassword: string, expires: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGSharedLinkSettingsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharedLinkSettingsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharedLinkSettingsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGSharedLinkSettingsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidSettings: void; });

	constructor(o: { notAuthorized: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidSettings(): this;

	initWithNotAuthorized(): this;

	isEqual(object: any): boolean;

	isInvalidSettings(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotAuthorized(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharedLinkSettingsErrorSerializer extends NSObject {

	static alloc(): DBSHARINGSharedLinkSettingsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedLinkSettingsError;

	static new(): DBSHARINGSharedLinkSettingsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedLinkSettingsError): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharedLinkSettingsErrorTag {

	InvalidSettings = 0,

	NotAuthorized = 1
}

declare class DBSHARINGSharedLinkSettingsSerializer extends NSObject {

	static alloc(): DBSHARINGSharedLinkSettingsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharedLinkSettings;

	static new(): DBSHARINGSharedLinkSettingsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharedLinkSettings): NSDictionary<string, any>;
}

declare class DBSHARINGSharingFileAccessError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharingFileAccessError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharingFileAccessError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGSharingFileAccessErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { insideOsxPackage: void; });

	constructor(o: { insidePublicFolder: void; });

	constructor(o: { invalidFile: void; });

	constructor(o: { isFolder: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInsideOsxPackage(): this;

	initWithInsidePublicFolder(): this;

	initWithInvalidFile(): this;

	initWithIsFolder(): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInsideOsxPackage(): boolean;

	isInsidePublicFolder(): boolean;

	isInvalidFile(): boolean;

	isIsFolder(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharingFileAccessErrorSerializer extends NSObject {

	static alloc(): DBSHARINGSharingFileAccessErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharingFileAccessError;

	static new(): DBSHARINGSharingFileAccessErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharingFileAccessError): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharingFileAccessErrorTag {

	NoPermission = 0,

	InvalidFile = 1,

	IsFolder = 2,

	InsidePublicFolder = 3,

	InsideOsxPackage = 4,

	Other = 5
}

declare class DBSHARINGSharingUserError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGSharingUserError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGSharingUserError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGSharingUserErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { emailUnverified: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmailUnverified(): this;

	initWithOther(): this;

	isEmailUnverified(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGSharingUserErrorSerializer extends NSObject {

	static alloc(): DBSHARINGSharingUserErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGSharingUserError;

	static new(): DBSHARINGSharingUserErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGSharingUserError): NSDictionary<string, any>;
}

declare const enum DBSHARINGSharingUserErrorTag {

	EmailUnverified = 0,

	Other = 1
}

declare class DBSHARINGTeamMemberInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGTeamMemberInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGTeamMemberInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly displayName: string;

	readonly memberId: string;

	readonly teamInfo: DBUSERSTeam;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamInfo: DBUSERSTeam; displayName: string; });

	constructor(o: { teamInfo: DBUSERSTeam; displayName: string; memberId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamInfoDisplayName(teamInfo: DBUSERSTeam, displayName: string): this;

	initWithTeamInfoDisplayNameMemberId(teamInfo: DBUSERSTeam, displayName: string, memberId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGTeamMemberInfoSerializer extends NSObject {

	static alloc(): DBSHARINGTeamMemberInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGTeamMemberInfo;

	static new(): DBSHARINGTeamMemberInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGTeamMemberInfo): NSDictionary<string, any>;
}

declare class DBSHARINGTransferFolderArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGTransferFolderArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGTransferFolderArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedFolderId: string;

	readonly toDropboxId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; toDropboxId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderIdToDropboxId(sharedFolderId: string, toDropboxId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGTransferFolderArgSerializer extends NSObject {

	static alloc(): DBSHARINGTransferFolderArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGTransferFolderArg;

	static new(): DBSHARINGTransferFolderArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGTransferFolderArg): NSDictionary<string, any>;
}

declare class DBSHARINGTransferFolderError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGTransferFolderError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGTransferFolderError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly tag: DBSHARINGTransferFolderErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { DNewOwnerEmailUnverified: void; });

	constructor(o: { DNewOwnerNotAMember: void; });

	constructor(o: { DNewOwnerUnmounted: void; });

	constructor(o: { invalidDropboxId: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	constructor(o: { teamFolder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithDNewOwnerEmailUnverified(): this;

	initWithDNewOwnerNotAMember(): this;

	initWithDNewOwnerUnmounted(): this;

	initWithInvalidDropboxId(): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	initWithTeamFolder(): this;

	isAccessError(): boolean;

	isDNewOwnerEmailUnverified(): boolean;

	isDNewOwnerNotAMember(): boolean;

	isDNewOwnerUnmounted(): boolean;

	isEqual(object: any): boolean;

	isInvalidDropboxId(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	isTeamFolder(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGTransferFolderErrorSerializer extends NSObject {

	static alloc(): DBSHARINGTransferFolderErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGTransferFolderError;

	static new(): DBSHARINGTransferFolderErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGTransferFolderError): NSDictionary<string, any>;
}

declare const enum DBSHARINGTransferFolderErrorTag {

	AccessError = 0,

	InvalidDropboxId = 1,

	DNewOwnerNotAMember = 2,

	DNewOwnerUnmounted = 3,

	DNewOwnerEmailUnverified = 4,

	TeamFolder = 5,

	NoPermission = 6,

	Other = 7
}

declare class DBSHARINGUnmountFolderArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUnmountFolderArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUnmountFolderArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderId(sharedFolderId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUnmountFolderArgSerializer extends NSObject {

	static alloc(): DBSHARINGUnmountFolderArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUnmountFolderArg;

	static new(): DBSHARINGUnmountFolderArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUnmountFolderArg): NSDictionary<string, any>;
}

declare class DBSHARINGUnmountFolderError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUnmountFolderError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUnmountFolderError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly tag: DBSHARINGUnmountFolderErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { noPermission: void; });

	constructor(o: { notUnmountable: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithNoPermission(): this;

	initWithNotUnmountable(): this;

	initWithOther(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isNotUnmountable(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGUnmountFolderErrorSerializer extends NSObject {

	static alloc(): DBSHARINGUnmountFolderErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUnmountFolderError;

	static new(): DBSHARINGUnmountFolderErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUnmountFolderError): NSDictionary<string, any>;
}

declare const enum DBSHARINGUnmountFolderErrorTag {

	AccessError = 0,

	NoPermission = 1,

	NotUnmountable = 2,

	Other = 3
}

declare class DBSHARINGUnshareFileArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUnshareFileArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUnshareFileArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly file: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFile(file: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUnshareFileArgSerializer extends NSObject {

	static alloc(): DBSHARINGUnshareFileArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUnshareFileArg;

	static new(): DBSHARINGUnshareFileArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUnshareFileArg): NSDictionary<string, any>;
}

declare class DBSHARINGUnshareFileError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUnshareFileError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUnshareFileError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharingFileAccessError;

	readonly tag: DBSHARINGUnshareFileErrorTag;

	readonly userError: DBSHARINGSharingUserError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharingFileAccessError; });

	constructor(o: { other: void; });

	constructor(o: { userError: DBSHARINGSharingUserError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharingFileAccessError): this;

	initWithOther(): this;

	initWithUserError(userError: DBSHARINGSharingUserError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUserError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGUnshareFileErrorSerializer extends NSObject {

	static alloc(): DBSHARINGUnshareFileErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUnshareFileError;

	static new(): DBSHARINGUnshareFileErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUnshareFileError): NSDictionary<string, any>;
}

declare const enum DBSHARINGUnshareFileErrorTag {

	UserError = 0,

	AccessError = 1,

	Other = 2
}

declare class DBSHARINGUnshareFolderArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUnshareFolderArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUnshareFolderArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly leaveACopy: number;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; });

	constructor(o: { sharedFolderId: string; leaveACopy: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderId(sharedFolderId: string): this;

	initWithSharedFolderIdLeaveACopy(sharedFolderId: string, leaveACopy: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUnshareFolderArgSerializer extends NSObject {

	static alloc(): DBSHARINGUnshareFolderArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUnshareFolderArg;

	static new(): DBSHARINGUnshareFolderArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUnshareFolderArg): NSDictionary<string, any>;
}

declare class DBSHARINGUnshareFolderError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUnshareFolderError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUnshareFolderError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly tag: DBSHARINGUnshareFolderErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	constructor(o: { teamFolder: void; });

	constructor(o: { tooManyFiles: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	initWithTeamFolder(): this;

	initWithTooManyFiles(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	isTeamFolder(): boolean;

	isTooManyFiles(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGUnshareFolderErrorSerializer extends NSObject {

	static alloc(): DBSHARINGUnshareFolderErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUnshareFolderError;

	static new(): DBSHARINGUnshareFolderErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUnshareFolderError): NSDictionary<string, any>;
}

declare const enum DBSHARINGUnshareFolderErrorTag {

	AccessError = 0,

	TeamFolder = 1,

	NoPermission = 2,

	TooManyFiles = 3,

	Other = 4
}

declare class DBSHARINGUpdateFileMemberArgs extends DBSHARINGChangeFileMemberAccessArgs implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUpdateFileMemberArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUpdateFileMemberArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUpdateFileMemberArgsSerializer extends NSObject {

	static alloc(): DBSHARINGUpdateFileMemberArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUpdateFileMemberArgs;

	static new(): DBSHARINGUpdateFileMemberArgsSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUpdateFileMemberArgs): NSDictionary<string, any>;
}

declare class DBSHARINGUpdateFolderMemberArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUpdateFolderMemberArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUpdateFolderMemberArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessLevel: DBSHARINGAccessLevel;

	readonly member: DBSHARINGMemberSelector;

	readonly sharedFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; member: DBSHARINGMemberSelector; accessLevel: DBSHARINGAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderIdMemberAccessLevel(sharedFolderId: string, member: DBSHARINGMemberSelector, accessLevel: DBSHARINGAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUpdateFolderMemberArgSerializer extends NSObject {

	static alloc(): DBSHARINGUpdateFolderMemberArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUpdateFolderMemberArg;

	static new(): DBSHARINGUpdateFolderMemberArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUpdateFolderMemberArg): NSDictionary<string, any>;
}

declare class DBSHARINGUpdateFolderMemberError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUpdateFolderMemberError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUpdateFolderMemberError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly memberError: DBSHARINGSharedFolderMemberError;

	readonly noExplicitAccess: DBSHARINGAddFolderMemberError;

	readonly tag: DBSHARINGUpdateFolderMemberErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { insufficientPlan: void; });

	constructor(o: { memberError: DBSHARINGSharedFolderMemberError; });

	constructor(o: { noExplicitAccess: DBSHARINGAddFolderMemberError; });

	constructor(o: { noPermission: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithInsufficientPlan(): this;

	initWithMemberError(memberError: DBSHARINGSharedFolderMemberError): this;

	initWithNoExplicitAccess(noExplicitAccess: DBSHARINGAddFolderMemberError): this;

	initWithNoPermission(): this;

	initWithOther(): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isInsufficientPlan(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberError(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoExplicitAccess(): boolean;

	isNoPermission(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGUpdateFolderMemberErrorSerializer extends NSObject {

	static alloc(): DBSHARINGUpdateFolderMemberErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUpdateFolderMemberError;

	static new(): DBSHARINGUpdateFolderMemberErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUpdateFolderMemberError): NSDictionary<string, any>;
}

declare const enum DBSHARINGUpdateFolderMemberErrorTag {

	AccessError = 0,

	MemberError = 1,

	NoExplicitAccess = 2,

	InsufficientPlan = 3,

	NoPermission = 4,

	Other = 5
}

declare class DBSHARINGUpdateFolderPolicyArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUpdateFolderPolicyArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUpdateFolderPolicyArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly aclUpdatePolicy: DBSHARINGAclUpdatePolicy;

	readonly actions: NSArray<DBSHARINGFolderAction>;

	readonly linkSettings: DBSHARINGLinkSettings;

	readonly memberPolicy: DBSHARINGMemberPolicy;

	readonly sharedFolderId: string;

	readonly sharedLinkPolicy: DBSHARINGSharedLinkPolicy;

	readonly viewerInfoPolicy: DBSHARINGViewerInfoPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderId: string; });

	constructor(o: { sharedFolderId: string; memberPolicy: DBSHARINGMemberPolicy; aclUpdatePolicy: DBSHARINGAclUpdatePolicy; viewerInfoPolicy: DBSHARINGViewerInfoPolicy; sharedLinkPolicy: DBSHARINGSharedLinkPolicy; linkSettings: DBSHARINGLinkSettings; actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderId(sharedFolderId: string): this;

	initWithSharedFolderIdMemberPolicyAclUpdatePolicyViewerInfoPolicySharedLinkPolicyLinkSettingsActions(sharedFolderId: string, memberPolicy: DBSHARINGMemberPolicy, aclUpdatePolicy: DBSHARINGAclUpdatePolicy, viewerInfoPolicy: DBSHARINGViewerInfoPolicy, sharedLinkPolicy: DBSHARINGSharedLinkPolicy, linkSettings: DBSHARINGLinkSettings, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUpdateFolderPolicyArgSerializer extends NSObject {

	static alloc(): DBSHARINGUpdateFolderPolicyArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUpdateFolderPolicyArg;

	static new(): DBSHARINGUpdateFolderPolicyArgSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUpdateFolderPolicyArg): NSDictionary<string, any>;
}

declare class DBSHARINGUpdateFolderPolicyError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUpdateFolderPolicyError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUpdateFolderPolicyError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBSHARINGSharedFolderAccessError;

	readonly tag: DBSHARINGUpdateFolderPolicyErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBSHARINGSharedFolderAccessError; });

	constructor(o: { disallowedSharedLinkPolicy: void; });

	constructor(o: { noPermission: void; });

	constructor(o: { notOnTeam: void; });

	constructor(o: { other: void; });

	constructor(o: { teamFolder: void; });

	constructor(o: { teamPolicyDisallowsMemberPolicy: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBSHARINGSharedFolderAccessError): this;

	initWithDisallowedSharedLinkPolicy(): this;

	initWithNoPermission(): this;

	initWithNotOnTeam(): this;

	initWithOther(): this;

	initWithTeamFolder(): this;

	initWithTeamPolicyDisallowsMemberPolicy(): this;

	isAccessError(): boolean;

	isDisallowedSharedLinkPolicy(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoPermission(): boolean;

	isNotOnTeam(): boolean;

	isOther(): boolean;

	isTeamFolder(): boolean;

	isTeamPolicyDisallowsMemberPolicy(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGUpdateFolderPolicyErrorSerializer extends NSObject {

	static alloc(): DBSHARINGUpdateFolderPolicyErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUpdateFolderPolicyError;

	static new(): DBSHARINGUpdateFolderPolicyErrorSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUpdateFolderPolicyError): NSDictionary<string, any>;
}

declare const enum DBSHARINGUpdateFolderPolicyErrorTag {

	AccessError = 0,

	NotOnTeam = 1,

	TeamPolicyDisallowsMemberPolicy = 2,

	DisallowedSharedLinkPolicy = 3,

	NoPermission = 4,

	TeamFolder = 5,

	Other = 6
}

declare class DBSHARINGUserAuthRoutes extends NSObject {

	static alloc(): DBSHARINGUserAuthRoutes; // inherited from NSObject

	static new(): DBSHARINGUserAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	addFileMemberMembers(file: string, members: NSArray<DBSHARINGMemberSelector> | DBSHARINGMemberSelector[]): DBRpcTask<NSArray<DBSHARINGFileMemberActionResult>, DBSHARINGAddFileMemberError>;

	addFileMemberMembersCustomMessageQuietAccessLevelAddMessageAsComment(file: string, members: NSArray<DBSHARINGMemberSelector> | DBSHARINGMemberSelector[], customMessage: string, quiet: number, accessLevel: DBSHARINGAccessLevel, addMessageAsComment: number): DBRpcTask<NSArray<DBSHARINGFileMemberActionResult>, DBSHARINGAddFileMemberError>;

	addFolderMemberMembers(sharedFolderId: string, members: NSArray<DBSHARINGAddMember> | DBSHARINGAddMember[]): DBRpcTask<DBNilObject, DBSHARINGAddFolderMemberError>;

	addFolderMemberMembersQuietCustomMessage(sharedFolderId: string, members: NSArray<DBSHARINGAddMember> | DBSHARINGAddMember[], quiet: number, customMessage: string): DBRpcTask<DBNilObject, DBSHARINGAddFolderMemberError>;

	changeFileMemberAccessMemberAccessLevel(file: string, member: DBSHARINGMemberSelector, accessLevel: DBSHARINGAccessLevel): DBRpcTask<DBSHARINGFileMemberActionResult, DBSHARINGFileMemberActionError>;

	checkJobStatus(asyncJobId: string): DBRpcTask<DBSHARINGJobStatus, DBASYNCPollError>;

	checkRemoveMemberJobStatus(asyncJobId: string): DBRpcTask<DBSHARINGRemoveMemberJobStatus, DBASYNCPollError>;

	checkShareJobStatus(asyncJobId: string): DBRpcTask<DBSHARINGShareFolderJobStatus, DBASYNCPollError>;

	createSharedLink(path: string): DBRpcTask<DBSHARINGPathLinkMetadata, DBSHARINGCreateSharedLinkError>;

	createSharedLinkShortUrlPendingUpload(path: string, shortUrl: number, pendingUpload: DBSHARINGPendingUploadMode): DBRpcTask<DBSHARINGPathLinkMetadata, DBSHARINGCreateSharedLinkError>;

	createSharedLinkWithSettings(path: string): DBRpcTask<DBSHARINGSharedLinkMetadata, DBSHARINGCreateSharedLinkWithSettingsError>;

	createSharedLinkWithSettingsSettings(path: string, settings: DBSHARINGSharedLinkSettings): DBRpcTask<DBSHARINGSharedLinkMetadata, DBSHARINGCreateSharedLinkWithSettingsError>;

	getFileMetadata(file: string): DBRpcTask<DBSHARINGSharedFileMetadata, DBSHARINGGetFileMetadataError>;

	getFileMetadataActions(file: string, actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]): DBRpcTask<DBSHARINGSharedFileMetadata, DBSHARINGGetFileMetadataError>;

	getFileMetadataBatch(files: NSArray<string> | string[]): DBRpcTask<NSArray<DBSHARINGGetFileMetadataBatchResult>, DBSHARINGSharingUserError>;

	getFileMetadataBatchActions(files: NSArray<string> | string[], actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]): DBRpcTask<NSArray<DBSHARINGGetFileMetadataBatchResult>, DBSHARINGSharingUserError>;

	getFolderMetadata(sharedFolderId: string): DBRpcTask<DBSHARINGSharedFolderMetadata, DBSHARINGSharedFolderAccessError>;

	getFolderMetadataActions(sharedFolderId: string, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]): DBRpcTask<DBSHARINGSharedFolderMetadata, DBSHARINGSharedFolderAccessError>;

	getSharedLinkFileData(url: string): DBDownloadDataTask<DBSHARINGSharedLinkMetadata, DBSHARINGGetSharedLinkFileError>;

	getSharedLinkFileDataByteOffsetStartByteOffsetEnd(url: string, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBSHARINGSharedLinkMetadata, DBSHARINGGetSharedLinkFileError>;

	getSharedLinkFileDataPathLinkPassword(url: string, path: string, linkPassword: string): DBDownloadDataTask<DBSHARINGSharedLinkMetadata, DBSHARINGGetSharedLinkFileError>;

	getSharedLinkFileDataPathLinkPasswordByteOffsetStartByteOffsetEnd(url: string, path: string, linkPassword: string, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<DBSHARINGSharedLinkMetadata, DBSHARINGGetSharedLinkFileError>;

	getSharedLinkFileUrlOverwriteDestination(url: string, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBSHARINGSharedLinkMetadata, DBSHARINGGetSharedLinkFileError>;

	getSharedLinkFileUrlOverwriteDestinationByteOffsetStartByteOffsetEnd(url: string, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBSHARINGSharedLinkMetadata, DBSHARINGGetSharedLinkFileError>;

	getSharedLinkFileUrlPathLinkPasswordOverwriteDestination(url: string, path: string, linkPassword: string, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<DBSHARINGSharedLinkMetadata, DBSHARINGGetSharedLinkFileError>;

	getSharedLinkFileUrlPathLinkPasswordOverwriteDestinationByteOffsetStartByteOffsetEnd(url: string, path: string, linkPassword: string, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<DBSHARINGSharedLinkMetadata, DBSHARINGGetSharedLinkFileError>;

	getSharedLinkMetadata(url: string): DBRpcTask<DBSHARINGSharedLinkMetadata, DBSHARINGSharedLinkError>;

	getSharedLinkMetadataPathLinkPassword(url: string, path: string, linkPassword: string): DBRpcTask<DBSHARINGSharedLinkMetadata, DBSHARINGSharedLinkError>;

	getSharedLinks(): DBRpcTask<DBSHARINGGetSharedLinksResult, DBSHARINGGetSharedLinksError>;

	init(client: DBTransportClient): this;

	listFileMembers(file: string): DBRpcTask<DBSHARINGSharedFileMembers, DBSHARINGListFileMembersError>;

	listFileMembersActionsIncludeInheritedLimit(file: string, actions: NSArray<DBSHARINGMemberAction> | DBSHARINGMemberAction[], includeInherited: number, limit: number): DBRpcTask<DBSHARINGSharedFileMembers, DBSHARINGListFileMembersError>;

	listFileMembersBatch(files: NSArray<string> | string[]): DBRpcTask<NSArray<DBSHARINGListFileMembersBatchResult>, DBSHARINGSharingUserError>;

	listFileMembersBatchLimit(files: NSArray<string> | string[], limit: number): DBRpcTask<NSArray<DBSHARINGListFileMembersBatchResult>, DBSHARINGSharingUserError>;

	listFileMembersContinue(cursor: string): DBRpcTask<DBSHARINGSharedFileMembers, DBSHARINGListFileMembersContinueError>;

	listFolderMembers(sharedFolderId: string): DBRpcTask<DBSHARINGSharedFolderMembers, DBSHARINGSharedFolderAccessError>;

	listFolderMembersActionsLimit(sharedFolderId: string, actions: NSArray<DBSHARINGMemberAction> | DBSHARINGMemberAction[], limit: number): DBRpcTask<DBSHARINGSharedFolderMembers, DBSHARINGSharedFolderAccessError>;

	listFolderMembersContinue(cursor: string): DBRpcTask<DBSHARINGSharedFolderMembers, DBSHARINGListFolderMembersContinueError>;

	listFolders(): DBRpcTask<DBSHARINGListFoldersResult, DBNilObject>;

	listFoldersActions(limit: number, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]): DBRpcTask<DBSHARINGListFoldersResult, DBNilObject>;

	listFoldersContinue(cursor: string): DBRpcTask<DBSHARINGListFoldersResult, DBSHARINGListFoldersContinueError>;

	listMountableFolders(): DBRpcTask<DBSHARINGListFoldersResult, DBNilObject>;

	listMountableFoldersActions(limit: number, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]): DBRpcTask<DBSHARINGListFoldersResult, DBNilObject>;

	listMountableFoldersContinue(cursor: string): DBRpcTask<DBSHARINGListFoldersResult, DBSHARINGListFoldersContinueError>;

	listReceivedFiles(): DBRpcTask<DBSHARINGListFilesResult, DBSHARINGSharingUserError>;

	listReceivedFilesActions(limit: number, actions: NSArray<DBSHARINGFileAction> | DBSHARINGFileAction[]): DBRpcTask<DBSHARINGListFilesResult, DBSHARINGSharingUserError>;

	listReceivedFilesContinue(cursor: string): DBRpcTask<DBSHARINGListFilesResult, DBSHARINGListFilesContinueError>;

	listSharedLinks(): DBRpcTask<DBSHARINGListSharedLinksResult, DBSHARINGListSharedLinksError>;

	listSharedLinksCursorDirectOnly(path: string, cursor: string, directOnly: number): DBRpcTask<DBSHARINGListSharedLinksResult, DBSHARINGListSharedLinksError>;

	modifySharedLinkSettingsSettings(url: string, settings: DBSHARINGSharedLinkSettings): DBRpcTask<DBSHARINGSharedLinkMetadata, DBSHARINGModifySharedLinkSettingsError>;

	modifySharedLinkSettingsSettingsRemoveExpiration(url: string, settings: DBSHARINGSharedLinkSettings, removeExpiration: number): DBRpcTask<DBSHARINGSharedLinkMetadata, DBSHARINGModifySharedLinkSettingsError>;

	mountFolder(sharedFolderId: string): DBRpcTask<DBSHARINGSharedFolderMetadata, DBSHARINGMountFolderError>;

	relinquishFileMembership(file: string): DBRpcTask<DBNilObject, DBSHARINGRelinquishFileMembershipError>;

	relinquishFolderMembership(sharedFolderId: string): DBRpcTask<DBASYNCLaunchEmptyResult, DBSHARINGRelinquishFolderMembershipError>;

	relinquishFolderMembershipLeaveACopy(sharedFolderId: string, leaveACopy: number): DBRpcTask<DBASYNCLaunchEmptyResult, DBSHARINGRelinquishFolderMembershipError>;

	removeFileMember2Member(file: string, member: DBSHARINGMemberSelector): DBRpcTask<DBSHARINGFileMemberRemoveActionResult, DBSHARINGRemoveFileMemberError>;

	removeFileMemberMember(file: string, member: DBSHARINGMemberSelector): DBRpcTask<DBSHARINGFileMemberActionIndividualResult, DBSHARINGRemoveFileMemberError>;

	removeFolderMemberMemberLeaveACopy(sharedFolderId: string, member: DBSHARINGMemberSelector, leaveACopy: number): DBRpcTask<DBASYNCLaunchResultBase, DBSHARINGRemoveFolderMemberError>;

	revokeSharedLink(url: string): DBRpcTask<DBNilObject, DBSHARINGRevokeSharedLinkError>;

	setAccessInheritance(sharedFolderId: string): DBRpcTask<DBSHARINGShareFolderLaunch, DBSHARINGSetAccessInheritanceError>;

	setAccessInheritanceAccessInheritance(sharedFolderId: string, accessInheritance: DBSHARINGAccessInheritance): DBRpcTask<DBSHARINGShareFolderLaunch, DBSHARINGSetAccessInheritanceError>;

	shareFolder(path: string): DBRpcTask<DBSHARINGShareFolderLaunch, DBSHARINGShareFolderError>;

	shareFolderAclUpdatePolicyForceAsyncMemberPolicySharedLinkPolicyViewerInfoPolicyAccessInheritanceActionsLinkSettings(path: string, aclUpdatePolicy: DBSHARINGAclUpdatePolicy, forceAsync: number, memberPolicy: DBSHARINGMemberPolicy, sharedLinkPolicy: DBSHARINGSharedLinkPolicy, viewerInfoPolicy: DBSHARINGViewerInfoPolicy, accessInheritance: DBSHARINGAccessInheritance, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[], linkSettings: DBSHARINGLinkSettings): DBRpcTask<DBSHARINGShareFolderLaunch, DBSHARINGShareFolderError>;

	transferFolderToDropboxId(sharedFolderId: string, toDropboxId: string): DBRpcTask<DBNilObject, DBSHARINGTransferFolderError>;

	unmountFolder(sharedFolderId: string): DBRpcTask<DBNilObject, DBSHARINGUnmountFolderError>;

	unshareFile(file: string): DBRpcTask<DBNilObject, DBSHARINGUnshareFileError>;

	unshareFolder(sharedFolderId: string): DBRpcTask<DBASYNCLaunchEmptyResult, DBSHARINGUnshareFolderError>;

	unshareFolderLeaveACopy(sharedFolderId: string, leaveACopy: number): DBRpcTask<DBASYNCLaunchEmptyResult, DBSHARINGUnshareFolderError>;

	updateFileMemberMemberAccessLevel(file: string, member: DBSHARINGMemberSelector, accessLevel: DBSHARINGAccessLevel): DBRpcTask<DBSHARINGMemberAccessLevelResult, DBSHARINGFileMemberActionError>;

	updateFolderMemberMemberAccessLevel(sharedFolderId: string, member: DBSHARINGMemberSelector, accessLevel: DBSHARINGAccessLevel): DBRpcTask<DBSHARINGMemberAccessLevelResult, DBSHARINGUpdateFolderMemberError>;

	updateFolderPolicy(sharedFolderId: string): DBRpcTask<DBSHARINGSharedFolderMetadata, DBSHARINGUpdateFolderPolicyError>;

	updateFolderPolicyMemberPolicyAclUpdatePolicyViewerInfoPolicySharedLinkPolicyLinkSettingsActions(sharedFolderId: string, memberPolicy: DBSHARINGMemberPolicy, aclUpdatePolicy: DBSHARINGAclUpdatePolicy, viewerInfoPolicy: DBSHARINGViewerInfoPolicy, sharedLinkPolicy: DBSHARINGSharedLinkPolicy, linkSettings: DBSHARINGLinkSettings, actions: NSArray<DBSHARINGFolderAction> | DBSHARINGFolderAction[]): DBRpcTask<DBSHARINGSharedFolderMetadata, DBSHARINGUpdateFolderPolicyError>;
}

declare class DBSHARINGUserFileMembershipInfo extends DBSHARINGUserMembershipInfo implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUserFileMembershipInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUserFileMembershipInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly platformType: DBSEENSTATEPlatformType;

	readonly timeLastSeen: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessType: DBSHARINGAccessLevel; user: DBSHARINGUserInfo; permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[]; initials: string; isInherited: number; timeLastSeen: Date; platformType: DBSEENSTATEPlatformType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessTypeUserPermissionsInitialsIsInheritedTimeLastSeenPlatformType(accessType: DBSHARINGAccessLevel, user: DBSHARINGUserInfo, permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[], initials: string, isInherited: number, timeLastSeen: Date, platformType: DBSEENSTATEPlatformType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUserFileMembershipInfoSerializer extends NSObject {

	static alloc(): DBSHARINGUserFileMembershipInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUserFileMembershipInfo;

	static new(): DBSHARINGUserFileMembershipInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUserFileMembershipInfo): NSDictionary<string, any>;
}

declare class DBSHARINGUserInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUserInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUserInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountId: string;

	readonly displayName: string;

	readonly email: string;

	readonly sameTeam: number;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountId: string; email: string; displayName: string; sameTeam: number; });

	constructor(o: { accountId: string; email: string; displayName: string; sameTeam: number; teamMemberId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountIdEmailDisplayNameSameTeam(accountId: string, email: string, displayName: string, sameTeam: number): this;

	initWithAccountIdEmailDisplayNameSameTeamTeamMemberId(accountId: string, email: string, displayName: string, sameTeam: number, teamMemberId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUserInfoSerializer extends NSObject {

	static alloc(): DBSHARINGUserInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUserInfo;

	static new(): DBSHARINGUserInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUserInfo): NSDictionary<string, any>;
}

declare class DBSHARINGUserMembershipInfo extends DBSHARINGMembershipInfo implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGUserMembershipInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGUserMembershipInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly user: DBSHARINGUserInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessType: DBSHARINGAccessLevel; user: DBSHARINGUserInfo; });

	constructor(o: { accessType: DBSHARINGAccessLevel; user: DBSHARINGUserInfo; permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[]; initials: string; isInherited: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessTypeUser(accessType: DBSHARINGAccessLevel, user: DBSHARINGUserInfo): this;

	initWithAccessTypeUserPermissionsInitialsIsInherited(accessType: DBSHARINGAccessLevel, user: DBSHARINGUserInfo, permissions: NSArray<DBSHARINGMemberPermission> | DBSHARINGMemberPermission[], initials: string, isInherited: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBSHARINGUserMembershipInfoSerializer extends NSObject {

	static alloc(): DBSHARINGUserMembershipInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGUserMembershipInfo;

	static new(): DBSHARINGUserMembershipInfoSerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGUserMembershipInfo): NSDictionary<string, any>;
}

declare class DBSHARINGViewerInfoPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGViewerInfoPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGViewerInfoPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGViewerInfoPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGViewerInfoPolicySerializer extends NSObject {

	static alloc(): DBSHARINGViewerInfoPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGViewerInfoPolicy;

	static new(): DBSHARINGViewerInfoPolicySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGViewerInfoPolicy): NSDictionary<string, any>;
}

declare const enum DBSHARINGViewerInfoPolicyTag {

	Enabled = 0,

	Disabled = 1,

	Other = 2
}

declare class DBSHARINGVisibility extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBSHARINGVisibility; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBSHARINGVisibility; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBSHARINGVisibilityTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { password: void; });

	constructor(o: { public: void; });

	constructor(o: { sharedFolderOnly: void; });

	constructor(o: { teamAndPassword: void; });

	constructor(o: { teamOnly: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPassword(): this;

	initWithPublic(): this;

	initWithSharedFolderOnly(): this;

	initWithTeamAndPassword(): this;

	initWithTeamOnly(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPassword(): boolean;

	isPublic(): boolean;

	isSharedFolderOnly(): boolean;

	isTeamAndPassword(): boolean;

	isTeamOnly(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBSHARINGVisibilitySerializer extends NSObject {

	static alloc(): DBSHARINGVisibilitySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBSHARINGVisibility;

	static new(): DBSHARINGVisibilitySerializer; // inherited from NSObject

	static serialize(instance: DBSHARINGVisibility): NSDictionary<string, any>;
}

declare const enum DBSHARINGVisibilityTag {

	Public = 0,

	TeamOnly = 1,

	Password = 2,

	TeamAndPassword = 3,

	SharedFolderOnly = 4,

	Other = 5
}

interface DBSerializable extends NSObjectProtocol {

	description(): string;
}
declare var DBSerializable: {

	prototype: DBSerializable;

	deserialize(dict: NSDictionary<string, any>): any;

	serialize(instance: any): NSDictionary<string, any>;
};

interface DBSharedApplication extends NSObjectProtocol {

	canPresentExternalApp(url: NSURL): boolean;

	presentAuthChannelCancelHandler(authURL: NSURL, cancelHandler: () => void): void;

	presentErrorMessageTitle(message: string, title: string): void;

	presentErrorMessageWithHandlersTitleButtonHandlers(message: string, title: string, buttonHandlers: NSDictionary<string, () => void>): void;

	presentExternalApp(url: NSURL): void;

	presentPlatformSpecificAuth(authURL: NSURL): boolean;
}
declare var DBSharedApplication: {

	prototype: DBSharedApplication;
};

declare class DBStoneValidators<T> extends NSObject {

	static alloc<T>(): DBStoneValidators<T>; // inherited from NSObject

	static arrayValidatorMaxItemsItemValidator(minItems: number, maxItems: number, itemValidator: (p1: T) => void): (p1: NSArray<T>) => void;

	static mapValidator(itemValidator: (p1: T) => void): (p1: NSDictionary<string, T>) => void;

	static new<T>(): DBStoneValidators<T>; // inherited from NSObject

	static nonnullValidator(internalValidator: (p1: any) => void): (p1: any) => void;

	static nullableValidator(internalValidator: (p1: T) => void): (p1: T) => void;

	static numericValidatorMaxValue(minValue: number, maxValue: number): (p1: number) => void;

	static raiseIllegalStateErrorWithMessage(message: string): void;

	static stringValidatorMaxLengthPattern(minLength: number, maxLength: number, pattern: string): (p1: string) => void;
}

declare class DBTEAMActiveWebSession extends DBTEAMDeviceSession implements DBSerializable, NSCopying {

	static alloc(): DBTEAMActiveWebSession; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMActiveWebSession; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly browser: string;

	readonly expires: Date;

	readonly os: string;

	readonly userAgent: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sessionId: string; userAgent: string; os: string; browser: string; });

	constructor(o: { sessionId: string; userAgent: string; os: string; browser: string; ipAddress: string; country: string; created: Date; updated: Date; expires: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSessionIdUserAgentOsBrowser(sessionId: string, userAgent: string, os: string, browser: string): this;

	initWithSessionIdUserAgentOsBrowserIpAddressCountryCreatedUpdatedExpires(sessionId: string, userAgent: string, os: string, browser: string, ipAddress: string, country: string, created: Date, updated: Date, expires: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMActiveWebSessionSerializer extends NSObject {

	static alloc(): DBTEAMActiveWebSessionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMActiveWebSession;

	static new(): DBTEAMActiveWebSessionSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMActiveWebSession): NSDictionary<string, any>;
}

declare class DBTEAMAdminTier extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMAdminTier; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMAdminTier; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMAdminTierTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { memberOnly: void; });

	constructor(o: { supportAdmin: void; });

	constructor(o: { teamAdmin: void; });

	constructor(o: { userManagementAdmin: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMemberOnly(): this;

	initWithSupportAdmin(): this;

	initWithTeamAdmin(): this;

	initWithUserManagementAdmin(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMemberOnly(): boolean;

	isSupportAdmin(): boolean;

	isTeamAdmin(): boolean;

	isUserManagementAdmin(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMAdminTierSerializer extends NSObject {

	static alloc(): DBTEAMAdminTierSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMAdminTier;

	static new(): DBTEAMAdminTierSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMAdminTier): NSDictionary<string, any>;
}

declare const enum DBTEAMAdminTierTag {

	TeamAdmin = 0,

	UserManagementAdmin = 1,

	SupportAdmin = 2,

	MemberOnly = 3
}

declare class DBTEAMApiApp extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMApiApp; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMApiApp; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly appId: string;

	readonly appName: string;

	readonly isAppFolder: number;

	readonly linked: Date;

	readonly publisher: string;

	readonly publisherUrl: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appId: string; appName: string; isAppFolder: number; });

	constructor(o: { appId: string; appName: string; isAppFolder: number; publisher: string; publisherUrl: string; linked: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppIdAppNameIsAppFolder(appId: string, appName: string, isAppFolder: number): this;

	initWithAppIdAppNameIsAppFolderPublisherPublisherUrlLinked(appId: string, appName: string, isAppFolder: number, publisher: string, publisherUrl: string, linked: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMApiAppSerializer extends NSObject {

	static alloc(): DBTEAMApiAppSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMApiApp;

	static new(): DBTEAMApiAppSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMApiApp): NSDictionary<string, any>;
}

declare class DBTEAMBaseDfbReport extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMBaseDfbReport; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMBaseDfbReport; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly startDate: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { startDate: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithStartDate(startDate: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMBaseDfbReportSerializer extends NSObject {

	static alloc(): DBTEAMBaseDfbReportSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMBaseDfbReport;

	static new(): DBTEAMBaseDfbReportSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMBaseDfbReport): NSDictionary<string, any>;
}

declare class DBTEAMBaseTeamFolderError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMBaseTeamFolderError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMBaseTeamFolderError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBTEAMTeamFolderAccessError;

	readonly statusError: DBTEAMTeamFolderInvalidStatusError;

	readonly tag: DBTEAMBaseTeamFolderErrorTag;

	readonly teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBTEAMTeamFolderAccessError; });

	constructor(o: { other: void; });

	constructor(o: { statusError: DBTEAMTeamFolderInvalidStatusError; });

	constructor(o: { teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBTEAMTeamFolderAccessError): this;

	initWithOther(): this;

	initWithStatusError(statusError: DBTEAMTeamFolderInvalidStatusError): this;

	initWithTeamSharedDropboxError(teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isStatusError(): boolean;

	isTeamSharedDropboxError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMBaseTeamFolderErrorSerializer extends NSObject {

	static alloc(): DBTEAMBaseTeamFolderErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMBaseTeamFolderError;

	static new(): DBTEAMBaseTeamFolderErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMBaseTeamFolderError): NSDictionary<string, any>;
}

declare const enum DBTEAMBaseTeamFolderErrorTag {

	AccessError = 0,

	StatusError = 1,

	TeamSharedDropboxError = 2,

	Other = 3
}

declare class DBTEAMCOMMONGroupManagementType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMCOMMONGroupManagementType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMCOMMONGroupManagementType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMCOMMONGroupManagementTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { companyManaged: void; });

	constructor(o: { other: void; });

	constructor(o: { systemManaged: void; });

	constructor(o: { userManaged: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCompanyManaged(): this;

	initWithOther(): this;

	initWithSystemManaged(): this;

	initWithUserManaged(): this;

	isCompanyManaged(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSystemManaged(): boolean;

	isUserManaged(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMCOMMONGroupManagementTypeSerializer extends NSObject {

	static alloc(): DBTEAMCOMMONGroupManagementTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMCOMMONGroupManagementType;

	static new(): DBTEAMCOMMONGroupManagementTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMCOMMONGroupManagementType): NSDictionary<string, any>;
}

declare const enum DBTEAMCOMMONGroupManagementTypeTag {

	UserManaged = 0,

	CompanyManaged = 1,

	SystemManaged = 2,

	Other = 3
}

declare class DBTEAMCOMMONGroupSummary extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMCOMMONGroupSummary; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMCOMMONGroupSummary; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly groupExternalId: string;

	readonly groupId: string;

	readonly groupManagementType: DBTEAMCOMMONGroupManagementType;

	readonly groupName: string;

	readonly memberCount: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupName: string; groupId: string; groupManagementType: DBTEAMCOMMONGroupManagementType; });

	constructor(o: { groupName: string; groupId: string; groupManagementType: DBTEAMCOMMONGroupManagementType; groupExternalId: string; memberCount: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNameGroupIdGroupManagementType(groupName: string, groupId: string, groupManagementType: DBTEAMCOMMONGroupManagementType): this;

	initWithGroupNameGroupIdGroupManagementTypeGroupExternalIdMemberCount(groupName: string, groupId: string, groupManagementType: DBTEAMCOMMONGroupManagementType, groupExternalId: string, memberCount: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMCOMMONGroupSummarySerializer extends NSObject {

	static alloc(): DBTEAMCOMMONGroupSummarySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMCOMMONGroupSummary;

	static new(): DBTEAMCOMMONGroupSummarySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMCOMMONGroupSummary): NSDictionary<string, any>;
}

declare class DBTEAMCOMMONGroupType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMCOMMONGroupType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMCOMMONGroupType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMCOMMONGroupTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { team: void; });

	constructor(o: { userManaged: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTeam(): this;

	initWithUserManaged(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeam(): boolean;

	isUserManaged(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMCOMMONGroupTypeSerializer extends NSObject {

	static alloc(): DBTEAMCOMMONGroupTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMCOMMONGroupType;

	static new(): DBTEAMCOMMONGroupTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMCOMMONGroupType): NSDictionary<string, any>;
}

declare const enum DBTEAMCOMMONGroupTypeTag {

	Team = 0,

	UserManaged = 1,

	Other = 2
}

declare class DBTEAMCOMMONMemberSpaceLimitType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMCOMMONMemberSpaceLimitType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMCOMMONMemberSpaceLimitType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMCOMMONMemberSpaceLimitTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { alertOnly: void; });

	constructor(o: { off: void; });

	constructor(o: { other: void; });

	constructor(o: { stopSync: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAlertOnly(): this;

	initWithOff(): this;

	initWithOther(): this;

	initWithStopSync(): this;

	isAlertOnly(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOff(): boolean;

	isOther(): boolean;

	isStopSync(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMCOMMONMemberSpaceLimitTypeSerializer extends NSObject {

	static alloc(): DBTEAMCOMMONMemberSpaceLimitTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMCOMMONMemberSpaceLimitType;

	static new(): DBTEAMCOMMONMemberSpaceLimitTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMCOMMONMemberSpaceLimitType): NSDictionary<string, any>;
}

declare const enum DBTEAMCOMMONMemberSpaceLimitTypeTag {

	Off = 0,

	AlertOnly = 1,

	StopSync = 2,

	Other = 3
}

declare class DBTEAMCOMMONTimeRange extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMCOMMONTimeRange; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMCOMMONTimeRange; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly endTime: Date;

	readonly startTime: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { startTime: Date; endTime: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithStartTimeEndTime(startTime: Date, endTime: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMCOMMONTimeRangeSerializer extends NSObject {

	static alloc(): DBTEAMCOMMONTimeRangeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMCOMMONTimeRange;

	static new(): DBTEAMCOMMONTimeRangeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMCOMMONTimeRange): NSDictionary<string, any>;
}

declare class DBTEAMCustomQuotaError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMCustomQuotaError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMCustomQuotaError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMCustomQuotaErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { tooManyUsers: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTooManyUsers(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTooManyUsers(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMCustomQuotaErrorSerializer extends NSObject {

	static alloc(): DBTEAMCustomQuotaErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMCustomQuotaError;

	static new(): DBTEAMCustomQuotaErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMCustomQuotaError): NSDictionary<string, any>;
}

declare const enum DBTEAMCustomQuotaErrorTag {

	TooManyUsers = 0,

	Other = 1
}

declare class DBTEAMCustomQuotaResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMCustomQuotaResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMCustomQuotaResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invalidUser: DBTEAMUserSelectorArg;

	readonly success: DBTEAMUserCustomQuotaResult;

	readonly tag: DBTEAMCustomQuotaResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidUser: DBTEAMUserSelectorArg; });

	constructor(o: { other: void; });

	constructor(o: { success: DBTEAMUserCustomQuotaResult; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidUser(invalidUser: DBTEAMUserSelectorArg): this;

	initWithOther(): this;

	initWithSuccess(success: DBTEAMUserCustomQuotaResult): this;

	isEqual(object: any): boolean;

	isInvalidUser(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMCustomQuotaResultSerializer extends NSObject {

	static alloc(): DBTEAMCustomQuotaResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMCustomQuotaResult;

	static new(): DBTEAMCustomQuotaResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMCustomQuotaResult): NSDictionary<string, any>;
}

declare const enum DBTEAMCustomQuotaResultTag {

	Success = 0,

	InvalidUser = 1,

	Other = 2
}

declare class DBTEAMCustomQuotaUsersArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMCustomQuotaUsersArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMCustomQuotaUsersArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly users: NSArray<DBTEAMUserSelectorArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUsers(users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMCustomQuotaUsersArgSerializer extends NSObject {

	static alloc(): DBTEAMCustomQuotaUsersArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMCustomQuotaUsersArg;

	static new(): DBTEAMCustomQuotaUsersArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMCustomQuotaUsersArg): NSDictionary<string, any>;
}

declare class DBTEAMDateRange extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMDateRange; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMDateRange; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly endDate: Date;

	readonly startDate: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { startDate: Date; endDate: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithStartDateEndDate(startDate: Date, endDate: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMDateRangeError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMDateRangeError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMDateRangeError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMDateRangeErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMDateRangeErrorSerializer extends NSObject {

	static alloc(): DBTEAMDateRangeErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMDateRangeError;

	static new(): DBTEAMDateRangeErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMDateRangeError): NSDictionary<string, any>;
}

declare const enum DBTEAMDateRangeErrorTag {

	Other = 0
}

declare class DBTEAMDateRangeSerializer extends NSObject {

	static alloc(): DBTEAMDateRangeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMDateRange;

	static new(): DBTEAMDateRangeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMDateRange): NSDictionary<string, any>;
}

declare class DBTEAMDesktopClientSession extends DBTEAMDeviceSession implements DBSerializable, NSCopying {

	static alloc(): DBTEAMDesktopClientSession; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMDesktopClientSession; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly clientType: DBTEAMDesktopPlatform;

	readonly clientVersion: string;

	readonly hostName: string;

	readonly isDeleteOnUnlinkSupported: number;

	readonly platform: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sessionId: string; hostName: string; clientType: DBTEAMDesktopPlatform; clientVersion: string; platform: string; isDeleteOnUnlinkSupported: number; });

	constructor(o: { sessionId: string; hostName: string; clientType: DBTEAMDesktopPlatform; clientVersion: string; platform: string; isDeleteOnUnlinkSupported: number; ipAddress: string; country: string; created: Date; updated: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSessionIdHostNameClientTypeClientVersionPlatformIsDeleteOnUnlinkSupported(sessionId: string, hostName: string, clientType: DBTEAMDesktopPlatform, clientVersion: string, platform: string, isDeleteOnUnlinkSupported: number): this;

	initWithSessionIdHostNameClientTypeClientVersionPlatformIsDeleteOnUnlinkSupportedIpAddressCountryCreatedUpdated(sessionId: string, hostName: string, clientType: DBTEAMDesktopPlatform, clientVersion: string, platform: string, isDeleteOnUnlinkSupported: number, ipAddress: string, country: string, created: Date, updated: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMDesktopClientSessionSerializer extends NSObject {

	static alloc(): DBTEAMDesktopClientSessionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMDesktopClientSession;

	static new(): DBTEAMDesktopClientSessionSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMDesktopClientSession): NSDictionary<string, any>;
}

declare class DBTEAMDesktopPlatform extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMDesktopPlatform; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMDesktopPlatform; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMDesktopPlatformTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { linux: void; });

	constructor(o: { mac: void; });

	constructor(o: { other: void; });

	constructor(o: { windows: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLinux(): this;

	initWithMac(): this;

	initWithOther(): this;

	initWithWindows(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLinux(): boolean;

	isMac(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isWindows(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMDesktopPlatformSerializer extends NSObject {

	static alloc(): DBTEAMDesktopPlatformSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMDesktopPlatform;

	static new(): DBTEAMDesktopPlatformSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMDesktopPlatform): NSDictionary<string, any>;
}

declare const enum DBTEAMDesktopPlatformTag {

	Windows = 0,

	Mac = 1,

	Linux = 2,

	Other = 3
}

declare class DBTEAMDeviceSession extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMDeviceSession; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMDeviceSession; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly country: string;

	readonly created: Date;

	readonly ipAddress: string;

	readonly sessionId: string;

	readonly updated: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sessionId: string; });

	constructor(o: { sessionId: string; ipAddress: string; country: string; created: Date; updated: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSessionId(sessionId: string): this;

	initWithSessionIdIpAddressCountryCreatedUpdated(sessionId: string, ipAddress: string, country: string, created: Date, updated: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMDeviceSessionArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMDeviceSessionArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMDeviceSessionArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sessionId: string;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sessionId: string; teamMemberId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSessionIdTeamMemberId(sessionId: string, teamMemberId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMDeviceSessionArgSerializer extends NSObject {

	static alloc(): DBTEAMDeviceSessionArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMDeviceSessionArg;

	static new(): DBTEAMDeviceSessionArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMDeviceSessionArg): NSDictionary<string, any>;
}

declare class DBTEAMDeviceSessionSerializer extends NSObject {

	static alloc(): DBTEAMDeviceSessionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMDeviceSession;

	static new(): DBTEAMDeviceSessionSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMDeviceSession): NSDictionary<string, any>;
}

declare class DBTEAMDevicesActive extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMDevicesActive; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMDevicesActive; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly android: NSArray<number>;

	readonly ios: NSArray<number>;

	readonly linux: NSArray<number>;

	readonly macos: NSArray<number>;

	readonly other: NSArray<number>;

	readonly total: NSArray<number>;

	readonly windows: NSArray<number>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { windows: NSArray<number> | number[]; macos: NSArray<number> | number[]; linux: NSArray<number> | number[]; ios: NSArray<number> | number[]; android: NSArray<number> | number[]; other: NSArray<number> | number[]; total: NSArray<number> | number[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithWindowsMacosLinuxIosAndroidOtherTotal(windows: NSArray<number> | number[], macos: NSArray<number> | number[], linux: NSArray<number> | number[], ios: NSArray<number> | number[], android: NSArray<number> | number[], other: NSArray<number> | number[], total: NSArray<number> | number[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMDevicesActiveSerializer extends NSObject {

	static alloc(): DBTEAMDevicesActiveSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMDevicesActive;

	static new(): DBTEAMDevicesActiveSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMDevicesActive): NSDictionary<string, any>;
}

declare class DBTEAMExcludedUsersListArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersListArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersListArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithLimit(limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMExcludedUsersListArgSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersListArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersListArg;

	static new(): DBTEAMExcludedUsersListArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersListArg): NSDictionary<string, any>;
}

declare class DBTEAMExcludedUsersListContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersListContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersListContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMExcludedUsersListContinueArgSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersListContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersListContinueArg;

	static new(): DBTEAMExcludedUsersListContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersListContinueArg): NSDictionary<string, any>;
}

declare class DBTEAMExcludedUsersListContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersListContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersListContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMExcludedUsersListContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMExcludedUsersListContinueErrorSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersListContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersListContinueError;

	static new(): DBTEAMExcludedUsersListContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersListContinueError): NSDictionary<string, any>;
}

declare const enum DBTEAMExcludedUsersListContinueErrorTag {

	InvalidCursor = 0,

	Other = 1
}

declare class DBTEAMExcludedUsersListError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersListError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersListError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMExcludedUsersListErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { listError: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithListError(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isListError(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMExcludedUsersListErrorSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersListErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersListError;

	static new(): DBTEAMExcludedUsersListErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersListError): NSDictionary<string, any>;
}

declare const enum DBTEAMExcludedUsersListErrorTag {

	ListError = 0,

	Other = 1
}

declare class DBTEAMExcludedUsersListResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersListResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersListResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly hasMore: number;

	readonly users: NSArray<DBTEAMMemberProfile>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { users: NSArray<DBTEAMMemberProfile> | DBTEAMMemberProfile[]; hasMore: number; });

	constructor(o: { users: NSArray<DBTEAMMemberProfile> | DBTEAMMemberProfile[]; hasMore: number; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUsersHasMore(users: NSArray<DBTEAMMemberProfile> | DBTEAMMemberProfile[], hasMore: number): this;

	initWithUsersHasMoreCursor(users: NSArray<DBTEAMMemberProfile> | DBTEAMMemberProfile[], hasMore: number, cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMExcludedUsersListResultSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersListResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersListResult;

	static new(): DBTEAMExcludedUsersListResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersListResult): NSDictionary<string, any>;
}

declare class DBTEAMExcludedUsersUpdateArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersUpdateArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersUpdateArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly users: NSArray<DBTEAMUserSelectorArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithUsers(users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMExcludedUsersUpdateArgSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersUpdateArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersUpdateArg;

	static new(): DBTEAMExcludedUsersUpdateArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersUpdateArg): NSDictionary<string, any>;
}

declare class DBTEAMExcludedUsersUpdateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersUpdateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersUpdateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMExcludedUsersUpdateErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { tooManyUsers: void; });

	constructor(o: { usersNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTooManyUsers(): this;

	initWithUsersNotInTeam(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTooManyUsers(): boolean;

	isUsersNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMExcludedUsersUpdateErrorSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersUpdateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersUpdateError;

	static new(): DBTEAMExcludedUsersUpdateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersUpdateError): NSDictionary<string, any>;
}

declare const enum DBTEAMExcludedUsersUpdateErrorTag {

	UsersNotInTeam = 0,

	TooManyUsers = 1,

	Other = 2
}

declare class DBTEAMExcludedUsersUpdateResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersUpdateResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersUpdateResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly status: DBTEAMExcludedUsersUpdateStatus;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { status: DBTEAMExcludedUsersUpdateStatus; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithStatus(status: DBTEAMExcludedUsersUpdateStatus): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMExcludedUsersUpdateResultSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersUpdateResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersUpdateResult;

	static new(): DBTEAMExcludedUsersUpdateResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersUpdateResult): NSDictionary<string, any>;
}

declare class DBTEAMExcludedUsersUpdateStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMExcludedUsersUpdateStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMExcludedUsersUpdateStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMExcludedUsersUpdateStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { success: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithSuccess(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMExcludedUsersUpdateStatusSerializer extends NSObject {

	static alloc(): DBTEAMExcludedUsersUpdateStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMExcludedUsersUpdateStatus;

	static new(): DBTEAMExcludedUsersUpdateStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMExcludedUsersUpdateStatus): NSDictionary<string, any>;
}

declare const enum DBTEAMExcludedUsersUpdateStatusTag {

	Success = 0,

	Other = 1
}

declare class DBTEAMFeature extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMFeature; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMFeature; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMFeatureTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { hasTeamFileEvents: void; });

	constructor(o: { hasTeamSelectiveSync: void; });

	constructor(o: { hasTeamSharedDropbox: void; });

	constructor(o: { other: void; });

	constructor(o: { uploadApiRateLimit: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHasTeamFileEvents(): this;

	initWithHasTeamSelectiveSync(): this;

	initWithHasTeamSharedDropbox(): this;

	initWithOther(): this;

	initWithUploadApiRateLimit(): this;

	isEqual(object: any): boolean;

	isHasTeamFileEvents(): boolean;

	isHasTeamSelectiveSync(): boolean;

	isHasTeamSharedDropbox(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUploadApiRateLimit(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMFeatureSerializer extends NSObject {

	static alloc(): DBTEAMFeatureSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMFeature;

	static new(): DBTEAMFeatureSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMFeature): NSDictionary<string, any>;
}

declare const enum DBTEAMFeatureTag {

	UploadApiRateLimit = 0,

	HasTeamSharedDropbox = 1,

	HasTeamFileEvents = 2,

	HasTeamSelectiveSync = 3,

	Other = 4
}

declare class DBTEAMFeatureValue extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMFeatureValue; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMFeatureValue; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly hasTeamFileEvents: DBTEAMHasTeamFileEventsValue;

	readonly hasTeamSelectiveSync: DBTEAMHasTeamSelectiveSyncValue;

	readonly hasTeamSharedDropbox: DBTEAMHasTeamSharedDropboxValue;

	readonly tag: DBTEAMFeatureValueTag;

	readonly uploadApiRateLimit: DBTEAMUploadApiRateLimitValue;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { hasTeamFileEvents: DBTEAMHasTeamFileEventsValue; });

	constructor(o: { hasTeamSelectiveSync: DBTEAMHasTeamSelectiveSyncValue; });

	constructor(o: { hasTeamSharedDropbox: DBTEAMHasTeamSharedDropboxValue; });

	constructor(o: { other: void; });

	constructor(o: { uploadApiRateLimit: DBTEAMUploadApiRateLimitValue; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHasTeamFileEvents(hasTeamFileEvents: DBTEAMHasTeamFileEventsValue): this;

	initWithHasTeamSelectiveSync(hasTeamSelectiveSync: DBTEAMHasTeamSelectiveSyncValue): this;

	initWithHasTeamSharedDropbox(hasTeamSharedDropbox: DBTEAMHasTeamSharedDropboxValue): this;

	initWithOther(): this;

	initWithUploadApiRateLimit(uploadApiRateLimit: DBTEAMUploadApiRateLimitValue): this;

	isEqual(object: any): boolean;

	isHasTeamFileEvents(): boolean;

	isHasTeamSelectiveSync(): boolean;

	isHasTeamSharedDropbox(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUploadApiRateLimit(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMFeatureValueSerializer extends NSObject {

	static alloc(): DBTEAMFeatureValueSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMFeatureValue;

	static new(): DBTEAMFeatureValueSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMFeatureValue): NSDictionary<string, any>;
}

declare const enum DBTEAMFeatureValueTag {

	UploadApiRateLimit = 0,

	HasTeamSharedDropbox = 1,

	HasTeamFileEvents = 2,

	HasTeamSelectiveSync = 3,

	Other = 4
}

declare class DBTEAMFeaturesGetValuesBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMFeaturesGetValuesBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMFeaturesGetValuesBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly features: NSArray<DBTEAMFeature>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { features: NSArray<DBTEAMFeature> | DBTEAMFeature[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFeatures(features: NSArray<DBTEAMFeature> | DBTEAMFeature[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMFeaturesGetValuesBatchArgSerializer extends NSObject {

	static alloc(): DBTEAMFeaturesGetValuesBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMFeaturesGetValuesBatchArg;

	static new(): DBTEAMFeaturesGetValuesBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMFeaturesGetValuesBatchArg): NSDictionary<string, any>;
}

declare class DBTEAMFeaturesGetValuesBatchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMFeaturesGetValuesBatchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMFeaturesGetValuesBatchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMFeaturesGetValuesBatchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { emptyFeaturesList: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmptyFeaturesList(): this;

	initWithOther(): this;

	isEmptyFeaturesList(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMFeaturesGetValuesBatchErrorSerializer extends NSObject {

	static alloc(): DBTEAMFeaturesGetValuesBatchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMFeaturesGetValuesBatchError;

	static new(): DBTEAMFeaturesGetValuesBatchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMFeaturesGetValuesBatchError): NSDictionary<string, any>;
}

declare const enum DBTEAMFeaturesGetValuesBatchErrorTag {

	EmptyFeaturesList = 0,

	Other = 1
}

declare class DBTEAMFeaturesGetValuesBatchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMFeaturesGetValuesBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMFeaturesGetValuesBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly values: NSArray<DBTEAMFeatureValue>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { values: NSArray<DBTEAMFeatureValue> | DBTEAMFeatureValue[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithValues(values: NSArray<DBTEAMFeatureValue> | DBTEAMFeatureValue[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMFeaturesGetValuesBatchResultSerializer extends NSObject {

	static alloc(): DBTEAMFeaturesGetValuesBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMFeaturesGetValuesBatchResult;

	static new(): DBTEAMFeaturesGetValuesBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMFeaturesGetValuesBatchResult): NSDictionary<string, any>;
}

declare class DBTEAMGetActivityReport extends DBTEAMBaseDfbReport implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGetActivityReport; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGetActivityReport; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly activeSharedFolders1Day: NSArray<number>;

	readonly activeSharedFolders28Day: NSArray<number>;

	readonly activeSharedFolders7Day: NSArray<number>;

	readonly activeUsers1Day: NSArray<number>;

	readonly activeUsers28Day: NSArray<number>;

	readonly activeUsers7Day: NSArray<number>;

	readonly adds: NSArray<number>;

	readonly deletes: NSArray<number>;

	readonly edits: NSArray<number>;

	readonly sharedLinksCreated: NSArray<number>;

	readonly sharedLinksViewedByNotLoggedIn: NSArray<number>;

	readonly sharedLinksViewedByOutsideUser: NSArray<number>;

	readonly sharedLinksViewedByTeam: NSArray<number>;

	readonly sharedLinksViewedTotal: NSArray<number>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { startDate: string; adds: NSArray<number> | number[]; edits: NSArray<number> | number[]; deletes: NSArray<number> | number[]; activeUsers28Day: NSArray<number> | number[]; activeUsers7Day: NSArray<number> | number[]; activeUsers1Day: NSArray<number> | number[]; activeSharedFolders28Day: NSArray<number> | number[]; activeSharedFolders7Day: NSArray<number> | number[]; activeSharedFolders1Day: NSArray<number> | number[]; sharedLinksCreated: NSArray<number> | number[]; sharedLinksViewedByTeam: NSArray<number> | number[]; sharedLinksViewedByOutsideUser: NSArray<number> | number[]; sharedLinksViewedByNotLoggedIn: NSArray<number> | number[]; sharedLinksViewedTotal: NSArray<number> | number[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithStartDateAddsEditsDeletesActiveUsers28DayActiveUsers7DayActiveUsers1DayActiveSharedFolders28DayActiveSharedFolders7DayActiveSharedFolders1DaySharedLinksCreatedSharedLinksViewedByTeamSharedLinksViewedByOutsideUserSharedLinksViewedByNotLoggedInSharedLinksViewedTotal(startDate: string, adds: NSArray<number> | number[], edits: NSArray<number> | number[], deletes: NSArray<number> | number[], activeUsers28Day: NSArray<number> | number[], activeUsers7Day: NSArray<number> | number[], activeUsers1Day: NSArray<number> | number[], activeSharedFolders28Day: NSArray<number> | number[], activeSharedFolders7Day: NSArray<number> | number[], activeSharedFolders1Day: NSArray<number> | number[], sharedLinksCreated: NSArray<number> | number[], sharedLinksViewedByTeam: NSArray<number> | number[], sharedLinksViewedByOutsideUser: NSArray<number> | number[], sharedLinksViewedByNotLoggedIn: NSArray<number> | number[], sharedLinksViewedTotal: NSArray<number> | number[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGetActivityReportSerializer extends NSObject {

	static alloc(): DBTEAMGetActivityReportSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGetActivityReport;

	static new(): DBTEAMGetActivityReportSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGetActivityReport): NSDictionary<string, any>;
}

declare class DBTEAMGetDevicesReport extends DBTEAMBaseDfbReport implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGetDevicesReport; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGetDevicesReport; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly active1Day: DBTEAMDevicesActive;

	readonly active28Day: DBTEAMDevicesActive;

	readonly active7Day: DBTEAMDevicesActive;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { startDate: string; active1Day: DBTEAMDevicesActive; active7Day: DBTEAMDevicesActive; active28Day: DBTEAMDevicesActive; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithStartDateActive1DayActive7DayActive28Day(startDate: string, active1Day: DBTEAMDevicesActive, active7Day: DBTEAMDevicesActive, active28Day: DBTEAMDevicesActive): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGetDevicesReportSerializer extends NSObject {

	static alloc(): DBTEAMGetDevicesReportSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGetDevicesReport;

	static new(): DBTEAMGetDevicesReportSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGetDevicesReport): NSDictionary<string, any>;
}

declare class DBTEAMGetMembershipReport extends DBTEAMBaseDfbReport implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGetMembershipReport; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGetMembershipReport; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly licenses: NSArray<number>;

	readonly membersJoined: NSArray<number>;

	readonly pendingInvites: NSArray<number>;

	readonly suspendedMembers: NSArray<number>;

	readonly teamSize: NSArray<number>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { startDate: string; teamSize: NSArray<number> | number[]; pendingInvites: NSArray<number> | number[]; membersJoined: NSArray<number> | number[]; suspendedMembers: NSArray<number> | number[]; licenses: NSArray<number> | number[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithStartDateTeamSizePendingInvitesMembersJoinedSuspendedMembersLicenses(startDate: string, teamSize: NSArray<number> | number[], pendingInvites: NSArray<number> | number[], membersJoined: NSArray<number> | number[], suspendedMembers: NSArray<number> | number[], licenses: NSArray<number> | number[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGetMembershipReportSerializer extends NSObject {

	static alloc(): DBTEAMGetMembershipReportSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGetMembershipReport;

	static new(): DBTEAMGetMembershipReportSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGetMembershipReport): NSDictionary<string, any>;
}

declare class DBTEAMGetStorageReport extends DBTEAMBaseDfbReport implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGetStorageReport; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGetStorageReport; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly memberStorageMap: NSArray<NSArray<DBTEAMStorageBucket>>;

	readonly sharedFolders: NSArray<number>;

	readonly sharedUsage: NSArray<number>;

	readonly totalUsage: NSArray<number>;

	readonly unsharedUsage: NSArray<number>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { startDate: string; totalUsage: NSArray<number> | number[]; sharedUsage: NSArray<number> | number[]; unsharedUsage: NSArray<number> | number[]; sharedFolders: NSArray<number> | number[]; memberStorageMap: NSArray<NSArray<DBTEAMStorageBucket>> | NSArray<DBTEAMStorageBucket>[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithStartDateTotalUsageSharedUsageUnsharedUsageSharedFoldersMemberStorageMap(startDate: string, totalUsage: NSArray<number> | number[], sharedUsage: NSArray<number> | number[], unsharedUsage: NSArray<number> | number[], sharedFolders: NSArray<number> | number[], memberStorageMap: NSArray<NSArray<DBTEAMStorageBucket>> | NSArray<DBTEAMStorageBucket>[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGetStorageReportSerializer extends NSObject {

	static alloc(): DBTEAMGetStorageReportSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGetStorageReport;

	static new(): DBTEAMGetStorageReportSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGetStorageReport): NSDictionary<string, any>;
}

declare class DBTEAMGroupAccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupAccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupAccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupAccessTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { member: void; });

	constructor(o: { owner: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMember(): this;

	initWithOwner(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMember(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOwner(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupAccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMGroupAccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupAccessType;

	static new(): DBTEAMGroupAccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupAccessType): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupAccessTypeTag {

	Member = 0,

	Owner = 1
}

declare class DBTEAMGroupCreateArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupCreateArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupCreateArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly groupExternalId: string;

	readonly groupManagementType: DBTEAMCOMMONGroupManagementType;

	readonly groupName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupName: string; });

	constructor(o: { groupName: string; groupExternalId: string; groupManagementType: DBTEAMCOMMONGroupManagementType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupName(groupName: string): this;

	initWithGroupNameGroupExternalIdGroupManagementType(groupName: string, groupExternalId: string, groupManagementType: DBTEAMCOMMONGroupManagementType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupCreateArgSerializer extends NSObject {

	static alloc(): DBTEAMGroupCreateArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupCreateArg;

	static new(): DBTEAMGroupCreateArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupCreateArg): NSDictionary<string, any>;
}

declare class DBTEAMGroupCreateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupCreateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupCreateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupCreateErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { externalIdAlreadyInUse: void; });

	constructor(o: { groupNameAlreadyUsed: void; });

	constructor(o: { groupNameInvalid: void; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithExternalIdAlreadyInUse(): this;

	initWithGroupNameAlreadyUsed(): this;

	initWithGroupNameInvalid(): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	isEqual(object: any): boolean;

	isExternalIdAlreadyInUse(): boolean;

	isGroupNameAlreadyUsed(): boolean;

	isGroupNameInvalid(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupCreateErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupCreateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupCreateError;

	static new(): DBTEAMGroupCreateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupCreateError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupCreateErrorTag {

	GroupNameAlreadyUsed = 0,

	GroupNameInvalid = 1,

	ExternalIdAlreadyInUse = 2,

	SystemManagedGroupDisallowed = 3,

	Other = 4
}

declare class DBTEAMGroupDeleteError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupDeleteError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupDeleteError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupDeleteErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupAlreadyDeleted: void; });

	constructor(o: { groupNotFound: void; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupAlreadyDeleted(): this;

	initWithGroupNotFound(): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	isEqual(object: any): boolean;

	isGroupAlreadyDeleted(): boolean;

	isGroupNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupDeleteErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupDeleteErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupDeleteError;

	static new(): DBTEAMGroupDeleteErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupDeleteError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupDeleteErrorTag {

	GroupNotFound = 0,

	Other = 1,

	SystemManagedGroupDisallowed = 2,

	GroupAlreadyDeleted = 3
}

declare class DBTEAMGroupFullInfo extends DBTEAMCOMMONGroupSummary implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupFullInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupFullInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly created: number;

	readonly members: NSArray<DBTEAMGroupMemberInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupName: string; groupId: string; groupManagementType: DBTEAMCOMMONGroupManagementType; created: number; });

	constructor(o: { groupName: string; groupId: string; groupManagementType: DBTEAMCOMMONGroupManagementType; created: number; groupExternalId: string; memberCount: number; members: NSArray<DBTEAMGroupMemberInfo> | DBTEAMGroupMemberInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNameGroupIdGroupManagementTypeCreated(groupName: string, groupId: string, groupManagementType: DBTEAMCOMMONGroupManagementType, created: number): this;

	initWithGroupNameGroupIdGroupManagementTypeCreatedGroupExternalIdMemberCountMembers(groupName: string, groupId: string, groupManagementType: DBTEAMCOMMONGroupManagementType, created: number, groupExternalId: string, memberCount: number, members: NSArray<DBTEAMGroupMemberInfo> | DBTEAMGroupMemberInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupFullInfoSerializer extends NSObject {

	static alloc(): DBTEAMGroupFullInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupFullInfo;

	static new(): DBTEAMGroupFullInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupFullInfo): NSDictionary<string, any>;
}

declare class DBTEAMGroupMemberInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMemberInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMemberInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessType: DBTEAMGroupAccessType;

	readonly profile: DBTEAMMemberProfile;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { profile: DBTEAMMemberProfile; accessType: DBTEAMGroupAccessType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithProfileAccessType(profile: DBTEAMMemberProfile, accessType: DBTEAMGroupAccessType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupMemberInfoSerializer extends NSObject {

	static alloc(): DBTEAMGroupMemberInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMemberInfo;

	static new(): DBTEAMGroupMemberInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMemberInfo): NSDictionary<string, any>;
}

declare class DBTEAMGroupMemberSelector extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMemberSelector; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMemberSelector; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly group: DBTEAMGroupSelector;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { group: DBTEAMGroupSelector; user: DBTEAMUserSelectorArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupUser(group: DBTEAMGroupSelector, user: DBTEAMUserSelectorArg): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupMemberSelectorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMemberSelectorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMemberSelectorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupMemberSelectorErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupNotFound: void; });

	constructor(o: { memberNotInGroup: void; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNotFound(): this;

	initWithMemberNotInGroup(): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	isEqual(object: any): boolean;

	isGroupNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberNotInGroup(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupMemberSelectorErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupMemberSelectorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMemberSelectorError;

	static new(): DBTEAMGroupMemberSelectorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMemberSelectorError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupMemberSelectorErrorTag {

	GroupNotFound = 0,

	Other = 1,

	SystemManagedGroupDisallowed = 2,

	MemberNotInGroup = 3
}

declare class DBTEAMGroupMemberSelectorSerializer extends NSObject {

	static alloc(): DBTEAMGroupMemberSelectorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMemberSelector;

	static new(): DBTEAMGroupMemberSelectorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMemberSelector): NSDictionary<string, any>;
}

declare class DBTEAMGroupMemberSetAccessTypeError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMemberSetAccessTypeError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMemberSetAccessTypeError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupMemberSetAccessTypeErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupNotFound: void; });

	constructor(o: { memberNotInGroup: void; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	constructor(o: { userCannotBeManagerOfCompanyManagedGroup: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNotFound(): this;

	initWithMemberNotInGroup(): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	initWithUserCannotBeManagerOfCompanyManagedGroup(): this;

	isEqual(object: any): boolean;

	isGroupNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberNotInGroup(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	isUserCannotBeManagerOfCompanyManagedGroup(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupMemberSetAccessTypeErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupMemberSetAccessTypeErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMemberSetAccessTypeError;

	static new(): DBTEAMGroupMemberSetAccessTypeErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMemberSetAccessTypeError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupMemberSetAccessTypeErrorTag {

	GroupNotFound = 0,

	Other = 1,

	SystemManagedGroupDisallowed = 2,

	MemberNotInGroup = 3,

	UserCannotBeManagerOfCompanyManagedGroup = 4
}

declare class DBTEAMGroupMembersAddArg extends DBTEAMIncludeMembersArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMembersAddArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMembersAddArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly group: DBTEAMGroupSelector;

	readonly members: NSArray<DBTEAMMemberAccess>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { group: DBTEAMGroupSelector; members: NSArray<DBTEAMMemberAccess> | DBTEAMMemberAccess[]; });

	constructor(o: { group: DBTEAMGroupSelector; members: NSArray<DBTEAMMemberAccess> | DBTEAMMemberAccess[]; returnMembers: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupMembers(group: DBTEAMGroupSelector, members: NSArray<DBTEAMMemberAccess> | DBTEAMMemberAccess[]): this;

	initWithGroupMembersReturnMembers(group: DBTEAMGroupSelector, members: NSArray<DBTEAMMemberAccess> | DBTEAMMemberAccess[], returnMembers: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupMembersAddArgSerializer extends NSObject {

	static alloc(): DBTEAMGroupMembersAddArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMembersAddArg;

	static new(): DBTEAMGroupMembersAddArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMembersAddArg): NSDictionary<string, any>;
}

declare class DBTEAMGroupMembersAddError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMembersAddError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMembersAddError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly membersNotInTeam: NSArray<string>;

	readonly tag: DBTEAMGroupMembersAddErrorTag;

	readonly userCannotBeManagerOfCompanyManagedGroup: NSArray<string>;

	readonly usersNotFound: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { duplicateUser: void; });

	constructor(o: { groupNotFound: void; });

	constructor(o: { groupNotInTeam: void; });

	constructor(o: { membersNotInTeam: NSArray<string> | string[]; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	constructor(o: { userCannotBeManagerOfCompanyManagedGroup: NSArray<string> | string[]; });

	constructor(o: { userMustBeActiveToBeOwner: void; });

	constructor(o: { usersNotFound: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDuplicateUser(): this;

	initWithGroupNotFound(): this;

	initWithGroupNotInTeam(): this;

	initWithMembersNotInTeam(membersNotInTeam: NSArray<string> | string[]): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	initWithUserCannotBeManagerOfCompanyManagedGroup(userCannotBeManagerOfCompanyManagedGroup: NSArray<string> | string[]): this;

	initWithUserMustBeActiveToBeOwner(): this;

	initWithUsersNotFound(usersNotFound: NSArray<string> | string[]): this;

	isDuplicateUser(): boolean;

	isEqual(object: any): boolean;

	isGroupNotFound(): boolean;

	isGroupNotInTeam(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMembersNotInTeam(): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	isUserCannotBeManagerOfCompanyManagedGroup(): boolean;

	isUserMustBeActiveToBeOwner(): boolean;

	isUsersNotFound(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupMembersAddErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupMembersAddErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMembersAddError;

	static new(): DBTEAMGroupMembersAddErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMembersAddError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupMembersAddErrorTag {

	GroupNotFound = 0,

	Other = 1,

	SystemManagedGroupDisallowed = 2,

	DuplicateUser = 3,

	GroupNotInTeam = 4,

	MembersNotInTeam = 5,

	UsersNotFound = 6,

	UserMustBeActiveToBeOwner = 7,

	UserCannotBeManagerOfCompanyManagedGroup = 8
}

declare class DBTEAMGroupMembersChangeResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMembersChangeResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMembersChangeResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly groupInfo: DBTEAMGroupFullInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupInfo: DBTEAMGroupFullInfo; asyncJobId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupInfoAsyncJobId(groupInfo: DBTEAMGroupFullInfo, asyncJobId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupMembersChangeResultSerializer extends NSObject {

	static alloc(): DBTEAMGroupMembersChangeResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMembersChangeResult;

	static new(): DBTEAMGroupMembersChangeResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMembersChangeResult): NSDictionary<string, any>;
}

declare class DBTEAMGroupMembersRemoveArg extends DBTEAMIncludeMembersArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMembersRemoveArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMembersRemoveArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly group: DBTEAMGroupSelector;

	readonly users: NSArray<DBTEAMUserSelectorArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { group: DBTEAMGroupSelector; users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]; });

	constructor(o: { group: DBTEAMGroupSelector; users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]; returnMembers: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupUsers(group: DBTEAMGroupSelector, users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): this;

	initWithGroupUsersReturnMembers(group: DBTEAMGroupSelector, users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[], returnMembers: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupMembersRemoveArgSerializer extends NSObject {

	static alloc(): DBTEAMGroupMembersRemoveArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMembersRemoveArg;

	static new(): DBTEAMGroupMembersRemoveArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMembersRemoveArg): NSDictionary<string, any>;
}

declare class DBTEAMGroupMembersRemoveError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMembersRemoveError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMembersRemoveError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly membersNotInTeam: NSArray<string>;

	readonly tag: DBTEAMGroupMembersRemoveErrorTag;

	readonly usersNotFound: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupNotFound: void; });

	constructor(o: { groupNotInTeam: void; });

	constructor(o: { memberNotInGroup: void; });

	constructor(o: { membersNotInTeam: NSArray<string> | string[]; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	constructor(o: { usersNotFound: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNotFound(): this;

	initWithGroupNotInTeam(): this;

	initWithMemberNotInGroup(): this;

	initWithMembersNotInTeam(membersNotInTeam: NSArray<string> | string[]): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	initWithUsersNotFound(usersNotFound: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isGroupNotFound(): boolean;

	isGroupNotInTeam(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberNotInGroup(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMembersNotInTeam(): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	isUsersNotFound(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupMembersRemoveErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupMembersRemoveErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMembersRemoveError;

	static new(): DBTEAMGroupMembersRemoveErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMembersRemoveError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupMembersRemoveErrorTag {

	GroupNotFound = 0,

	Other = 1,

	SystemManagedGroupDisallowed = 2,

	MemberNotInGroup = 3,

	GroupNotInTeam = 4,

	MembersNotInTeam = 5,

	UsersNotFound = 6
}

declare class DBTEAMGroupMembersSelector extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMembersSelector; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMembersSelector; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly group: DBTEAMGroupSelector;

	readonly users: DBTEAMUsersSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { group: DBTEAMGroupSelector; users: DBTEAMUsersSelectorArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupUsers(group: DBTEAMGroupSelector, users: DBTEAMUsersSelectorArg): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupMembersSelectorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMembersSelectorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMembersSelectorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupMembersSelectorErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupNotFound: void; });

	constructor(o: { memberNotInGroup: void; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNotFound(): this;

	initWithMemberNotInGroup(): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	isEqual(object: any): boolean;

	isGroupNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberNotInGroup(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupMembersSelectorErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupMembersSelectorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMembersSelectorError;

	static new(): DBTEAMGroupMembersSelectorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMembersSelectorError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupMembersSelectorErrorTag {

	GroupNotFound = 0,

	Other = 1,

	SystemManagedGroupDisallowed = 2,

	MemberNotInGroup = 3
}

declare class DBTEAMGroupMembersSelectorSerializer extends NSObject {

	static alloc(): DBTEAMGroupMembersSelectorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMembersSelector;

	static new(): DBTEAMGroupMembersSelectorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMembersSelector): NSDictionary<string, any>;
}

declare class DBTEAMGroupMembersSetAccessTypeArg extends DBTEAMGroupMemberSelector implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupMembersSetAccessTypeArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupMembersSetAccessTypeArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessType: DBTEAMGroupAccessType;

	readonly returnMembers: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { group: DBTEAMGroupSelector; user: DBTEAMUserSelectorArg; accessType: DBTEAMGroupAccessType; });

	constructor(o: { group: DBTEAMGroupSelector; user: DBTEAMUserSelectorArg; accessType: DBTEAMGroupAccessType; returnMembers: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupUserAccessType(group: DBTEAMGroupSelector, user: DBTEAMUserSelectorArg, accessType: DBTEAMGroupAccessType): this;

	initWithGroupUserAccessTypeReturnMembers(group: DBTEAMGroupSelector, user: DBTEAMUserSelectorArg, accessType: DBTEAMGroupAccessType, returnMembers: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupMembersSetAccessTypeArgSerializer extends NSObject {

	static alloc(): DBTEAMGroupMembersSetAccessTypeArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupMembersSetAccessTypeArg;

	static new(): DBTEAMGroupMembersSetAccessTypeArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupMembersSetAccessTypeArg): NSDictionary<string, any>;
}

declare class DBTEAMGroupSelector extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupSelector; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupSelector; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly groupExternalId: string;

	readonly groupId: string;

	readonly tag: DBTEAMGroupSelectorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupExternalId: string; });

	constructor(o: { groupId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupExternalId(groupExternalId: string): this;

	initWithGroupId(groupId: string): this;

	isEqual(object: any): boolean;

	isGroupExternalId(): boolean;

	isGroupId(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupSelectorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupSelectorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupSelectorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupSelectorErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupNotFound: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNotFound(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isGroupNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupSelectorErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupSelectorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupSelectorError;

	static new(): DBTEAMGroupSelectorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupSelectorError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupSelectorErrorTag {

	GroupNotFound = 0,

	Other = 1
}

declare class DBTEAMGroupSelectorSerializer extends NSObject {

	static alloc(): DBTEAMGroupSelectorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupSelector;

	static new(): DBTEAMGroupSelectorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupSelector): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupSelectorTag {

	GroupId = 0,

	GroupExternalId = 1
}

declare class DBTEAMGroupSelectorWithTeamGroupError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupSelectorWithTeamGroupError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupSelectorWithTeamGroupError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupSelectorWithTeamGroupErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupNotFound: void; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNotFound(): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	isEqual(object: any): boolean;

	isGroupNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupSelectorWithTeamGroupErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupSelectorWithTeamGroupErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupSelectorWithTeamGroupError;

	static new(): DBTEAMGroupSelectorWithTeamGroupErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupSelectorWithTeamGroupError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupSelectorWithTeamGroupErrorTag {

	GroupNotFound = 0,

	Other = 1,

	SystemManagedGroupDisallowed = 2
}

declare class DBTEAMGroupUpdateArgs extends DBTEAMIncludeMembersArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupUpdateArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupUpdateArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewGroupExternalId: string;

	readonly dNewGroupManagementType: DBTEAMCOMMONGroupManagementType;

	readonly dNewGroupName: string;

	readonly group: DBTEAMGroupSelector;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { group: DBTEAMGroupSelector; });

	constructor(o: { group: DBTEAMGroupSelector; returnMembers: number; dNewGroupName: string; dNewGroupExternalId: string; dNewGroupManagementType: DBTEAMCOMMONGroupManagementType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroup(group: DBTEAMGroupSelector): this;

	initWithGroupReturnMembersDNewGroupNameDNewGroupExternalIdDNewGroupManagementType(group: DBTEAMGroupSelector, returnMembers: number, dNewGroupName: string, dNewGroupExternalId: string, dNewGroupManagementType: DBTEAMCOMMONGroupManagementType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupUpdateArgsSerializer extends NSObject {

	static alloc(): DBTEAMGroupUpdateArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupUpdateArgs;

	static new(): DBTEAMGroupUpdateArgsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupUpdateArgs): NSDictionary<string, any>;
}

declare class DBTEAMGroupUpdateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupUpdateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupUpdateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupUpdateErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { externalIdAlreadyInUse: void; });

	constructor(o: { groupNameAlreadyUsed: void; });

	constructor(o: { groupNameInvalid: void; });

	constructor(o: { groupNotFound: void; });

	constructor(o: { other: void; });

	constructor(o: { systemManagedGroupDisallowed: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithExternalIdAlreadyInUse(): this;

	initWithGroupNameAlreadyUsed(): this;

	initWithGroupNameInvalid(): this;

	initWithGroupNotFound(): this;

	initWithOther(): this;

	initWithSystemManagedGroupDisallowed(): this;

	isEqual(object: any): boolean;

	isExternalIdAlreadyInUse(): boolean;

	isGroupNameAlreadyUsed(): boolean;

	isGroupNameInvalid(): boolean;

	isGroupNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSystemManagedGroupDisallowed(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupUpdateErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupUpdateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupUpdateError;

	static new(): DBTEAMGroupUpdateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupUpdateError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupUpdateErrorTag {

	GroupNotFound = 0,

	Other = 1,

	SystemManagedGroupDisallowed = 2,

	GroupNameAlreadyUsed = 3,

	GroupNameInvalid = 4,

	ExternalIdAlreadyInUse = 5
}

declare class DBTEAMGroupsGetInfoError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsGetInfoError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsGetInfoError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupsGetInfoErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupNotOnTeam: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupNotOnTeam(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isGroupNotOnTeam(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupsGetInfoErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupsGetInfoErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsGetInfoError;

	static new(): DBTEAMGroupsGetInfoErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsGetInfoError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupsGetInfoErrorTag {

	GroupNotOnTeam = 0,

	Other = 1
}

declare class DBTEAMGroupsGetInfoItem extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsGetInfoItem; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsGetInfoItem; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly groupInfo: DBTEAMGroupFullInfo;

	readonly idNotFound: string;

	readonly tag: DBTEAMGroupsGetInfoItemTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupInfo: DBTEAMGroupFullInfo; });

	constructor(o: { idNotFound: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupInfo(groupInfo: DBTEAMGroupFullInfo): this;

	initWithIdNotFound(idNotFound: string): this;

	isEqual(object: any): boolean;

	isGroupInfo(): boolean;

	isIdNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupsGetInfoItemSerializer extends NSObject {

	static alloc(): DBTEAMGroupsGetInfoItemSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsGetInfoItem;

	static new(): DBTEAMGroupsGetInfoItemSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsGetInfoItem): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupsGetInfoItemTag {

	IdNotFound = 0,

	GroupInfo = 1
}

declare class DBTEAMGroupsListArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsListArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsListArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithLimit(limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupsListArgSerializer extends NSObject {

	static alloc(): DBTEAMGroupsListArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsListArg;

	static new(): DBTEAMGroupsListArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsListArg): NSDictionary<string, any>;
}

declare class DBTEAMGroupsListContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsListContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsListContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupsListContinueArgSerializer extends NSObject {

	static alloc(): DBTEAMGroupsListContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsListContinueArg;

	static new(): DBTEAMGroupsListContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsListContinueArg): NSDictionary<string, any>;
}

declare class DBTEAMGroupsListContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsListContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsListContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupsListContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupsListContinueErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupsListContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsListContinueError;

	static new(): DBTEAMGroupsListContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsListContinueError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupsListContinueErrorTag {

	InvalidCursor = 0,

	Other = 1
}

declare class DBTEAMGroupsListResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsListResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsListResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly groups: NSArray<DBTEAMCOMMONGroupSummary>;

	readonly hasMore: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groups: NSArray<DBTEAMCOMMONGroupSummary> | DBTEAMCOMMONGroupSummary[]; cursor: string; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupsCursorHasMore(groups: NSArray<DBTEAMCOMMONGroupSummary> | DBTEAMCOMMONGroupSummary[], cursor: string, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupsListResultSerializer extends NSObject {

	static alloc(): DBTEAMGroupsListResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsListResult;

	static new(): DBTEAMGroupsListResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsListResult): NSDictionary<string, any>;
}

declare class DBTEAMGroupsMembersListArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsMembersListArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsMembersListArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly group: DBTEAMGroupSelector;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { group: DBTEAMGroupSelector; });

	constructor(o: { group: DBTEAMGroupSelector; limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroup(group: DBTEAMGroupSelector): this;

	initWithGroupLimit(group: DBTEAMGroupSelector, limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupsMembersListArgSerializer extends NSObject {

	static alloc(): DBTEAMGroupsMembersListArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsMembersListArg;

	static new(): DBTEAMGroupsMembersListArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsMembersListArg): NSDictionary<string, any>;
}

declare class DBTEAMGroupsMembersListContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsMembersListContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsMembersListContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupsMembersListContinueArgSerializer extends NSObject {

	static alloc(): DBTEAMGroupsMembersListContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsMembersListContinueArg;

	static new(): DBTEAMGroupsMembersListContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsMembersListContinueArg): NSDictionary<string, any>;
}

declare class DBTEAMGroupsMembersListContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsMembersListContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsMembersListContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupsMembersListContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupsMembersListContinueErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupsMembersListContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsMembersListContinueError;

	static new(): DBTEAMGroupsMembersListContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsMembersListContinueError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupsMembersListContinueErrorTag {

	InvalidCursor = 0,

	Other = 1
}

declare class DBTEAMGroupsMembersListResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsMembersListResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsMembersListResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly hasMore: number;

	readonly members: NSArray<DBTEAMGroupMemberInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { members: NSArray<DBTEAMGroupMemberInfo> | DBTEAMGroupMemberInfo[]; cursor: string; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMembersCursorHasMore(members: NSArray<DBTEAMGroupMemberInfo> | DBTEAMGroupMemberInfo[], cursor: string, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMGroupsMembersListResultSerializer extends NSObject {

	static alloc(): DBTEAMGroupsMembersListResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsMembersListResult;

	static new(): DBTEAMGroupsMembersListResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsMembersListResult): NSDictionary<string, any>;
}

declare class DBTEAMGroupsPollError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsPollError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsPollError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMGroupsPollErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessDenied: void; });

	constructor(o: { internalError: void; });

	constructor(o: { invalidAsyncJobId: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessDenied(): this;

	initWithInternalError(): this;

	initWithInvalidAsyncJobId(): this;

	initWithOther(): this;

	isAccessDenied(): boolean;

	isEqual(object: any): boolean;

	isInternalError(): boolean;

	isInvalidAsyncJobId(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupsPollErrorSerializer extends NSObject {

	static alloc(): DBTEAMGroupsPollErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsPollError;

	static new(): DBTEAMGroupsPollErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsPollError): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupsPollErrorTag {

	InvalidAsyncJobId = 0,

	InternalError = 1,

	Other = 2,

	AccessDenied = 3
}

declare class DBTEAMGroupsSelector extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMGroupsSelector; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMGroupsSelector; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly groupExternalIds: NSArray<string>;

	readonly groupIds: NSArray<string>;

	readonly tag: DBTEAMGroupsSelectorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { groupExternalIds: NSArray<string> | string[]; });

	constructor(o: { groupIds: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroupExternalIds(groupExternalIds: NSArray<string> | string[]): this;

	initWithGroupIds(groupIds: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isGroupExternalIds(): boolean;

	isGroupIds(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMGroupsSelectorSerializer extends NSObject {

	static alloc(): DBTEAMGroupsSelectorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMGroupsSelector;

	static new(): DBTEAMGroupsSelectorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMGroupsSelector): NSDictionary<string, any>;
}

declare const enum DBTEAMGroupsSelectorTag {

	GroupIds = 0,

	GroupExternalIds = 1
}

declare class DBTEAMHasTeamFileEventsValue extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMHasTeamFileEventsValue; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMHasTeamFileEventsValue; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly enabled: number;

	readonly tag: DBTEAMHasTeamFileEventsValueTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { enabled: number; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEnabled(enabled: number): this;

	initWithOther(): this;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMHasTeamFileEventsValueSerializer extends NSObject {

	static alloc(): DBTEAMHasTeamFileEventsValueSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMHasTeamFileEventsValue;

	static new(): DBTEAMHasTeamFileEventsValueSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMHasTeamFileEventsValue): NSDictionary<string, any>;
}

declare const enum DBTEAMHasTeamFileEventsValueTag {

	Enabled = 0,

	Other = 1
}

declare class DBTEAMHasTeamSelectiveSyncValue extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMHasTeamSelectiveSyncValue; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMHasTeamSelectiveSyncValue; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly hasTeamSelectiveSync: number;

	readonly tag: DBTEAMHasTeamSelectiveSyncValueTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { hasTeamSelectiveSync: number; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHasTeamSelectiveSync(hasTeamSelectiveSync: number): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isHasTeamSelectiveSync(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMHasTeamSelectiveSyncValueSerializer extends NSObject {

	static alloc(): DBTEAMHasTeamSelectiveSyncValueSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMHasTeamSelectiveSyncValue;

	static new(): DBTEAMHasTeamSelectiveSyncValueSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMHasTeamSelectiveSyncValue): NSDictionary<string, any>;
}

declare const enum DBTEAMHasTeamSelectiveSyncValueTag {

	HasTeamSelectiveSync = 0,

	Other = 1
}

declare class DBTEAMHasTeamSharedDropboxValue extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMHasTeamSharedDropboxValue; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMHasTeamSharedDropboxValue; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly hasTeamSharedDropbox: number;

	readonly tag: DBTEAMHasTeamSharedDropboxValueTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { hasTeamSharedDropbox: number; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHasTeamSharedDropbox(hasTeamSharedDropbox: number): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isHasTeamSharedDropbox(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMHasTeamSharedDropboxValueSerializer extends NSObject {

	static alloc(): DBTEAMHasTeamSharedDropboxValueSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMHasTeamSharedDropboxValue;

	static new(): DBTEAMHasTeamSharedDropboxValueSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMHasTeamSharedDropboxValue): NSDictionary<string, any>;
}

declare const enum DBTEAMHasTeamSharedDropboxValueTag {

	HasTeamSharedDropbox = 0,

	Other = 1
}

declare class DBTEAMIncludeMembersArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMIncludeMembersArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMIncludeMembersArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly returnMembers: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { returnMembers: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithReturnMembers(returnMembers: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMIncludeMembersArgSerializer extends NSObject {

	static alloc(): DBTEAMIncludeMembersArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMIncludeMembersArg;

	static new(): DBTEAMIncludeMembersArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMIncludeMembersArg): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccessMethodLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccessMethodLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccessMethodLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly adminConsole: DBTEAMLOGWebSessionLogInfo;

	readonly api: DBTEAMLOGApiSessionLogInfo;

	readonly contentManager: DBTEAMLOGWebSessionLogInfo;

	readonly endUser: DBTEAMLOGSessionLogInfo;

	readonly signInAs: DBTEAMLOGWebSessionLogInfo;

	readonly tag: DBTEAMLOGAccessMethodLogInfoTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { adminConsole: DBTEAMLOGWebSessionLogInfo; });

	constructor(o: { api: DBTEAMLOGApiSessionLogInfo; });

	constructor(o: { contentManager: DBTEAMLOGWebSessionLogInfo; });

	constructor(o: { endUser: DBTEAMLOGSessionLogInfo; });

	constructor(o: { other: void; });

	constructor(o: { signInAs: DBTEAMLOGWebSessionLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAdminConsole(adminConsole: DBTEAMLOGWebSessionLogInfo): this;

	initWithApi(api: DBTEAMLOGApiSessionLogInfo): this;

	initWithContentManager(contentManager: DBTEAMLOGWebSessionLogInfo): this;

	initWithEndUser(endUser: DBTEAMLOGSessionLogInfo): this;

	initWithOther(): this;

	initWithSignInAs(signInAs: DBTEAMLOGWebSessionLogInfo): this;

	isAdminConsole(): boolean;

	isApi(): boolean;

	isContentManager(): boolean;

	isEndUser(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSignInAs(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGAccessMethodLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccessMethodLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccessMethodLogInfo;

	static new(): DBTEAMLOGAccessMethodLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccessMethodLogInfo): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGAccessMethodLogInfoTag {

	EndUser = 0,

	SignInAs = 1,

	ContentManager = 2,

	AdminConsole = 3,

	Api = 4,

	Other = 5
}

declare class DBTEAMLOGAccountCaptureAvailability extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureAvailability; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureAvailability; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGAccountCaptureAvailabilityTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { available: void; });

	constructor(o: { other: void; });

	constructor(o: { unavailable: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAvailable(): this;

	initWithOther(): this;

	initWithUnavailable(): this;

	isAvailable(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUnavailable(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGAccountCaptureAvailabilitySerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureAvailabilitySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureAvailability;

	static new(): DBTEAMLOGAccountCaptureAvailabilitySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureAvailability): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGAccountCaptureAvailabilityTag {

	Unavailable = 0,

	Available = 1,

	Other = 2
}

declare class DBTEAMLOGAccountCaptureChangeAvailabilityDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureChangeAvailabilityDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureChangeAvailabilityDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGAccountCaptureAvailability;

	readonly previousValue: DBTEAMLOGAccountCaptureAvailability;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGAccountCaptureAvailability; });

	constructor(o: { DNewValue: DBTEAMLOGAccountCaptureAvailability; previousValue: DBTEAMLOGAccountCaptureAvailability; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGAccountCaptureAvailability): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGAccountCaptureAvailability, previousValue: DBTEAMLOGAccountCaptureAvailability): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureChangeAvailabilityDetails;

	static new(): DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureChangeAvailabilityDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCaptureChangeAvailabilityType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureChangeAvailabilityType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureChangeAvailabilityType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureChangeAvailabilityType;

	static new(): DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureChangeAvailabilityType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCaptureChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGAccountCapturePolicy;

	readonly previousValue: DBTEAMLOGAccountCapturePolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGAccountCapturePolicy; });

	constructor(o: { DNewValue: DBTEAMLOGAccountCapturePolicy; previousValue: DBTEAMLOGAccountCapturePolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGAccountCapturePolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGAccountCapturePolicy, previousValue: DBTEAMLOGAccountCapturePolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureChangePolicyDetails;

	static new(): DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCaptureChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureChangePolicyType;

	static new(): DBTEAMLOGAccountCaptureChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCaptureMigrateAccountDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureMigrateAccountDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureMigrateAccountDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly domainName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { domainName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDomainName(domainName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureMigrateAccountDetails;

	static new(): DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureMigrateAccountDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCaptureMigrateAccountType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureMigrateAccountType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureMigrateAccountType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureMigrateAccountType;

	static new(): DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureMigrateAccountType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCaptureNotificationEmailsSentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureNotificationEmailsSentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureNotificationEmailsSentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly domainName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { domainName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDomainName(domainName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureNotificationEmailsSentDetails;

	static new(): DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureNotificationEmailsSentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCaptureNotificationEmailsSentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureNotificationEmailsSentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureNotificationEmailsSentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureNotificationEmailsSentType;

	static new(): DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureNotificationEmailsSentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCapturePolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCapturePolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCapturePolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGAccountCapturePolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { allUsers: void; });

	constructor(o: { disabled: void; });

	constructor(o: { invitedUsers: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAllUsers(): this;

	initWithDisabled(): this;

	initWithInvitedUsers(): this;

	initWithOther(): this;

	isAllUsers(): boolean;

	isDisabled(): boolean;

	isEqual(object: any): boolean;

	isInvitedUsers(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGAccountCapturePolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCapturePolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCapturePolicy;

	static new(): DBTEAMLOGAccountCapturePolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCapturePolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGAccountCapturePolicyTag {

	Disabled = 0,

	InvitedUsers = 1,

	AllUsers = 2,

	Other = 3
}

declare class DBTEAMLOGAccountCaptureRelinquishAccountDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureRelinquishAccountDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureRelinquishAccountDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly domainName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { domainName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDomainName(domainName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureRelinquishAccountDetails;

	static new(): DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureRelinquishAccountDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAccountCaptureRelinquishAccountType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAccountCaptureRelinquishAccountType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAccountCaptureRelinquishAccountType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAccountCaptureRelinquishAccountType;

	static new(): DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAccountCaptureRelinquishAccountType): NSDictionary<string, any>;
}

declare class DBTEAMLOGActionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGActionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGActionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly removeAction: DBTEAMLOGMemberRemoveActionType;

	readonly tag: DBTEAMLOGActionDetailsTag;

	readonly teamJoinDetails: DBTEAMLOGJoinTeamDetails;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { removeAction: DBTEAMLOGMemberRemoveActionType; });

	constructor(o: { teamJoinDetails: DBTEAMLOGJoinTeamDetails; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithRemoveAction(removeAction: DBTEAMLOGMemberRemoveActionType): this;

	initWithTeamJoinDetails(teamJoinDetails: DBTEAMLOGJoinTeamDetails): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRemoveAction(): boolean;

	isTeamJoinDetails(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGActionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGActionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGActionDetails;

	static new(): DBTEAMLOGActionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGActionDetails): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGActionDetailsTag {

	TeamJoinDetails = 0,

	RemoveAction = 1,

	Other = 2
}

declare class DBTEAMLOGActorLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGActorLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGActorLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly admin: DBTEAMLOGUserLogInfo;

	readonly app: DBTEAMLOGAppLogInfo;

	readonly reseller: DBTEAMLOGResellerLogInfo;

	readonly tag: DBTEAMLOGActorLogInfoTag;

	readonly user: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { admin: DBTEAMLOGUserLogInfo; });

	constructor(o: { anonymous: void; });

	constructor(o: { app: DBTEAMLOGAppLogInfo; });

	constructor(o: { dropbox: void; });

	constructor(o: { other: void; });

	constructor(o: { reseller: DBTEAMLOGResellerLogInfo; });

	constructor(o: { user: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAdmin(admin: DBTEAMLOGUserLogInfo): this;

	initWithAnonymous(): this;

	initWithApp(app: DBTEAMLOGAppLogInfo): this;

	initWithDropbox(): this;

	initWithOther(): this;

	initWithReseller(reseller: DBTEAMLOGResellerLogInfo): this;

	initWithUser(user: DBTEAMLOGUserLogInfo): this;

	isAdmin(): boolean;

	isAnonymous(): boolean;

	isApp(): boolean;

	isDropbox(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReseller(): boolean;

	isUser(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGActorLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGActorLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGActorLogInfo;

	static new(): DBTEAMLOGActorLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGActorLogInfo): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGActorLogInfoTag {

	User = 0,

	Admin = 1,

	App = 2,

	Reseller = 3,

	Dropbox = 4,

	Anonymous = 5,

	Other = 6
}

declare class DBTEAMLOGAdminRole extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAdminRole; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAdminRole; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGAdminRoleTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { limitedAdmin: void; });

	constructor(o: { memberOnly: void; });

	constructor(o: { other: void; });

	constructor(o: { supportAdmin: void; });

	constructor(o: { teamAdmin: void; });

	constructor(o: { userManagementAdmin: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLimitedAdmin(): this;

	initWithMemberOnly(): this;

	initWithOther(): this;

	initWithSupportAdmin(): this;

	initWithTeamAdmin(): this;

	initWithUserManagementAdmin(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLimitedAdmin(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMemberOnly(): boolean;

	isOther(): boolean;

	isSupportAdmin(): boolean;

	isTeamAdmin(): boolean;

	isUserManagementAdmin(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGAdminRoleSerializer extends NSObject {

	static alloc(): DBTEAMLOGAdminRoleSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAdminRole;

	static new(): DBTEAMLOGAdminRoleSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAdminRole): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGAdminRoleTag {

	TeamAdmin = 0,

	UserManagementAdmin = 1,

	SupportAdmin = 2,

	LimitedAdmin = 3,

	MemberOnly = 4,

	Other = 5
}

declare class DBTEAMLOGAllowDownloadDisabledDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAllowDownloadDisabledDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAllowDownloadDisabledDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAllowDownloadDisabledDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAllowDownloadDisabledDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAllowDownloadDisabledDetails;

	static new(): DBTEAMLOGAllowDownloadDisabledDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAllowDownloadDisabledDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAllowDownloadDisabledType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAllowDownloadDisabledType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAllowDownloadDisabledType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAllowDownloadDisabledTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAllowDownloadDisabledTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAllowDownloadDisabledType;

	static new(): DBTEAMLOGAllowDownloadDisabledTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAllowDownloadDisabledType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAllowDownloadEnabledDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAllowDownloadEnabledDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAllowDownloadEnabledDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAllowDownloadEnabledDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAllowDownloadEnabledDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAllowDownloadEnabledDetails;

	static new(): DBTEAMLOGAllowDownloadEnabledDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAllowDownloadEnabledDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAllowDownloadEnabledType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAllowDownloadEnabledType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAllowDownloadEnabledType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAllowDownloadEnabledTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAllowDownloadEnabledTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAllowDownloadEnabledType;

	static new(): DBTEAMLOGAllowDownloadEnabledTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAllowDownloadEnabledType): NSDictionary<string, any>;
}

declare class DBTEAMLOGApiSessionLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGApiSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGApiSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly requestId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { requestId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRequestId(requestId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGApiSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGApiSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGApiSessionLogInfo;

	static new(): DBTEAMLOGApiSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGApiSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppLinkTeamDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppLinkTeamDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppLinkTeamDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly appInfo: DBTEAMLOGAppLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appInfo: DBTEAMLOGAppLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppInfo(appInfo: DBTEAMLOGAppLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppLinkTeamDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppLinkTeamDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppLinkTeamDetails;

	static new(): DBTEAMLOGAppLinkTeamDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppLinkTeamDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppLinkTeamType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppLinkTeamType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppLinkTeamType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppLinkTeamTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppLinkTeamTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppLinkTeamType;

	static new(): DBTEAMLOGAppLinkTeamTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppLinkTeamType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppLinkUserDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppLinkUserDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppLinkUserDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly appInfo: DBTEAMLOGAppLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appInfo: DBTEAMLOGAppLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppInfo(appInfo: DBTEAMLOGAppLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppLinkUserDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppLinkUserDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppLinkUserDetails;

	static new(): DBTEAMLOGAppLinkUserDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppLinkUserDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppLinkUserType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppLinkUserType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppLinkUserType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppLinkUserTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppLinkUserTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppLinkUserType;

	static new(): DBTEAMLOGAppLinkUserTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppLinkUserType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly appId: string;

	readonly displayName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { appId: string; displayName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithAppIdDisplayName(appId: string, displayName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppLogInfo;

	static new(): DBTEAMLOGAppLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppUnlinkTeamDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppUnlinkTeamDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppUnlinkTeamDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly appInfo: DBTEAMLOGAppLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appInfo: DBTEAMLOGAppLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppInfo(appInfo: DBTEAMLOGAppLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppUnlinkTeamDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppUnlinkTeamDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppUnlinkTeamDetails;

	static new(): DBTEAMLOGAppUnlinkTeamDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppUnlinkTeamDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppUnlinkTeamType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppUnlinkTeamType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppUnlinkTeamType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppUnlinkTeamTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppUnlinkTeamTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppUnlinkTeamType;

	static new(): DBTEAMLOGAppUnlinkTeamTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppUnlinkTeamType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppUnlinkUserDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppUnlinkUserDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppUnlinkUserDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly appInfo: DBTEAMLOGAppLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appInfo: DBTEAMLOGAppLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppInfo(appInfo: DBTEAMLOGAppLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppUnlinkUserDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppUnlinkUserDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppUnlinkUserDetails;

	static new(): DBTEAMLOGAppUnlinkUserDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppUnlinkUserDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGAppUnlinkUserType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAppUnlinkUserType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAppUnlinkUserType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGAppUnlinkUserTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGAppUnlinkUserTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAppUnlinkUserType;

	static new(): DBTEAMLOGAppUnlinkUserTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAppUnlinkUserType): NSDictionary<string, any>;
}

declare class DBTEAMLOGAssetLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGAssetLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGAssetLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly file: DBTEAMLOGFileLogInfo;

	readonly folder: DBTEAMLOGFolderLogInfo;

	readonly paperDocument: DBTEAMLOGPaperDocumentLogInfo;

	readonly paperFolder: DBTEAMLOGPaperFolderLogInfo;

	readonly showcaseDocument: DBTEAMLOGShowcaseDocumentLogInfo;

	readonly tag: DBTEAMLOGAssetLogInfoTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { file: DBTEAMLOGFileLogInfo; });

	constructor(o: { folder: DBTEAMLOGFolderLogInfo; });

	constructor(o: { other: void; });

	constructor(o: { paperDocument: DBTEAMLOGPaperDocumentLogInfo; });

	constructor(o: { paperFolder: DBTEAMLOGPaperFolderLogInfo; });

	constructor(o: { showcaseDocument: DBTEAMLOGShowcaseDocumentLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFile(file: DBTEAMLOGFileLogInfo): this;

	initWithFolder(folder: DBTEAMLOGFolderLogInfo): this;

	initWithOther(): this;

	initWithPaperDocument(paperDocument: DBTEAMLOGPaperDocumentLogInfo): this;

	initWithPaperFolder(paperFolder: DBTEAMLOGPaperFolderLogInfo): this;

	initWithShowcaseDocument(showcaseDocument: DBTEAMLOGShowcaseDocumentLogInfo): this;

	isEqual(object: any): boolean;

	isFile(): boolean;

	isFolder(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPaperDocument(): boolean;

	isPaperFolder(): boolean;

	isShowcaseDocument(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGAssetLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGAssetLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGAssetLogInfo;

	static new(): DBTEAMLOGAssetLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGAssetLogInfo): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGAssetLogInfoTag {

	File = 0,

	Folder = 1,

	PaperDocument = 2,

	PaperFolder = 3,

	ShowcaseDocument = 4,

	Other = 5
}

declare class DBTEAMLOGCameraUploadsPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGCameraUploadsPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGCameraUploadsPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGCameraUploadsPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGCameraUploadsPolicyChangedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGCameraUploadsPolicyChangedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGCameraUploadsPolicyChangedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGCameraUploadsPolicy;

	readonly previousValue: DBTEAMLOGCameraUploadsPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGCameraUploadsPolicy; previousValue: DBTEAMLOGCameraUploadsPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGCameraUploadsPolicy, previousValue: DBTEAMLOGCameraUploadsPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGCameraUploadsPolicyChangedDetails;

	static new(): DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGCameraUploadsPolicyChangedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGCameraUploadsPolicyChangedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGCameraUploadsPolicyChangedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGCameraUploadsPolicyChangedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGCameraUploadsPolicyChangedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGCameraUploadsPolicyChangedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGCameraUploadsPolicyChangedType;

	static new(): DBTEAMLOGCameraUploadsPolicyChangedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGCameraUploadsPolicyChangedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGCameraUploadsPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGCameraUploadsPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGCameraUploadsPolicy;

	static new(): DBTEAMLOGCameraUploadsPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGCameraUploadsPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGCameraUploadsPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGCertificate extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGCertificate; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGCertificate; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commonName: string;

	readonly expirationDate: string;

	readonly issueDate: string;

	readonly issuer: string;

	readonly serialNumber: string;

	readonly sha1Fingerprint: string;

	readonly subject: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { subject: string; issuer: string; issueDate: string; expirationDate: string; serialNumber: string; sha1Fingerprint: string; });

	constructor(o: { subject: string; issuer: string; issueDate: string; expirationDate: string; serialNumber: string; sha1Fingerprint: string; commonName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSubjectIssuerIssueDateExpirationDateSerialNumberSha1Fingerprint(subject: string, issuer: string, issueDate: string, expirationDate: string, serialNumber: string, sha1Fingerprint: string): this;

	initWithSubjectIssuerIssueDateExpirationDateSerialNumberSha1FingerprintCommonName(subject: string, issuer: string, issueDate: string, expirationDate: string, serialNumber: string, sha1Fingerprint: string, commonName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGCertificateSerializer extends NSObject {

	static alloc(): DBTEAMLOGCertificateSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGCertificate;

	static new(): DBTEAMLOGCertificateSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGCertificate): NSDictionary<string, any>;
}

declare class DBTEAMLOGCollectionShareDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGCollectionShareDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGCollectionShareDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly albumName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { albumName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAlbumName(albumName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGCollectionShareDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGCollectionShareDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGCollectionShareDetails;

	static new(): DBTEAMLOGCollectionShareDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGCollectionShareDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGCollectionShareType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGCollectionShareType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGCollectionShareType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGCollectionShareTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGCollectionShareTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGCollectionShareType;

	static new(): DBTEAMLOGCollectionShareTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGCollectionShareType): NSDictionary<string, any>;
}

declare class DBTEAMLOGContentPermanentDeletePolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGContentPermanentDeletePolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGContentPermanentDeletePolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGContentPermanentDeletePolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGContentPermanentDeletePolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGContentPermanentDeletePolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGContentPermanentDeletePolicy;

	static new(): DBTEAMLOGContentPermanentDeletePolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGContentPermanentDeletePolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGContentPermanentDeletePolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGContextLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGContextLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGContextLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly nonTeamMember: DBTEAMLOGNonTeamMemberLogInfo;

	readonly tag: DBTEAMLOGContextLogInfoTag;

	readonly teamMember: DBTEAMLOGTeamMemberLogInfo;

	readonly trustedNonTeamMember: DBTEAMLOGTrustedNonTeamMemberLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { anonymous: void; });

	constructor(o: { nonTeamMember: DBTEAMLOGNonTeamMemberLogInfo; });

	constructor(o: { other: void; });

	constructor(o: { team: void; });

	constructor(o: { teamMember: DBTEAMLOGTeamMemberLogInfo; });

	constructor(o: { trustedNonTeamMember: DBTEAMLOGTrustedNonTeamMemberLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAnonymous(): this;

	initWithNonTeamMember(nonTeamMember: DBTEAMLOGNonTeamMemberLogInfo): this;

	initWithOther(): this;

	initWithTeam(): this;

	initWithTeamMember(teamMember: DBTEAMLOGTeamMemberLogInfo): this;

	initWithTrustedNonTeamMember(trustedNonTeamMember: DBTEAMLOGTrustedNonTeamMemberLogInfo): this;

	isAnonymous(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNonTeamMember(): boolean;

	isOther(): boolean;

	isTeam(): boolean;

	isTeamMember(): boolean;

	isTrustedNonTeamMember(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGContextLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGContextLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGContextLogInfo;

	static new(): DBTEAMLOGContextLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGContextLogInfo): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGContextLogInfoTag {

	TeamMember = 0,

	NonTeamMember = 1,

	Anonymous = 2,

	Team = 3,

	TrustedNonTeamMember = 4,

	Other = 5
}

declare class DBTEAMLOGCreateFolderDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGCreateFolderDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGCreateFolderDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGCreateFolderDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGCreateFolderDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGCreateFolderDetails;

	static new(): DBTEAMLOGCreateFolderDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGCreateFolderDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGCreateFolderType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGCreateFolderType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGCreateFolderType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGCreateFolderTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGCreateFolderTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGCreateFolderType;

	static new(): DBTEAMLOGCreateFolderTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGCreateFolderType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDataPlacementRestrictionChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDataPlacementRestrictionChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDataPlacementRestrictionChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGPlacementRestriction;

	readonly previousValue: DBTEAMLOGPlacementRestriction;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: DBTEAMLOGPlacementRestriction; dNewValue: DBTEAMLOGPlacementRestriction; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: DBTEAMLOGPlacementRestriction, dNewValue: DBTEAMLOGPlacementRestriction): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDataPlacementRestrictionChangePolicyDetails;

	static new(): DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDataPlacementRestrictionChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDataPlacementRestrictionChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDataPlacementRestrictionChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDataPlacementRestrictionChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDataPlacementRestrictionChangePolicyType;

	static new(): DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDataPlacementRestrictionChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly placementRestriction: DBTEAMLOGPlacementRestriction;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { placementRestriction: DBTEAMLOGPlacementRestriction; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPlacementRestriction(placementRestriction: DBTEAMLOGPlacementRestriction): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails;

	static new(): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType;

	static new(): DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDesktopDeviceSessionLogInfo extends DBTEAMLOGDeviceSessionLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDesktopDeviceSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDesktopDeviceSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly clientType: DBTEAMDesktopPlatform;

	readonly clientVersion: string;

	readonly hostName: string;

	readonly isDeleteOnUnlinkSupported: number;

	readonly platform: string;

	readonly sessionInfo: DBTEAMLOGDesktopSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { hostName: string; clientType: DBTEAMDesktopPlatform; platform: string; isDeleteOnUnlinkSupported: number; });

	constructor(o: { hostName: string; clientType: DBTEAMDesktopPlatform; platform: string; isDeleteOnUnlinkSupported: number; ipAddress: string; created: Date; updated: Date; sessionInfo: DBTEAMLOGDesktopSessionLogInfo; clientVersion: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHostNameClientTypePlatformIsDeleteOnUnlinkSupported(hostName: string, clientType: DBTEAMDesktopPlatform, platform: string, isDeleteOnUnlinkSupported: number): this;

	initWithHostNameClientTypePlatformIsDeleteOnUnlinkSupportedIpAddressCreatedUpdatedSessionInfoClientVersion(hostName: string, clientType: DBTEAMDesktopPlatform, platform: string, isDeleteOnUnlinkSupported: number, ipAddress: string, created: Date, updated: Date, sessionInfo: DBTEAMLOGDesktopSessionLogInfo, clientVersion: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDesktopDeviceSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGDesktopDeviceSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDesktopDeviceSessionLogInfo;

	static new(): DBTEAMLOGDesktopDeviceSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDesktopDeviceSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGDesktopSessionLogInfo extends DBTEAMLOGSessionLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDesktopSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDesktopSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDesktopSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGDesktopSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDesktopSessionLogInfo;

	static new(): DBTEAMLOGDesktopSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDesktopSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGDeviceApprovalsPolicy;

	readonly previousValue: DBTEAMLOGDeviceApprovalsPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: DBTEAMLOGDeviceApprovalsPolicy; previousValue: DBTEAMLOGDeviceApprovalsPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGDeviceApprovalsPolicy, previousValue: DBTEAMLOGDeviceApprovalsPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails;

	static new(): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType;

	static new(): DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGDeviceApprovalsPolicy;

	readonly previousValue: DBTEAMLOGDeviceApprovalsPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: DBTEAMLOGDeviceApprovalsPolicy; previousValue: DBTEAMLOGDeviceApprovalsPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGDeviceApprovalsPolicy, previousValue: DBTEAMLOGDeviceApprovalsPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails;

	static new(): DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsChangeMobilePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeMobilePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsChangeMobilePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsChangeMobilePolicyType;

	static new(): DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsChangeMobilePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsChangeOverageActionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeOverageActionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsChangeOverageActionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMPOLICIESRolloutMethod;

	readonly previousValue: DBTEAMPOLICIESRolloutMethod;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: DBTEAMPOLICIESRolloutMethod; previousValue: DBTEAMPOLICIESRolloutMethod; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMPOLICIESRolloutMethod, previousValue: DBTEAMPOLICIESRolloutMethod): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsChangeOverageActionDetails;

	static new(): DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsChangeOverageActionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsChangeOverageActionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeOverageActionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsChangeOverageActionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsChangeOverageActionType;

	static new(): DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsChangeOverageActionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGDeviceUnlinkPolicy;

	readonly previousValue: DBTEAMLOGDeviceUnlinkPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: DBTEAMLOGDeviceUnlinkPolicy; previousValue: DBTEAMLOGDeviceUnlinkPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGDeviceUnlinkPolicy, previousValue: DBTEAMLOGDeviceUnlinkPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails;

	static new(): DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsChangeUnlinkActionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeUnlinkActionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsChangeUnlinkActionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsChangeUnlinkActionType;

	static new(): DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsChangeUnlinkActionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceApprovalsPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceApprovalsPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceApprovalsPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGDeviceApprovalsPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { limited: void; });

	constructor(o: { other: void; });

	constructor(o: { unlimited: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLimited(): this;

	initWithOther(): this;

	initWithUnlimited(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLimited(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUnlimited(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGDeviceApprovalsPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceApprovalsPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceApprovalsPolicy;

	static new(): DBTEAMLOGDeviceApprovalsPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceApprovalsPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGDeviceApprovalsPolicyTag {

	Unlimited = 0,

	Limited = 1,

	Other = 2
}

declare class DBTEAMLOGDeviceChangeIpDesktopDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceChangeIpDesktopDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceChangeIpDesktopDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDeviceSessionInfo(deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceChangeIpDesktopDetails;

	static new(): DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceChangeIpDesktopDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceChangeIpDesktopType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceChangeIpDesktopType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceChangeIpDesktopType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceChangeIpDesktopTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceChangeIpDesktopTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceChangeIpDesktopType;

	static new(): DBTEAMLOGDeviceChangeIpDesktopTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceChangeIpDesktopType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceChangeIpMobileDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceChangeIpMobileDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceChangeIpMobileDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDeviceSessionInfo(deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceChangeIpMobileDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceChangeIpMobileDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceChangeIpMobileDetails;

	static new(): DBTEAMLOGDeviceChangeIpMobileDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceChangeIpMobileDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceChangeIpMobileType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceChangeIpMobileType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceChangeIpMobileType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceChangeIpMobileTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceChangeIpMobileTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceChangeIpMobileType;

	static new(): DBTEAMLOGDeviceChangeIpMobileTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceChangeIpMobileType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceChangeIpWebDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceChangeIpWebDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceChangeIpWebDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly userAgent: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { userAgent: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserAgent(userAgent: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceChangeIpWebDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceChangeIpWebDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceChangeIpWebDetails;

	static new(): DBTEAMLOGDeviceChangeIpWebDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceChangeIpWebDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceChangeIpWebType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceChangeIpWebType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceChangeIpWebType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceChangeIpWebTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceChangeIpWebTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceChangeIpWebType;

	static new(): DBTEAMLOGDeviceChangeIpWebTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceChangeIpWebType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceDeleteOnUnlinkFailDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceDeleteOnUnlinkFailDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceDeleteOnUnlinkFailDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly displayName: string;

	readonly numFailures: number;

	readonly sessionInfo: DBTEAMLOGSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { numFailures: number; });

	constructor(o: { numFailures: number; sessionInfo: DBTEAMLOGSessionLogInfo; displayName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNumFailures(numFailures: number): this;

	initWithNumFailuresSessionInfoDisplayName(numFailures: number, sessionInfo: DBTEAMLOGSessionLogInfo, displayName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceDeleteOnUnlinkFailDetails;

	static new(): DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceDeleteOnUnlinkFailDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceDeleteOnUnlinkFailType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceDeleteOnUnlinkFailType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceDeleteOnUnlinkFailType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceDeleteOnUnlinkFailType;

	static new(): DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceDeleteOnUnlinkFailType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly displayName: string;

	readonly sessionInfo: DBTEAMLOGSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sessionInfo: DBTEAMLOGSessionLogInfo; displayName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSessionInfoDisplayName(sessionInfo: DBTEAMLOGSessionLogInfo, displayName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails;

	static new(): DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceDeleteOnUnlinkSuccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceDeleteOnUnlinkSuccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceDeleteOnUnlinkSuccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceDeleteOnUnlinkSuccessType;

	static new(): DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceDeleteOnUnlinkSuccessType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceLinkFailDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceLinkFailDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceLinkFailDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly deviceType: DBTEAMLOGDeviceType;

	readonly ipAddress: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { deviceType: DBTEAMLOGDeviceType; });

	constructor(o: { deviceType: DBTEAMLOGDeviceType; ipAddress: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDeviceType(deviceType: DBTEAMLOGDeviceType): this;

	initWithDeviceTypeIpAddress(deviceType: DBTEAMLOGDeviceType, ipAddress: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceLinkFailDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceLinkFailDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceLinkFailDetails;

	static new(): DBTEAMLOGDeviceLinkFailDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceLinkFailDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceLinkFailType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceLinkFailType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceLinkFailType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceLinkFailTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceLinkFailTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceLinkFailType;

	static new(): DBTEAMLOGDeviceLinkFailTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceLinkFailType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceLinkSuccessDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceLinkSuccessDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceLinkSuccessDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDeviceSessionInfo(deviceSessionInfo: DBTEAMLOGDeviceSessionLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceLinkSuccessDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceLinkSuccessDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceLinkSuccessDetails;

	static new(): DBTEAMLOGDeviceLinkSuccessDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceLinkSuccessDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceLinkSuccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceLinkSuccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceLinkSuccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceLinkSuccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceLinkSuccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceLinkSuccessType;

	static new(): DBTEAMLOGDeviceLinkSuccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceLinkSuccessType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceManagementDisabledDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceManagementDisabledDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceManagementDisabledDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceManagementDisabledDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceManagementDisabledDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceManagementDisabledDetails;

	static new(): DBTEAMLOGDeviceManagementDisabledDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceManagementDisabledDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceManagementDisabledType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceManagementDisabledType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceManagementDisabledType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceManagementDisabledTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceManagementDisabledTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceManagementDisabledType;

	static new(): DBTEAMLOGDeviceManagementDisabledTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceManagementDisabledType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceManagementEnabledDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceManagementEnabledDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceManagementEnabledDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceManagementEnabledDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceManagementEnabledDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceManagementEnabledDetails;

	static new(): DBTEAMLOGDeviceManagementEnabledDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceManagementEnabledDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceManagementEnabledType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceManagementEnabledType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceManagementEnabledType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceManagementEnabledTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceManagementEnabledTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceManagementEnabledType;

	static new(): DBTEAMLOGDeviceManagementEnabledTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceManagementEnabledType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceSessionLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly created: Date;

	readonly ipAddress: string;

	readonly updated: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { ipAddress: string; created: Date; updated: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithIpAddressCreatedUpdated(ipAddress: string, created: Date, updated: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceSessionLogInfo;

	static new(): DBTEAMLOGDeviceSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGDeviceTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { desktop: void; });

	constructor(o: { mobile: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDesktop(): this;

	initWithMobile(): this;

	initWithOther(): this;

	isDesktop(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMobile(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGDeviceTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceType;

	static new(): DBTEAMLOGDeviceTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGDeviceTypeTag {

	Desktop = 0,

	Mobile = 1,

	Other = 2
}

declare class DBTEAMLOGDeviceUnlinkDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceUnlinkDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceUnlinkDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly deleteData: number;

	readonly displayName: string;

	readonly sessionInfo: DBTEAMLOGSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { deleteData: number; });

	constructor(o: { deleteData: number; sessionInfo: DBTEAMLOGSessionLogInfo; displayName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDeleteData(deleteData: number): this;

	initWithDeleteDataSessionInfoDisplayName(deleteData: number, sessionInfo: DBTEAMLOGSessionLogInfo, displayName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceUnlinkDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceUnlinkDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceUnlinkDetails;

	static new(): DBTEAMLOGDeviceUnlinkDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceUnlinkDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDeviceUnlinkPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceUnlinkPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceUnlinkPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGDeviceUnlinkPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { keep: void; });

	constructor(o: { other: void; });

	constructor(o: { remove: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithKeep(): this;

	initWithOther(): this;

	initWithRemove(): this;

	isEqual(object: any): boolean;

	isKeep(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRemove(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGDeviceUnlinkPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceUnlinkPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceUnlinkPolicy;

	static new(): DBTEAMLOGDeviceUnlinkPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceUnlinkPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGDeviceUnlinkPolicyTag {

	Remove = 0,

	Keep = 1,

	Other = 2
}

declare class DBTEAMLOGDeviceUnlinkType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDeviceUnlinkType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDeviceUnlinkType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDeviceUnlinkTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDeviceUnlinkTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDeviceUnlinkType;

	static new(): DBTEAMLOGDeviceUnlinkTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDeviceUnlinkType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDirectoryRestrictionsAddMembersDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDirectoryRestrictionsAddMembersDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDirectoryRestrictionsAddMembersDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDirectoryRestrictionsAddMembersDetails;

	static new(): DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDirectoryRestrictionsAddMembersDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDirectoryRestrictionsAddMembersType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDirectoryRestrictionsAddMembersType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDirectoryRestrictionsAddMembersType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDirectoryRestrictionsAddMembersType;

	static new(): DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDirectoryRestrictionsAddMembersType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails;

	static new(): DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDirectoryRestrictionsRemoveMembersType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDirectoryRestrictionsRemoveMembersType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDirectoryRestrictionsRemoveMembersType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDirectoryRestrictionsRemoveMembersType;

	static new(): DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDirectoryRestrictionsRemoveMembersType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDisabledDomainInvitesDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDisabledDomainInvitesDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDisabledDomainInvitesDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDisabledDomainInvitesDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDisabledDomainInvitesDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDisabledDomainInvitesDetails;

	static new(): DBTEAMLOGDisabledDomainInvitesDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDisabledDomainInvitesDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDisabledDomainInvitesType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDisabledDomainInvitesType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDisabledDomainInvitesType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDisabledDomainInvitesTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDisabledDomainInvitesTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDisabledDomainInvitesType;

	static new(): DBTEAMLOGDisabledDomainInvitesTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDisabledDomainInvitesType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails;

	static new(): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType;

	static new(): DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails;

	static new(): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType;

	static new(): DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesEmailExistingUsersDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesEmailExistingUsersDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesEmailExistingUsersDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly domainName: string;

	readonly numRecipients: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { domainName: string; numRecipients: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDomainNameNumRecipients(domainName: string, numRecipients: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesEmailExistingUsersDetails;

	static new(): DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesEmailExistingUsersDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesEmailExistingUsersType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesEmailExistingUsersType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesEmailExistingUsersType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesEmailExistingUsersType;

	static new(): DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesEmailExistingUsersType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesRequestToJoinTeamDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesRequestToJoinTeamDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesRequestToJoinTeamDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesRequestToJoinTeamDetails;

	static new(): DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesRequestToJoinTeamDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesRequestToJoinTeamType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesRequestToJoinTeamType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesRequestToJoinTeamType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesRequestToJoinTeamType;

	static new(): DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesRequestToJoinTeamType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails;

	static new(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType;

	static new(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails;

	static new(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType;

	static new(): DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainVerificationAddDomainFailDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainVerificationAddDomainFailDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainVerificationAddDomainFailDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly domainName: string;

	readonly verificationMethod: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { domainName: string; });

	constructor(o: { domainName: string; verificationMethod: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDomainName(domainName: string): this;

	initWithDomainNameVerificationMethod(domainName: string, verificationMethod: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainVerificationAddDomainFailDetails;

	static new(): DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainVerificationAddDomainFailDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainVerificationAddDomainFailType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainVerificationAddDomainFailType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainVerificationAddDomainFailType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainVerificationAddDomainFailType;

	static new(): DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainVerificationAddDomainFailType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainVerificationAddDomainSuccessDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainVerificationAddDomainSuccessDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainVerificationAddDomainSuccessDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly domainNames: NSArray<string>;

	readonly verificationMethod: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { domainNames: NSArray<string> | string[]; });

	constructor(o: { domainNames: NSArray<string> | string[]; verificationMethod: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDomainNames(domainNames: NSArray<string> | string[]): this;

	initWithDomainNamesVerificationMethod(domainNames: NSArray<string> | string[], verificationMethod: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainVerificationAddDomainSuccessDetails;

	static new(): DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainVerificationAddDomainSuccessDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainVerificationAddDomainSuccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainVerificationAddDomainSuccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainVerificationAddDomainSuccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainVerificationAddDomainSuccessType;

	static new(): DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainVerificationAddDomainSuccessType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainVerificationRemoveDomainDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainVerificationRemoveDomainDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainVerificationRemoveDomainDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly domainNames: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { domainNames: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDomainNames(domainNames: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainVerificationRemoveDomainDetails;

	static new(): DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainVerificationRemoveDomainDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGDomainVerificationRemoveDomainType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDomainVerificationRemoveDomainType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDomainVerificationRemoveDomainType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDomainVerificationRemoveDomainType;

	static new(): DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDomainVerificationRemoveDomainType): NSDictionary<string, any>;
}

declare class DBTEAMLOGDownloadPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDownloadPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDownloadPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGDownloadPolicyTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { allow: void; });

	constructor(o: { disallow: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAllow(): this;

	initWithDisallow(): this;

	initWithOther(): this;

	isAllow(): boolean;

	isDisallow(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGDownloadPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGDownloadPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDownloadPolicyType;

	static new(): DBTEAMLOGDownloadPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDownloadPolicyType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGDownloadPolicyTypeTag {

	Allow = 0,

	Disallow = 1,

	Other = 2
}

declare class DBTEAMLOGDurationLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGDurationLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGDurationLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly amount: number;

	readonly unit: DBTEAMLOGTimeUnit;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { unit: DBTEAMLOGTimeUnit; amount: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUnitAmount(unit: DBTEAMLOGTimeUnit, amount: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGDurationLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGDurationLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGDurationLogInfo;

	static new(): DBTEAMLOGDurationLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGDurationLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmAddExceptionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmAddExceptionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmAddExceptionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmAddExceptionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmAddExceptionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmAddExceptionDetails;

	static new(): DBTEAMLOGEmmAddExceptionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmAddExceptionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmAddExceptionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmAddExceptionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmAddExceptionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmAddExceptionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmAddExceptionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmAddExceptionType;

	static new(): DBTEAMLOGEmmAddExceptionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmAddExceptionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMPOLICIESEmmState;

	readonly previousValue: DBTEAMPOLICIESEmmState;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMPOLICIESEmmState; });

	constructor(o: { DNewValue: DBTEAMPOLICIESEmmState; previousValue: DBTEAMPOLICIESEmmState; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMPOLICIESEmmState): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMPOLICIESEmmState, previousValue: DBTEAMPOLICIESEmmState): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmChangePolicyDetails;

	static new(): DBTEAMLOGEmmChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmChangePolicyType;

	static new(): DBTEAMLOGEmmChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmCreateExceptionsReportDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmCreateExceptionsReportDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmCreateExceptionsReportDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmCreateExceptionsReportDetails;

	static new(): DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmCreateExceptionsReportDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmCreateExceptionsReportType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmCreateExceptionsReportType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmCreateExceptionsReportType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmCreateExceptionsReportTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmCreateExceptionsReportTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmCreateExceptionsReportType;

	static new(): DBTEAMLOGEmmCreateExceptionsReportTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmCreateExceptionsReportType): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmCreateUsageReportDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmCreateUsageReportDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmCreateUsageReportDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmCreateUsageReportDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmCreateUsageReportDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmCreateUsageReportDetails;

	static new(): DBTEAMLOGEmmCreateUsageReportDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmCreateUsageReportDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmCreateUsageReportType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmCreateUsageReportType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmCreateUsageReportType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmCreateUsageReportTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmCreateUsageReportTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmCreateUsageReportType;

	static new(): DBTEAMLOGEmmCreateUsageReportTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmCreateUsageReportType): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmErrorDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmErrorDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmErrorDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly errorDetails: DBTEAMLOGFailureDetailsLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { errorDetails: DBTEAMLOGFailureDetailsLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithErrorDetails(errorDetails: DBTEAMLOGFailureDetailsLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmErrorDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmErrorDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmErrorDetails;

	static new(): DBTEAMLOGEmmErrorDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmErrorDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmErrorType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmErrorType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmErrorType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmErrorTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmErrorTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmErrorType;

	static new(): DBTEAMLOGEmmErrorTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmErrorType): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmRefreshAuthTokenDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmRefreshAuthTokenDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmRefreshAuthTokenDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmRefreshAuthTokenDetails;

	static new(): DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmRefreshAuthTokenDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmRefreshAuthTokenType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmRefreshAuthTokenType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmRefreshAuthTokenType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmRefreshAuthTokenTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmRefreshAuthTokenTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmRefreshAuthTokenType;

	static new(): DBTEAMLOGEmmRefreshAuthTokenTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmRefreshAuthTokenType): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmRemoveExceptionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmRemoveExceptionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmRemoveExceptionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmRemoveExceptionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmRemoveExceptionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmRemoveExceptionDetails;

	static new(): DBTEAMLOGEmmRemoveExceptionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmRemoveExceptionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGEmmRemoveExceptionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEmmRemoveExceptionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEmmRemoveExceptionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEmmRemoveExceptionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEmmRemoveExceptionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEmmRemoveExceptionType;

	static new(): DBTEAMLOGEmmRemoveExceptionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEmmRemoveExceptionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGEnabledDomainInvitesDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEnabledDomainInvitesDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEnabledDomainInvitesDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEnabledDomainInvitesDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEnabledDomainInvitesDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEnabledDomainInvitesDetails;

	static new(): DBTEAMLOGEnabledDomainInvitesDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEnabledDomainInvitesDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGEnabledDomainInvitesType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEnabledDomainInvitesType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEnabledDomainInvitesType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGEnabledDomainInvitesTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEnabledDomainInvitesTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEnabledDomainInvitesType;

	static new(): DBTEAMLOGEnabledDomainInvitesTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEnabledDomainInvitesType): NSDictionary<string, any>;
}

declare class DBTEAMLOGEventCategory extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEventCategory; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEventCategory; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGEventCategoryTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { apps: void; });

	constructor(o: { comments: void; });

	constructor(o: { devices: void; });

	constructor(o: { domains: void; });

	constructor(o: { fileOperations: void; });

	constructor(o: { fileRequests: void; });

	constructor(o: { groups: void; });

	constructor(o: { logins: void; });

	constructor(o: { members: void; });

	constructor(o: { other: void; });

	constructor(o: { paper: void; });

	constructor(o: { passwords: void; });

	constructor(o: { reports: void; });

	constructor(o: { sharing: void; });

	constructor(o: { showcase: void; });

	constructor(o: { sso: void; });

	constructor(o: { teamFolders: void; });

	constructor(o: { teamPolicies: void; });

	constructor(o: { teamProfile: void; });

	constructor(o: { tfa: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithApps(): this;

	initWithComments(): this;

	initWithDevices(): this;

	initWithDomains(): this;

	initWithFileOperations(): this;

	initWithFileRequests(): this;

	initWithGroups(): this;

	initWithLogins(): this;

	initWithMembers(): this;

	initWithOther(): this;

	initWithPaper(): this;

	initWithPasswords(): this;

	initWithReports(): this;

	initWithSharing(): this;

	initWithShowcase(): this;

	initWithSso(): this;

	initWithTeamFolders(): this;

	initWithTeamPolicies(): this;

	initWithTeamProfile(): this;

	initWithTfa(): this;

	isApps(): boolean;

	isComments(): boolean;

	isDevices(): boolean;

	isDomains(): boolean;

	isEqual(object: any): boolean;

	isFileOperations(): boolean;

	isFileRequests(): boolean;

	isGroups(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLogins(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMembers(): boolean;

	isOther(): boolean;

	isPaper(): boolean;

	isPasswords(): boolean;

	isReports(): boolean;

	isSharing(): boolean;

	isShowcase(): boolean;

	isSso(): boolean;

	isTeamFolders(): boolean;

	isTeamPolicies(): boolean;

	isTeamProfile(): boolean;

	isTfa(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGEventCategorySerializer extends NSObject {

	static alloc(): DBTEAMLOGEventCategorySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEventCategory;

	static new(): DBTEAMLOGEventCategorySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEventCategory): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGEventCategoryTag {

	Apps = 0,

	Comments = 1,

	Devices = 2,

	Domains = 3,

	FileOperations = 4,

	FileRequests = 5,

	Groups = 6,

	Logins = 7,

	Members = 8,

	Paper = 9,

	Passwords = 10,

	Reports = 11,

	Sharing = 12,

	Showcase = 13,

	Sso = 14,

	TeamFolders = 15,

	TeamPolicies = 16,

	TeamProfile = 17,

	Tfa = 18,

	Other = 19
}

declare class DBTEAMLOGEventDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEventDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEventDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountCaptureChangeAvailabilityDetails: DBTEAMLOGAccountCaptureChangeAvailabilityDetails;

	readonly accountCaptureChangePolicyDetails: DBTEAMLOGAccountCaptureChangePolicyDetails;

	readonly accountCaptureMigrateAccountDetails: DBTEAMLOGAccountCaptureMigrateAccountDetails;

	readonly accountCaptureNotificationEmailsSentDetails: DBTEAMLOGAccountCaptureNotificationEmailsSentDetails;

	readonly accountCaptureRelinquishAccountDetails: DBTEAMLOGAccountCaptureRelinquishAccountDetails;

	readonly allowDownloadDisabledDetails: DBTEAMLOGAllowDownloadDisabledDetails;

	readonly allowDownloadEnabledDetails: DBTEAMLOGAllowDownloadEnabledDetails;

	readonly appLinkTeamDetails: DBTEAMLOGAppLinkTeamDetails;

	readonly appLinkUserDetails: DBTEAMLOGAppLinkUserDetails;

	readonly appUnlinkTeamDetails: DBTEAMLOGAppUnlinkTeamDetails;

	readonly appUnlinkUserDetails: DBTEAMLOGAppUnlinkUserDetails;

	readonly cameraUploadsPolicyChangedDetails: DBTEAMLOGCameraUploadsPolicyChangedDetails;

	readonly collectionShareDetails: DBTEAMLOGCollectionShareDetails;

	readonly createFolderDetails: DBTEAMLOGCreateFolderDetails;

	readonly dataPlacementRestrictionChangePolicyDetails: DBTEAMLOGDataPlacementRestrictionChangePolicyDetails;

	readonly dataPlacementRestrictionSatisfyPolicyDetails: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails;

	readonly deviceApprovalsChangeDesktopPolicyDetails: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails;

	readonly deviceApprovalsChangeMobilePolicyDetails: DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails;

	readonly deviceApprovalsChangeOverageActionDetails: DBTEAMLOGDeviceApprovalsChangeOverageActionDetails;

	readonly deviceApprovalsChangeUnlinkActionDetails: DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails;

	readonly deviceChangeIpDesktopDetails: DBTEAMLOGDeviceChangeIpDesktopDetails;

	readonly deviceChangeIpMobileDetails: DBTEAMLOGDeviceChangeIpMobileDetails;

	readonly deviceChangeIpWebDetails: DBTEAMLOGDeviceChangeIpWebDetails;

	readonly deviceDeleteOnUnlinkFailDetails: DBTEAMLOGDeviceDeleteOnUnlinkFailDetails;

	readonly deviceDeleteOnUnlinkSuccessDetails: DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails;

	readonly deviceLinkFailDetails: DBTEAMLOGDeviceLinkFailDetails;

	readonly deviceLinkSuccessDetails: DBTEAMLOGDeviceLinkSuccessDetails;

	readonly deviceManagementDisabledDetails: DBTEAMLOGDeviceManagementDisabledDetails;

	readonly deviceManagementEnabledDetails: DBTEAMLOGDeviceManagementEnabledDetails;

	readonly deviceUnlinkDetails: DBTEAMLOGDeviceUnlinkDetails;

	readonly directoryRestrictionsAddMembersDetails: DBTEAMLOGDirectoryRestrictionsAddMembersDetails;

	readonly directoryRestrictionsRemoveMembersDetails: DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails;

	readonly disabledDomainInvitesDetails: DBTEAMLOGDisabledDomainInvitesDetails;

	readonly domainInvitesApproveRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails;

	readonly domainInvitesDeclineRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails;

	readonly domainInvitesEmailExistingUsersDetails: DBTEAMLOGDomainInvitesEmailExistingUsersDetails;

	readonly domainInvitesRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesRequestToJoinTeamDetails;

	readonly domainInvitesSetInviteNewUserPrefToNoDetails: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails;

	readonly domainInvitesSetInviteNewUserPrefToYesDetails: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails;

	readonly domainVerificationAddDomainFailDetails: DBTEAMLOGDomainVerificationAddDomainFailDetails;

	readonly domainVerificationAddDomainSuccessDetails: DBTEAMLOGDomainVerificationAddDomainSuccessDetails;

	readonly domainVerificationRemoveDomainDetails: DBTEAMLOGDomainVerificationRemoveDomainDetails;

	readonly emmAddExceptionDetails: DBTEAMLOGEmmAddExceptionDetails;

	readonly emmChangePolicyDetails: DBTEAMLOGEmmChangePolicyDetails;

	readonly emmCreateExceptionsReportDetails: DBTEAMLOGEmmCreateExceptionsReportDetails;

	readonly emmCreateUsageReportDetails: DBTEAMLOGEmmCreateUsageReportDetails;

	readonly emmErrorDetails: DBTEAMLOGEmmErrorDetails;

	readonly emmRefreshAuthTokenDetails: DBTEAMLOGEmmRefreshAuthTokenDetails;

	readonly emmRemoveExceptionDetails: DBTEAMLOGEmmRemoveExceptionDetails;

	readonly enabledDomainInvitesDetails: DBTEAMLOGEnabledDomainInvitesDetails;

	readonly exportMembersReportDetails: DBTEAMLOGExportMembersReportDetails;

	readonly extendedVersionHistoryChangePolicyDetails: DBTEAMLOGExtendedVersionHistoryChangePolicyDetails;

	readonly fileAddCommentDetails: DBTEAMLOGFileAddCommentDetails;

	readonly fileAddDetails: DBTEAMLOGFileAddDetails;

	readonly fileChangeCommentSubscriptionDetails: DBTEAMLOGFileChangeCommentSubscriptionDetails;

	readonly fileCommentsChangePolicyDetails: DBTEAMLOGFileCommentsChangePolicyDetails;

	readonly fileCopyDetails: DBTEAMLOGFileCopyDetails;

	readonly fileDeleteCommentDetails: DBTEAMLOGFileDeleteCommentDetails;

	readonly fileDeleteDetails: DBTEAMLOGFileDeleteDetails;

	readonly fileDownloadDetails: DBTEAMLOGFileDownloadDetails;

	readonly fileEditCommentDetails: DBTEAMLOGFileEditCommentDetails;

	readonly fileEditDetails: DBTEAMLOGFileEditDetails;

	readonly fileGetCopyReferenceDetails: DBTEAMLOGFileGetCopyReferenceDetails;

	readonly fileLikeCommentDetails: DBTEAMLOGFileLikeCommentDetails;

	readonly fileMoveDetails: DBTEAMLOGFileMoveDetails;

	readonly filePermanentlyDeleteDetails: DBTEAMLOGFilePermanentlyDeleteDetails;

	readonly filePreviewDetails: DBTEAMLOGFilePreviewDetails;

	readonly fileRenameDetails: DBTEAMLOGFileRenameDetails;

	readonly fileRequestChangeDetails: DBTEAMLOGFileRequestChangeDetails;

	readonly fileRequestCloseDetails: DBTEAMLOGFileRequestCloseDetails;

	readonly fileRequestCreateDetails: DBTEAMLOGFileRequestCreateDetails;

	readonly fileRequestReceiveFileDetails: DBTEAMLOGFileRequestReceiveFileDetails;

	readonly fileRequestsChangePolicyDetails: DBTEAMLOGFileRequestsChangePolicyDetails;

	readonly fileRequestsEmailsEnabledDetails: DBTEAMLOGFileRequestsEmailsEnabledDetails;

	readonly fileRequestsEmailsRestrictedToTeamOnlyDetails: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails;

	readonly fileResolveCommentDetails: DBTEAMLOGFileResolveCommentDetails;

	readonly fileRestoreDetails: DBTEAMLOGFileRestoreDetails;

	readonly fileRevertDetails: DBTEAMLOGFileRevertDetails;

	readonly fileRollbackChangesDetails: DBTEAMLOGFileRollbackChangesDetails;

	readonly fileSaveCopyReferenceDetails: DBTEAMLOGFileSaveCopyReferenceDetails;

	readonly fileUnlikeCommentDetails: DBTEAMLOGFileUnlikeCommentDetails;

	readonly fileUnresolveCommentDetails: DBTEAMLOGFileUnresolveCommentDetails;

	readonly googleSsoChangePolicyDetails: DBTEAMLOGGoogleSsoChangePolicyDetails;

	readonly groupAddExternalIdDetails: DBTEAMLOGGroupAddExternalIdDetails;

	readonly groupAddMemberDetails: DBTEAMLOGGroupAddMemberDetails;

	readonly groupChangeExternalIdDetails: DBTEAMLOGGroupChangeExternalIdDetails;

	readonly groupChangeManagementTypeDetails: DBTEAMLOGGroupChangeManagementTypeDetails;

	readonly groupChangeMemberRoleDetails: DBTEAMLOGGroupChangeMemberRoleDetails;

	readonly groupCreateDetails: DBTEAMLOGGroupCreateDetails;

	readonly groupDeleteDetails: DBTEAMLOGGroupDeleteDetails;

	readonly groupDescriptionUpdatedDetails: DBTEAMLOGGroupDescriptionUpdatedDetails;

	readonly groupJoinPolicyUpdatedDetails: DBTEAMLOGGroupJoinPolicyUpdatedDetails;

	readonly groupMovedDetails: DBTEAMLOGGroupMovedDetails;

	readonly groupRemoveExternalIdDetails: DBTEAMLOGGroupRemoveExternalIdDetails;

	readonly groupRemoveMemberDetails: DBTEAMLOGGroupRemoveMemberDetails;

	readonly groupRenameDetails: DBTEAMLOGGroupRenameDetails;

	readonly groupUserManagementChangePolicyDetails: DBTEAMLOGGroupUserManagementChangePolicyDetails;

	readonly loginFailDetails: DBTEAMLOGLoginFailDetails;

	readonly loginSuccessDetails: DBTEAMLOGLoginSuccessDetails;

	readonly logoutDetails: DBTEAMLOGLogoutDetails;

	readonly memberAddNameDetails: DBTEAMLOGMemberAddNameDetails;

	readonly memberChangeAdminRoleDetails: DBTEAMLOGMemberChangeAdminRoleDetails;

	readonly memberChangeEmailDetails: DBTEAMLOGMemberChangeEmailDetails;

	readonly memberChangeMembershipTypeDetails: DBTEAMLOGMemberChangeMembershipTypeDetails;

	readonly memberChangeNameDetails: DBTEAMLOGMemberChangeNameDetails;

	readonly memberChangeStatusDetails: DBTEAMLOGMemberChangeStatusDetails;

	readonly memberDeleteManualContactsDetails: DBTEAMLOGMemberDeleteManualContactsDetails;

	readonly memberPermanentlyDeleteAccountContentsDetails: DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails;

	readonly memberRequestsChangePolicyDetails: DBTEAMLOGMemberRequestsChangePolicyDetails;

	readonly memberSpaceLimitsAddCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails;

	readonly memberSpaceLimitsAddExceptionDetails: DBTEAMLOGMemberSpaceLimitsAddExceptionDetails;

	readonly memberSpaceLimitsChangeCapsTypePolicyDetails: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails;

	readonly memberSpaceLimitsChangeCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails;

	readonly memberSpaceLimitsChangePolicyDetails: DBTEAMLOGMemberSpaceLimitsChangePolicyDetails;

	readonly memberSpaceLimitsChangeStatusDetails: DBTEAMLOGMemberSpaceLimitsChangeStatusDetails;

	readonly memberSpaceLimitsRemoveCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails;

	readonly memberSpaceLimitsRemoveExceptionDetails: DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails;

	readonly memberSuggestDetails: DBTEAMLOGMemberSuggestDetails;

	readonly memberSuggestionsChangePolicyDetails: DBTEAMLOGMemberSuggestionsChangePolicyDetails;

	readonly memberTransferAccountContentsDetails: DBTEAMLOGMemberTransferAccountContentsDetails;

	readonly microsoftOfficeAddinChangePolicyDetails: DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails;

	readonly missingDetails: DBTEAMLOGMissingDetails;

	readonly networkControlChangePolicyDetails: DBTEAMLOGNetworkControlChangePolicyDetails;

	readonly noteAclInviteOnlyDetails: DBTEAMLOGNoteAclInviteOnlyDetails;

	readonly noteAclLinkDetails: DBTEAMLOGNoteAclLinkDetails;

	readonly noteAclTeamLinkDetails: DBTEAMLOGNoteAclTeamLinkDetails;

	readonly noteShareReceiveDetails: DBTEAMLOGNoteShareReceiveDetails;

	readonly noteSharedDetails: DBTEAMLOGNoteSharedDetails;

	readonly openNoteSharedDetails: DBTEAMLOGOpenNoteSharedDetails;

	readonly paperAdminExportStartDetails: DBTEAMLOGPaperAdminExportStartDetails;

	readonly paperChangeDeploymentPolicyDetails: DBTEAMLOGPaperChangeDeploymentPolicyDetails;

	readonly paperChangeMemberLinkPolicyDetails: DBTEAMLOGPaperChangeMemberLinkPolicyDetails;

	readonly paperChangeMemberPolicyDetails: DBTEAMLOGPaperChangeMemberPolicyDetails;

	readonly paperChangePolicyDetails: DBTEAMLOGPaperChangePolicyDetails;

	readonly paperContentAddMemberDetails: DBTEAMLOGPaperContentAddMemberDetails;

	readonly paperContentAddToFolderDetails: DBTEAMLOGPaperContentAddToFolderDetails;

	readonly paperContentArchiveDetails: DBTEAMLOGPaperContentArchiveDetails;

	readonly paperContentCreateDetails: DBTEAMLOGPaperContentCreateDetails;

	readonly paperContentPermanentlyDeleteDetails: DBTEAMLOGPaperContentPermanentlyDeleteDetails;

	readonly paperContentRemoveFromFolderDetails: DBTEAMLOGPaperContentRemoveFromFolderDetails;

	readonly paperContentRemoveMemberDetails: DBTEAMLOGPaperContentRemoveMemberDetails;

	readonly paperContentRenameDetails: DBTEAMLOGPaperContentRenameDetails;

	readonly paperContentRestoreDetails: DBTEAMLOGPaperContentRestoreDetails;

	readonly paperDocAddCommentDetails: DBTEAMLOGPaperDocAddCommentDetails;

	readonly paperDocChangeMemberRoleDetails: DBTEAMLOGPaperDocChangeMemberRoleDetails;

	readonly paperDocChangeSharingPolicyDetails: DBTEAMLOGPaperDocChangeSharingPolicyDetails;

	readonly paperDocChangeSubscriptionDetails: DBTEAMLOGPaperDocChangeSubscriptionDetails;

	readonly paperDocDeleteCommentDetails: DBTEAMLOGPaperDocDeleteCommentDetails;

	readonly paperDocDeletedDetails: DBTEAMLOGPaperDocDeletedDetails;

	readonly paperDocDownloadDetails: DBTEAMLOGPaperDocDownloadDetails;

	readonly paperDocEditCommentDetails: DBTEAMLOGPaperDocEditCommentDetails;

	readonly paperDocEditDetails: DBTEAMLOGPaperDocEditDetails;

	readonly paperDocFollowedDetails: DBTEAMLOGPaperDocFollowedDetails;

	readonly paperDocMentionDetails: DBTEAMLOGPaperDocMentionDetails;

	readonly paperDocOwnershipChangedDetails: DBTEAMLOGPaperDocOwnershipChangedDetails;

	readonly paperDocRequestAccessDetails: DBTEAMLOGPaperDocRequestAccessDetails;

	readonly paperDocResolveCommentDetails: DBTEAMLOGPaperDocResolveCommentDetails;

	readonly paperDocRevertDetails: DBTEAMLOGPaperDocRevertDetails;

	readonly paperDocSlackShareDetails: DBTEAMLOGPaperDocSlackShareDetails;

	readonly paperDocTeamInviteDetails: DBTEAMLOGPaperDocTeamInviteDetails;

	readonly paperDocTrashedDetails: DBTEAMLOGPaperDocTrashedDetails;

	readonly paperDocUnresolveCommentDetails: DBTEAMLOGPaperDocUnresolveCommentDetails;

	readonly paperDocUntrashedDetails: DBTEAMLOGPaperDocUntrashedDetails;

	readonly paperDocViewDetails: DBTEAMLOGPaperDocViewDetails;

	readonly paperEnabledUsersGroupAdditionDetails: DBTEAMLOGPaperEnabledUsersGroupAdditionDetails;

	readonly paperEnabledUsersGroupRemovalDetails: DBTEAMLOGPaperEnabledUsersGroupRemovalDetails;

	readonly paperExternalViewAllowDetails: DBTEAMLOGPaperExternalViewAllowDetails;

	readonly paperExternalViewDefaultTeamDetails: DBTEAMLOGPaperExternalViewDefaultTeamDetails;

	readonly paperExternalViewForbidDetails: DBTEAMLOGPaperExternalViewForbidDetails;

	readonly paperFolderChangeSubscriptionDetails: DBTEAMLOGPaperFolderChangeSubscriptionDetails;

	readonly paperFolderDeletedDetails: DBTEAMLOGPaperFolderDeletedDetails;

	readonly paperFolderFollowedDetails: DBTEAMLOGPaperFolderFollowedDetails;

	readonly paperFolderTeamInviteDetails: DBTEAMLOGPaperFolderTeamInviteDetails;

	readonly passwordChangeDetails: DBTEAMLOGPasswordChangeDetails;

	readonly passwordResetAllDetails: DBTEAMLOGPasswordResetAllDetails;

	readonly passwordResetDetails: DBTEAMLOGPasswordResetDetails;

	readonly permanentDeleteChangePolicyDetails: DBTEAMLOGPermanentDeleteChangePolicyDetails;

	readonly resellerSupportSessionEndDetails: DBTEAMLOGResellerSupportSessionEndDetails;

	readonly resellerSupportSessionStartDetails: DBTEAMLOGResellerSupportSessionStartDetails;

	readonly secondaryMailsPolicyChangedDetails: DBTEAMLOGSecondaryMailsPolicyChangedDetails;

	readonly sfAddGroupDetails: DBTEAMLOGSfAddGroupDetails;

	readonly sfAllowNonMembersToViewSharedLinksDetails: DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails;

	readonly sfExternalInviteWarnDetails: DBTEAMLOGSfExternalInviteWarnDetails;

	readonly sfFbInviteChangeRoleDetails: DBTEAMLOGSfFbInviteChangeRoleDetails;

	readonly sfFbInviteDetails: DBTEAMLOGSfFbInviteDetails;

	readonly sfFbUninviteDetails: DBTEAMLOGSfFbUninviteDetails;

	readonly sfInviteGroupDetails: DBTEAMLOGSfInviteGroupDetails;

	readonly sfTeamGrantAccessDetails: DBTEAMLOGSfTeamGrantAccessDetails;

	readonly sfTeamInviteChangeRoleDetails: DBTEAMLOGSfTeamInviteChangeRoleDetails;

	readonly sfTeamInviteDetails: DBTEAMLOGSfTeamInviteDetails;

	readonly sfTeamJoinDetails: DBTEAMLOGSfTeamJoinDetails;

	readonly sfTeamJoinFromOobLinkDetails: DBTEAMLOGSfTeamJoinFromOobLinkDetails;

	readonly sfTeamUninviteDetails: DBTEAMLOGSfTeamUninviteDetails;

	readonly sharedContentAddInviteesDetails: DBTEAMLOGSharedContentAddInviteesDetails;

	readonly sharedContentAddLinkExpiryDetails: DBTEAMLOGSharedContentAddLinkExpiryDetails;

	readonly sharedContentAddLinkPasswordDetails: DBTEAMLOGSharedContentAddLinkPasswordDetails;

	readonly sharedContentAddMemberDetails: DBTEAMLOGSharedContentAddMemberDetails;

	readonly sharedContentChangeDownloadsPolicyDetails: DBTEAMLOGSharedContentChangeDownloadsPolicyDetails;

	readonly sharedContentChangeInviteeRoleDetails: DBTEAMLOGSharedContentChangeInviteeRoleDetails;

	readonly sharedContentChangeLinkAudienceDetails: DBTEAMLOGSharedContentChangeLinkAudienceDetails;

	readonly sharedContentChangeLinkExpiryDetails: DBTEAMLOGSharedContentChangeLinkExpiryDetails;

	readonly sharedContentChangeLinkPasswordDetails: DBTEAMLOGSharedContentChangeLinkPasswordDetails;

	readonly sharedContentChangeMemberRoleDetails: DBTEAMLOGSharedContentChangeMemberRoleDetails;

	readonly sharedContentChangeViewerInfoPolicyDetails: DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails;

	readonly sharedContentClaimInvitationDetails: DBTEAMLOGSharedContentClaimInvitationDetails;

	readonly sharedContentCopyDetails: DBTEAMLOGSharedContentCopyDetails;

	readonly sharedContentDownloadDetails: DBTEAMLOGSharedContentDownloadDetails;

	readonly sharedContentRelinquishMembershipDetails: DBTEAMLOGSharedContentRelinquishMembershipDetails;

	readonly sharedContentRemoveInviteesDetails: DBTEAMLOGSharedContentRemoveInviteesDetails;

	readonly sharedContentRemoveLinkExpiryDetails: DBTEAMLOGSharedContentRemoveLinkExpiryDetails;

	readonly sharedContentRemoveLinkPasswordDetails: DBTEAMLOGSharedContentRemoveLinkPasswordDetails;

	readonly sharedContentRemoveMemberDetails: DBTEAMLOGSharedContentRemoveMemberDetails;

	readonly sharedContentRequestAccessDetails: DBTEAMLOGSharedContentRequestAccessDetails;

	readonly sharedContentUnshareDetails: DBTEAMLOGSharedContentUnshareDetails;

	readonly sharedContentViewDetails: DBTEAMLOGSharedContentViewDetails;

	readonly sharedFolderChangeLinkPolicyDetails: DBTEAMLOGSharedFolderChangeLinkPolicyDetails;

	readonly sharedFolderChangeMembersInheritancePolicyDetails: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails;

	readonly sharedFolderChangeMembersManagementPolicyDetails: DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails;

	readonly sharedFolderChangeMembersPolicyDetails: DBTEAMLOGSharedFolderChangeMembersPolicyDetails;

	readonly sharedFolderCreateDetails: DBTEAMLOGSharedFolderCreateDetails;

	readonly sharedFolderDeclineInvitationDetails: DBTEAMLOGSharedFolderDeclineInvitationDetails;

	readonly sharedFolderMountDetails: DBTEAMLOGSharedFolderMountDetails;

	readonly sharedFolderNestDetails: DBTEAMLOGSharedFolderNestDetails;

	readonly sharedFolderTransferOwnershipDetails: DBTEAMLOGSharedFolderTransferOwnershipDetails;

	readonly sharedFolderUnmountDetails: DBTEAMLOGSharedFolderUnmountDetails;

	readonly sharedLinkAddExpiryDetails: DBTEAMLOGSharedLinkAddExpiryDetails;

	readonly sharedLinkChangeExpiryDetails: DBTEAMLOGSharedLinkChangeExpiryDetails;

	readonly sharedLinkChangeVisibilityDetails: DBTEAMLOGSharedLinkChangeVisibilityDetails;

	readonly sharedLinkCopyDetails: DBTEAMLOGSharedLinkCopyDetails;

	readonly sharedLinkCreateDetails: DBTEAMLOGSharedLinkCreateDetails;

	readonly sharedLinkDisableDetails: DBTEAMLOGSharedLinkDisableDetails;

	readonly sharedLinkDownloadDetails: DBTEAMLOGSharedLinkDownloadDetails;

	readonly sharedLinkRemoveExpiryDetails: DBTEAMLOGSharedLinkRemoveExpiryDetails;

	readonly sharedLinkShareDetails: DBTEAMLOGSharedLinkShareDetails;

	readonly sharedLinkViewDetails: DBTEAMLOGSharedLinkViewDetails;

	readonly sharedNoteOpenedDetails: DBTEAMLOGSharedNoteOpenedDetails;

	readonly sharingChangeFolderJoinPolicyDetails: DBTEAMLOGSharingChangeFolderJoinPolicyDetails;

	readonly sharingChangeLinkPolicyDetails: DBTEAMLOGSharingChangeLinkPolicyDetails;

	readonly sharingChangeMemberPolicyDetails: DBTEAMLOGSharingChangeMemberPolicyDetails;

	readonly shmodelGroupShareDetails: DBTEAMLOGShmodelGroupShareDetails;

	readonly showcaseAccessGrantedDetails: DBTEAMLOGShowcaseAccessGrantedDetails;

	readonly showcaseAddMemberDetails: DBTEAMLOGShowcaseAddMemberDetails;

	readonly showcaseArchivedDetails: DBTEAMLOGShowcaseArchivedDetails;

	readonly showcaseChangeDownloadPolicyDetails: DBTEAMLOGShowcaseChangeDownloadPolicyDetails;

	readonly showcaseChangeEnabledPolicyDetails: DBTEAMLOGShowcaseChangeEnabledPolicyDetails;

	readonly showcaseChangeExternalSharingPolicyDetails: DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails;

	readonly showcaseCreatedDetails: DBTEAMLOGShowcaseCreatedDetails;

	readonly showcaseDeleteCommentDetails: DBTEAMLOGShowcaseDeleteCommentDetails;

	readonly showcaseEditCommentDetails: DBTEAMLOGShowcaseEditCommentDetails;

	readonly showcaseEditedDetails: DBTEAMLOGShowcaseEditedDetails;

	readonly showcaseFileAddedDetails: DBTEAMLOGShowcaseFileAddedDetails;

	readonly showcaseFileDownloadDetails: DBTEAMLOGShowcaseFileDownloadDetails;

	readonly showcaseFileRemovedDetails: DBTEAMLOGShowcaseFileRemovedDetails;

	readonly showcaseFileViewDetails: DBTEAMLOGShowcaseFileViewDetails;

	readonly showcasePermanentlyDeletedDetails: DBTEAMLOGShowcasePermanentlyDeletedDetails;

	readonly showcasePostCommentDetails: DBTEAMLOGShowcasePostCommentDetails;

	readonly showcaseRemoveMemberDetails: DBTEAMLOGShowcaseRemoveMemberDetails;

	readonly showcaseRenamedDetails: DBTEAMLOGShowcaseRenamedDetails;

	readonly showcaseRequestAccessDetails: DBTEAMLOGShowcaseRequestAccessDetails;

	readonly showcaseResolveCommentDetails: DBTEAMLOGShowcaseResolveCommentDetails;

	readonly showcaseRestoredDetails: DBTEAMLOGShowcaseRestoredDetails;

	readonly showcaseTrashedDeprecatedDetails: DBTEAMLOGShowcaseTrashedDeprecatedDetails;

	readonly showcaseTrashedDetails: DBTEAMLOGShowcaseTrashedDetails;

	readonly showcaseUnresolveCommentDetails: DBTEAMLOGShowcaseUnresolveCommentDetails;

	readonly showcaseUntrashedDeprecatedDetails: DBTEAMLOGShowcaseUntrashedDeprecatedDetails;

	readonly showcaseUntrashedDetails: DBTEAMLOGShowcaseUntrashedDetails;

	readonly showcaseViewDetails: DBTEAMLOGShowcaseViewDetails;

	readonly signInAsSessionEndDetails: DBTEAMLOGSignInAsSessionEndDetails;

	readonly signInAsSessionStartDetails: DBTEAMLOGSignInAsSessionStartDetails;

	readonly smartSyncChangePolicyDetails: DBTEAMLOGSmartSyncChangePolicyDetails;

	readonly smartSyncCreateAdminPrivilegeReportDetails: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails;

	readonly smartSyncNotOptOutDetails: DBTEAMLOGSmartSyncNotOptOutDetails;

	readonly smartSyncOptOutDetails: DBTEAMLOGSmartSyncOptOutDetails;

	readonly ssoAddCertDetails: DBTEAMLOGSsoAddCertDetails;

	readonly ssoAddLoginUrlDetails: DBTEAMLOGSsoAddLoginUrlDetails;

	readonly ssoAddLogoutUrlDetails: DBTEAMLOGSsoAddLogoutUrlDetails;

	readonly ssoChangeCertDetails: DBTEAMLOGSsoChangeCertDetails;

	readonly ssoChangeLoginUrlDetails: DBTEAMLOGSsoChangeLoginUrlDetails;

	readonly ssoChangeLogoutUrlDetails: DBTEAMLOGSsoChangeLogoutUrlDetails;

	readonly ssoChangePolicyDetails: DBTEAMLOGSsoChangePolicyDetails;

	readonly ssoChangeSamlIdentityModeDetails: DBTEAMLOGSsoChangeSamlIdentityModeDetails;

	readonly ssoErrorDetails: DBTEAMLOGSsoErrorDetails;

	readonly ssoRemoveCertDetails: DBTEAMLOGSsoRemoveCertDetails;

	readonly ssoRemoveLoginUrlDetails: DBTEAMLOGSsoRemoveLoginUrlDetails;

	readonly ssoRemoveLogoutUrlDetails: DBTEAMLOGSsoRemoveLogoutUrlDetails;

	readonly tag: DBTEAMLOGEventDetailsTag;

	readonly teamActivityCreateReportDetails: DBTEAMLOGTeamActivityCreateReportDetails;

	readonly teamFolderChangeStatusDetails: DBTEAMLOGTeamFolderChangeStatusDetails;

	readonly teamFolderCreateDetails: DBTEAMLOGTeamFolderCreateDetails;

	readonly teamFolderDowngradeDetails: DBTEAMLOGTeamFolderDowngradeDetails;

	readonly teamFolderPermanentlyDeleteDetails: DBTEAMLOGTeamFolderPermanentlyDeleteDetails;

	readonly teamFolderRenameDetails: DBTEAMLOGTeamFolderRenameDetails;

	readonly teamMergeFromDetails: DBTEAMLOGTeamMergeFromDetails;

	readonly teamMergeToDetails: DBTEAMLOGTeamMergeToDetails;

	readonly teamProfileAddLogoDetails: DBTEAMLOGTeamProfileAddLogoDetails;

	readonly teamProfileChangeDefaultLanguageDetails: DBTEAMLOGTeamProfileChangeDefaultLanguageDetails;

	readonly teamProfileChangeLogoDetails: DBTEAMLOGTeamProfileChangeLogoDetails;

	readonly teamProfileChangeNameDetails: DBTEAMLOGTeamProfileChangeNameDetails;

	readonly teamProfileRemoveLogoDetails: DBTEAMLOGTeamProfileRemoveLogoDetails;

	readonly teamSelectiveSyncPolicyChangedDetails: DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails;

	readonly teamSelectiveSyncSettingsChangedDetails: DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails;

	readonly tfaAddBackupPhoneDetails: DBTEAMLOGTfaAddBackupPhoneDetails;

	readonly tfaAddSecurityKeyDetails: DBTEAMLOGTfaAddSecurityKeyDetails;

	readonly tfaChangeBackupPhoneDetails: DBTEAMLOGTfaChangeBackupPhoneDetails;

	readonly tfaChangePolicyDetails: DBTEAMLOGTfaChangePolicyDetails;

	readonly tfaChangeStatusDetails: DBTEAMLOGTfaChangeStatusDetails;

	readonly tfaRemoveBackupPhoneDetails: DBTEAMLOGTfaRemoveBackupPhoneDetails;

	readonly tfaRemoveSecurityKeyDetails: DBTEAMLOGTfaRemoveSecurityKeyDetails;

	readonly tfaResetDetails: DBTEAMLOGTfaResetDetails;

	readonly twoAccountChangePolicyDetails: DBTEAMLOGTwoAccountChangePolicyDetails;

	readonly viewerInfoPolicyChangedDetails: DBTEAMLOGViewerInfoPolicyChangedDetails;

	readonly webSessionsChangeFixedLengthPolicyDetails: DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails;

	readonly webSessionsChangeIdleLengthPolicyDetails: DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountCaptureChangeAvailabilityDetails: DBTEAMLOGAccountCaptureChangeAvailabilityDetails; });

	constructor(o: { accountCaptureChangePolicyDetails: DBTEAMLOGAccountCaptureChangePolicyDetails; });

	constructor(o: { accountCaptureMigrateAccountDetails: DBTEAMLOGAccountCaptureMigrateAccountDetails; });

	constructor(o: { accountCaptureNotificationEmailsSentDetails: DBTEAMLOGAccountCaptureNotificationEmailsSentDetails; });

	constructor(o: { accountCaptureRelinquishAccountDetails: DBTEAMLOGAccountCaptureRelinquishAccountDetails; });

	constructor(o: { allowDownloadDisabledDetails: DBTEAMLOGAllowDownloadDisabledDetails; });

	constructor(o: { allowDownloadEnabledDetails: DBTEAMLOGAllowDownloadEnabledDetails; });

	constructor(o: { appLinkTeamDetails: DBTEAMLOGAppLinkTeamDetails; });

	constructor(o: { appLinkUserDetails: DBTEAMLOGAppLinkUserDetails; });

	constructor(o: { appUnlinkTeamDetails: DBTEAMLOGAppUnlinkTeamDetails; });

	constructor(o: { appUnlinkUserDetails: DBTEAMLOGAppUnlinkUserDetails; });

	constructor(o: { cameraUploadsPolicyChangedDetails: DBTEAMLOGCameraUploadsPolicyChangedDetails; });

	constructor(o: { collectionShareDetails: DBTEAMLOGCollectionShareDetails; });

	constructor(o: { createFolderDetails: DBTEAMLOGCreateFolderDetails; });

	constructor(o: { dataPlacementRestrictionChangePolicyDetails: DBTEAMLOGDataPlacementRestrictionChangePolicyDetails; });

	constructor(o: { dataPlacementRestrictionSatisfyPolicyDetails: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails; });

	constructor(o: { deviceApprovalsChangeDesktopPolicyDetails: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails; });

	constructor(o: { deviceApprovalsChangeMobilePolicyDetails: DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails; });

	constructor(o: { deviceApprovalsChangeOverageActionDetails: DBTEAMLOGDeviceApprovalsChangeOverageActionDetails; });

	constructor(o: { deviceApprovalsChangeUnlinkActionDetails: DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails; });

	constructor(o: { deviceChangeIpDesktopDetails: DBTEAMLOGDeviceChangeIpDesktopDetails; });

	constructor(o: { deviceChangeIpMobileDetails: DBTEAMLOGDeviceChangeIpMobileDetails; });

	constructor(o: { deviceChangeIpWebDetails: DBTEAMLOGDeviceChangeIpWebDetails; });

	constructor(o: { deviceDeleteOnUnlinkFailDetails: DBTEAMLOGDeviceDeleteOnUnlinkFailDetails; });

	constructor(o: { deviceDeleteOnUnlinkSuccessDetails: DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails; });

	constructor(o: { deviceLinkFailDetails: DBTEAMLOGDeviceLinkFailDetails; });

	constructor(o: { deviceLinkSuccessDetails: DBTEAMLOGDeviceLinkSuccessDetails; });

	constructor(o: { deviceManagementDisabledDetails: DBTEAMLOGDeviceManagementDisabledDetails; });

	constructor(o: { deviceManagementEnabledDetails: DBTEAMLOGDeviceManagementEnabledDetails; });

	constructor(o: { deviceUnlinkDetails: DBTEAMLOGDeviceUnlinkDetails; });

	constructor(o: { directoryRestrictionsAddMembersDetails: DBTEAMLOGDirectoryRestrictionsAddMembersDetails; });

	constructor(o: { directoryRestrictionsRemoveMembersDetails: DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails; });

	constructor(o: { disabledDomainInvitesDetails: DBTEAMLOGDisabledDomainInvitesDetails; });

	constructor(o: { domainInvitesApproveRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails; });

	constructor(o: { domainInvitesDeclineRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails; });

	constructor(o: { domainInvitesEmailExistingUsersDetails: DBTEAMLOGDomainInvitesEmailExistingUsersDetails; });

	constructor(o: { domainInvitesRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesRequestToJoinTeamDetails; });

	constructor(o: { domainInvitesSetInviteNewUserPrefToNoDetails: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails; });

	constructor(o: { domainInvitesSetInviteNewUserPrefToYesDetails: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails; });

	constructor(o: { domainVerificationAddDomainFailDetails: DBTEAMLOGDomainVerificationAddDomainFailDetails; });

	constructor(o: { domainVerificationAddDomainSuccessDetails: DBTEAMLOGDomainVerificationAddDomainSuccessDetails; });

	constructor(o: { domainVerificationRemoveDomainDetails: DBTEAMLOGDomainVerificationRemoveDomainDetails; });

	constructor(o: { emmAddExceptionDetails: DBTEAMLOGEmmAddExceptionDetails; });

	constructor(o: { emmChangePolicyDetails: DBTEAMLOGEmmChangePolicyDetails; });

	constructor(o: { emmCreateExceptionsReportDetails: DBTEAMLOGEmmCreateExceptionsReportDetails; });

	constructor(o: { emmCreateUsageReportDetails: DBTEAMLOGEmmCreateUsageReportDetails; });

	constructor(o: { emmErrorDetails: DBTEAMLOGEmmErrorDetails; });

	constructor(o: { emmRefreshAuthTokenDetails: DBTEAMLOGEmmRefreshAuthTokenDetails; });

	constructor(o: { emmRemoveExceptionDetails: DBTEAMLOGEmmRemoveExceptionDetails; });

	constructor(o: { enabledDomainInvitesDetails: DBTEAMLOGEnabledDomainInvitesDetails; });

	constructor(o: { exportMembersReportDetails: DBTEAMLOGExportMembersReportDetails; });

	constructor(o: { extendedVersionHistoryChangePolicyDetails: DBTEAMLOGExtendedVersionHistoryChangePolicyDetails; });

	constructor(o: { fileAddCommentDetails: DBTEAMLOGFileAddCommentDetails; });

	constructor(o: { fileAddDetails: DBTEAMLOGFileAddDetails; });

	constructor(o: { fileChangeCommentSubscriptionDetails: DBTEAMLOGFileChangeCommentSubscriptionDetails; });

	constructor(o: { fileCommentsChangePolicyDetails: DBTEAMLOGFileCommentsChangePolicyDetails; });

	constructor(o: { fileCopyDetails: DBTEAMLOGFileCopyDetails; });

	constructor(o: { fileDeleteCommentDetails: DBTEAMLOGFileDeleteCommentDetails; });

	constructor(o: { fileDeleteDetails: DBTEAMLOGFileDeleteDetails; });

	constructor(o: { fileDownloadDetails: DBTEAMLOGFileDownloadDetails; });

	constructor(o: { fileEditCommentDetails: DBTEAMLOGFileEditCommentDetails; });

	constructor(o: { fileEditDetails: DBTEAMLOGFileEditDetails; });

	constructor(o: { fileGetCopyReferenceDetails: DBTEAMLOGFileGetCopyReferenceDetails; });

	constructor(o: { fileLikeCommentDetails: DBTEAMLOGFileLikeCommentDetails; });

	constructor(o: { fileMoveDetails: DBTEAMLOGFileMoveDetails; });

	constructor(o: { filePermanentlyDeleteDetails: DBTEAMLOGFilePermanentlyDeleteDetails; });

	constructor(o: { filePreviewDetails: DBTEAMLOGFilePreviewDetails; });

	constructor(o: { fileRenameDetails: DBTEAMLOGFileRenameDetails; });

	constructor(o: { fileRequestChangeDetails: DBTEAMLOGFileRequestChangeDetails; });

	constructor(o: { fileRequestCloseDetails: DBTEAMLOGFileRequestCloseDetails; });

	constructor(o: { fileRequestCreateDetails: DBTEAMLOGFileRequestCreateDetails; });

	constructor(o: { fileRequestReceiveFileDetails: DBTEAMLOGFileRequestReceiveFileDetails; });

	constructor(o: { fileRequestsChangePolicyDetails: DBTEAMLOGFileRequestsChangePolicyDetails; });

	constructor(o: { fileRequestsEmailsEnabledDetails: DBTEAMLOGFileRequestsEmailsEnabledDetails; });

	constructor(o: { fileRequestsEmailsRestrictedToTeamOnlyDetails: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails; });

	constructor(o: { fileResolveCommentDetails: DBTEAMLOGFileResolveCommentDetails; });

	constructor(o: { fileRestoreDetails: DBTEAMLOGFileRestoreDetails; });

	constructor(o: { fileRevertDetails: DBTEAMLOGFileRevertDetails; });

	constructor(o: { fileRollbackChangesDetails: DBTEAMLOGFileRollbackChangesDetails; });

	constructor(o: { fileSaveCopyReferenceDetails: DBTEAMLOGFileSaveCopyReferenceDetails; });

	constructor(o: { fileUnlikeCommentDetails: DBTEAMLOGFileUnlikeCommentDetails; });

	constructor(o: { fileUnresolveCommentDetails: DBTEAMLOGFileUnresolveCommentDetails; });

	constructor(o: { googleSsoChangePolicyDetails: DBTEAMLOGGoogleSsoChangePolicyDetails; });

	constructor(o: { groupAddExternalIdDetails: DBTEAMLOGGroupAddExternalIdDetails; });

	constructor(o: { groupAddMemberDetails: DBTEAMLOGGroupAddMemberDetails; });

	constructor(o: { groupChangeExternalIdDetails: DBTEAMLOGGroupChangeExternalIdDetails; });

	constructor(o: { groupChangeManagementTypeDetails: DBTEAMLOGGroupChangeManagementTypeDetails; });

	constructor(o: { groupChangeMemberRoleDetails: DBTEAMLOGGroupChangeMemberRoleDetails; });

	constructor(o: { groupCreateDetails: DBTEAMLOGGroupCreateDetails; });

	constructor(o: { groupDeleteDetails: DBTEAMLOGGroupDeleteDetails; });

	constructor(o: { groupDescriptionUpdatedDetails: DBTEAMLOGGroupDescriptionUpdatedDetails; });

	constructor(o: { groupJoinPolicyUpdatedDetails: DBTEAMLOGGroupJoinPolicyUpdatedDetails; });

	constructor(o: { groupMovedDetails: DBTEAMLOGGroupMovedDetails; });

	constructor(o: { groupRemoveExternalIdDetails: DBTEAMLOGGroupRemoveExternalIdDetails; });

	constructor(o: { groupRemoveMemberDetails: DBTEAMLOGGroupRemoveMemberDetails; });

	constructor(o: { groupRenameDetails: DBTEAMLOGGroupRenameDetails; });

	constructor(o: { groupUserManagementChangePolicyDetails: DBTEAMLOGGroupUserManagementChangePolicyDetails; });

	constructor(o: { loginFailDetails: DBTEAMLOGLoginFailDetails; });

	constructor(o: { loginSuccessDetails: DBTEAMLOGLoginSuccessDetails; });

	constructor(o: { logoutDetails: DBTEAMLOGLogoutDetails; });

	constructor(o: { memberAddNameDetails: DBTEAMLOGMemberAddNameDetails; });

	constructor(o: { memberChangeAdminRoleDetails: DBTEAMLOGMemberChangeAdminRoleDetails; });

	constructor(o: { memberChangeEmailDetails: DBTEAMLOGMemberChangeEmailDetails; });

	constructor(o: { memberChangeMembershipTypeDetails: DBTEAMLOGMemberChangeMembershipTypeDetails; });

	constructor(o: { memberChangeNameDetails: DBTEAMLOGMemberChangeNameDetails; });

	constructor(o: { memberChangeStatusDetails: DBTEAMLOGMemberChangeStatusDetails; });

	constructor(o: { memberDeleteManualContactsDetails: DBTEAMLOGMemberDeleteManualContactsDetails; });

	constructor(o: { memberPermanentlyDeleteAccountContentsDetails: DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails; });

	constructor(o: { memberRequestsChangePolicyDetails: DBTEAMLOGMemberRequestsChangePolicyDetails; });

	constructor(o: { memberSpaceLimitsAddCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails; });

	constructor(o: { memberSpaceLimitsAddExceptionDetails: DBTEAMLOGMemberSpaceLimitsAddExceptionDetails; });

	constructor(o: { memberSpaceLimitsChangeCapsTypePolicyDetails: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails; });

	constructor(o: { memberSpaceLimitsChangeCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails; });

	constructor(o: { memberSpaceLimitsChangePolicyDetails: DBTEAMLOGMemberSpaceLimitsChangePolicyDetails; });

	constructor(o: { memberSpaceLimitsChangeStatusDetails: DBTEAMLOGMemberSpaceLimitsChangeStatusDetails; });

	constructor(o: { memberSpaceLimitsRemoveCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails; });

	constructor(o: { memberSpaceLimitsRemoveExceptionDetails: DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails; });

	constructor(o: { memberSuggestDetails: DBTEAMLOGMemberSuggestDetails; });

	constructor(o: { memberSuggestionsChangePolicyDetails: DBTEAMLOGMemberSuggestionsChangePolicyDetails; });

	constructor(o: { memberTransferAccountContentsDetails: DBTEAMLOGMemberTransferAccountContentsDetails; });

	constructor(o: { microsoftOfficeAddinChangePolicyDetails: DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails; });

	constructor(o: { missingDetails: DBTEAMLOGMissingDetails; });

	constructor(o: { networkControlChangePolicyDetails: DBTEAMLOGNetworkControlChangePolicyDetails; });

	constructor(o: { noteAclInviteOnlyDetails: DBTEAMLOGNoteAclInviteOnlyDetails; });

	constructor(o: { noteAclLinkDetails: DBTEAMLOGNoteAclLinkDetails; });

	constructor(o: { noteAclTeamLinkDetails: DBTEAMLOGNoteAclTeamLinkDetails; });

	constructor(o: { noteShareReceiveDetails: DBTEAMLOGNoteShareReceiveDetails; });

	constructor(o: { noteSharedDetails: DBTEAMLOGNoteSharedDetails; });

	constructor(o: { openNoteSharedDetails: DBTEAMLOGOpenNoteSharedDetails; });

	constructor(o: { other: void; });

	constructor(o: { paperAdminExportStartDetails: DBTEAMLOGPaperAdminExportStartDetails; });

	constructor(o: { paperChangeDeploymentPolicyDetails: DBTEAMLOGPaperChangeDeploymentPolicyDetails; });

	constructor(o: { paperChangeMemberLinkPolicyDetails: DBTEAMLOGPaperChangeMemberLinkPolicyDetails; });

	constructor(o: { paperChangeMemberPolicyDetails: DBTEAMLOGPaperChangeMemberPolicyDetails; });

	constructor(o: { paperChangePolicyDetails: DBTEAMLOGPaperChangePolicyDetails; });

	constructor(o: { paperContentAddMemberDetails: DBTEAMLOGPaperContentAddMemberDetails; });

	constructor(o: { paperContentAddToFolderDetails: DBTEAMLOGPaperContentAddToFolderDetails; });

	constructor(o: { paperContentArchiveDetails: DBTEAMLOGPaperContentArchiveDetails; });

	constructor(o: { paperContentCreateDetails: DBTEAMLOGPaperContentCreateDetails; });

	constructor(o: { paperContentPermanentlyDeleteDetails: DBTEAMLOGPaperContentPermanentlyDeleteDetails; });

	constructor(o: { paperContentRemoveFromFolderDetails: DBTEAMLOGPaperContentRemoveFromFolderDetails; });

	constructor(o: { paperContentRemoveMemberDetails: DBTEAMLOGPaperContentRemoveMemberDetails; });

	constructor(o: { paperContentRenameDetails: DBTEAMLOGPaperContentRenameDetails; });

	constructor(o: { paperContentRestoreDetails: DBTEAMLOGPaperContentRestoreDetails; });

	constructor(o: { paperDocAddCommentDetails: DBTEAMLOGPaperDocAddCommentDetails; });

	constructor(o: { paperDocChangeMemberRoleDetails: DBTEAMLOGPaperDocChangeMemberRoleDetails; });

	constructor(o: { paperDocChangeSharingPolicyDetails: DBTEAMLOGPaperDocChangeSharingPolicyDetails; });

	constructor(o: { paperDocChangeSubscriptionDetails: DBTEAMLOGPaperDocChangeSubscriptionDetails; });

	constructor(o: { paperDocDeleteCommentDetails: DBTEAMLOGPaperDocDeleteCommentDetails; });

	constructor(o: { paperDocDeletedDetails: DBTEAMLOGPaperDocDeletedDetails; });

	constructor(o: { paperDocDownloadDetails: DBTEAMLOGPaperDocDownloadDetails; });

	constructor(o: { paperDocEditCommentDetails: DBTEAMLOGPaperDocEditCommentDetails; });

	constructor(o: { paperDocEditDetails: DBTEAMLOGPaperDocEditDetails; });

	constructor(o: { paperDocFollowedDetails: DBTEAMLOGPaperDocFollowedDetails; });

	constructor(o: { paperDocMentionDetails: DBTEAMLOGPaperDocMentionDetails; });

	constructor(o: { paperDocOwnershipChangedDetails: DBTEAMLOGPaperDocOwnershipChangedDetails; });

	constructor(o: { paperDocRequestAccessDetails: DBTEAMLOGPaperDocRequestAccessDetails; });

	constructor(o: { paperDocResolveCommentDetails: DBTEAMLOGPaperDocResolveCommentDetails; });

	constructor(o: { paperDocRevertDetails: DBTEAMLOGPaperDocRevertDetails; });

	constructor(o: { paperDocSlackShareDetails: DBTEAMLOGPaperDocSlackShareDetails; });

	constructor(o: { paperDocTeamInviteDetails: DBTEAMLOGPaperDocTeamInviteDetails; });

	constructor(o: { paperDocTrashedDetails: DBTEAMLOGPaperDocTrashedDetails; });

	constructor(o: { paperDocUnresolveCommentDetails: DBTEAMLOGPaperDocUnresolveCommentDetails; });

	constructor(o: { paperDocUntrashedDetails: DBTEAMLOGPaperDocUntrashedDetails; });

	constructor(o: { paperDocViewDetails: DBTEAMLOGPaperDocViewDetails; });

	constructor(o: { paperEnabledUsersGroupAdditionDetails: DBTEAMLOGPaperEnabledUsersGroupAdditionDetails; });

	constructor(o: { paperEnabledUsersGroupRemovalDetails: DBTEAMLOGPaperEnabledUsersGroupRemovalDetails; });

	constructor(o: { paperExternalViewAllowDetails: DBTEAMLOGPaperExternalViewAllowDetails; });

	constructor(o: { paperExternalViewDefaultTeamDetails: DBTEAMLOGPaperExternalViewDefaultTeamDetails; });

	constructor(o: { paperExternalViewForbidDetails: DBTEAMLOGPaperExternalViewForbidDetails; });

	constructor(o: { paperFolderChangeSubscriptionDetails: DBTEAMLOGPaperFolderChangeSubscriptionDetails; });

	constructor(o: { paperFolderDeletedDetails: DBTEAMLOGPaperFolderDeletedDetails; });

	constructor(o: { paperFolderFollowedDetails: DBTEAMLOGPaperFolderFollowedDetails; });

	constructor(o: { paperFolderTeamInviteDetails: DBTEAMLOGPaperFolderTeamInviteDetails; });

	constructor(o: { passwordChangeDetails: DBTEAMLOGPasswordChangeDetails; });

	constructor(o: { passwordResetAllDetails: DBTEAMLOGPasswordResetAllDetails; });

	constructor(o: { passwordResetDetails: DBTEAMLOGPasswordResetDetails; });

	constructor(o: { permanentDeleteChangePolicyDetails: DBTEAMLOGPermanentDeleteChangePolicyDetails; });

	constructor(o: { resellerSupportSessionEndDetails: DBTEAMLOGResellerSupportSessionEndDetails; });

	constructor(o: { resellerSupportSessionStartDetails: DBTEAMLOGResellerSupportSessionStartDetails; });

	constructor(o: { secondaryMailsPolicyChangedDetails: DBTEAMLOGSecondaryMailsPolicyChangedDetails; });

	constructor(o: { sfAddGroupDetails: DBTEAMLOGSfAddGroupDetails; });

	constructor(o: { sfAllowNonMembersToViewSharedLinksDetails: DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails; });

	constructor(o: { sfExternalInviteWarnDetails: DBTEAMLOGSfExternalInviteWarnDetails; });

	constructor(o: { sfFbInviteChangeRoleDetails: DBTEAMLOGSfFbInviteChangeRoleDetails; });

	constructor(o: { sfFbInviteDetails: DBTEAMLOGSfFbInviteDetails; });

	constructor(o: { sfFbUninviteDetails: DBTEAMLOGSfFbUninviteDetails; });

	constructor(o: { sfInviteGroupDetails: DBTEAMLOGSfInviteGroupDetails; });

	constructor(o: { sfTeamGrantAccessDetails: DBTEAMLOGSfTeamGrantAccessDetails; });

	constructor(o: { sfTeamInviteChangeRoleDetails: DBTEAMLOGSfTeamInviteChangeRoleDetails; });

	constructor(o: { sfTeamInviteDetails: DBTEAMLOGSfTeamInviteDetails; });

	constructor(o: { sfTeamJoinDetails: DBTEAMLOGSfTeamJoinDetails; });

	constructor(o: { sfTeamJoinFromOobLinkDetails: DBTEAMLOGSfTeamJoinFromOobLinkDetails; });

	constructor(o: { sfTeamUninviteDetails: DBTEAMLOGSfTeamUninviteDetails; });

	constructor(o: { sharedContentAddInviteesDetails: DBTEAMLOGSharedContentAddInviteesDetails; });

	constructor(o: { sharedContentAddLinkExpiryDetails: DBTEAMLOGSharedContentAddLinkExpiryDetails; });

	constructor(o: { sharedContentAddLinkPasswordDetails: DBTEAMLOGSharedContentAddLinkPasswordDetails; });

	constructor(o: { sharedContentAddMemberDetails: DBTEAMLOGSharedContentAddMemberDetails; });

	constructor(o: { sharedContentChangeDownloadsPolicyDetails: DBTEAMLOGSharedContentChangeDownloadsPolicyDetails; });

	constructor(o: { sharedContentChangeInviteeRoleDetails: DBTEAMLOGSharedContentChangeInviteeRoleDetails; });

	constructor(o: { sharedContentChangeLinkAudienceDetails: DBTEAMLOGSharedContentChangeLinkAudienceDetails; });

	constructor(o: { sharedContentChangeLinkExpiryDetails: DBTEAMLOGSharedContentChangeLinkExpiryDetails; });

	constructor(o: { sharedContentChangeLinkPasswordDetails: DBTEAMLOGSharedContentChangeLinkPasswordDetails; });

	constructor(o: { sharedContentChangeMemberRoleDetails: DBTEAMLOGSharedContentChangeMemberRoleDetails; });

	constructor(o: { sharedContentChangeViewerInfoPolicyDetails: DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails; });

	constructor(o: { sharedContentClaimInvitationDetails: DBTEAMLOGSharedContentClaimInvitationDetails; });

	constructor(o: { sharedContentCopyDetails: DBTEAMLOGSharedContentCopyDetails; });

	constructor(o: { sharedContentDownloadDetails: DBTEAMLOGSharedContentDownloadDetails; });

	constructor(o: { sharedContentRelinquishMembershipDetails: DBTEAMLOGSharedContentRelinquishMembershipDetails; });

	constructor(o: { sharedContentRemoveInviteesDetails: DBTEAMLOGSharedContentRemoveInviteesDetails; });

	constructor(o: { sharedContentRemoveLinkExpiryDetails: DBTEAMLOGSharedContentRemoveLinkExpiryDetails; });

	constructor(o: { sharedContentRemoveLinkPasswordDetails: DBTEAMLOGSharedContentRemoveLinkPasswordDetails; });

	constructor(o: { sharedContentRemoveMemberDetails: DBTEAMLOGSharedContentRemoveMemberDetails; });

	constructor(o: { sharedContentRequestAccessDetails: DBTEAMLOGSharedContentRequestAccessDetails; });

	constructor(o: { sharedContentUnshareDetails: DBTEAMLOGSharedContentUnshareDetails; });

	constructor(o: { sharedContentViewDetails: DBTEAMLOGSharedContentViewDetails; });

	constructor(o: { sharedFolderChangeLinkPolicyDetails: DBTEAMLOGSharedFolderChangeLinkPolicyDetails; });

	constructor(o: { sharedFolderChangeMembersInheritancePolicyDetails: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails; });

	constructor(o: { sharedFolderChangeMembersManagementPolicyDetails: DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails; });

	constructor(o: { sharedFolderChangeMembersPolicyDetails: DBTEAMLOGSharedFolderChangeMembersPolicyDetails; });

	constructor(o: { sharedFolderCreateDetails: DBTEAMLOGSharedFolderCreateDetails; });

	constructor(o: { sharedFolderDeclineInvitationDetails: DBTEAMLOGSharedFolderDeclineInvitationDetails; });

	constructor(o: { sharedFolderMountDetails: DBTEAMLOGSharedFolderMountDetails; });

	constructor(o: { sharedFolderNestDetails: DBTEAMLOGSharedFolderNestDetails; });

	constructor(o: { sharedFolderTransferOwnershipDetails: DBTEAMLOGSharedFolderTransferOwnershipDetails; });

	constructor(o: { sharedFolderUnmountDetails: DBTEAMLOGSharedFolderUnmountDetails; });

	constructor(o: { sharedLinkAddExpiryDetails: DBTEAMLOGSharedLinkAddExpiryDetails; });

	constructor(o: { sharedLinkChangeExpiryDetails: DBTEAMLOGSharedLinkChangeExpiryDetails; });

	constructor(o: { sharedLinkChangeVisibilityDetails: DBTEAMLOGSharedLinkChangeVisibilityDetails; });

	constructor(o: { sharedLinkCopyDetails: DBTEAMLOGSharedLinkCopyDetails; });

	constructor(o: { sharedLinkCreateDetails: DBTEAMLOGSharedLinkCreateDetails; });

	constructor(o: { sharedLinkDisableDetails: DBTEAMLOGSharedLinkDisableDetails; });

	constructor(o: { sharedLinkDownloadDetails: DBTEAMLOGSharedLinkDownloadDetails; });

	constructor(o: { sharedLinkRemoveExpiryDetails: DBTEAMLOGSharedLinkRemoveExpiryDetails; });

	constructor(o: { sharedLinkShareDetails: DBTEAMLOGSharedLinkShareDetails; });

	constructor(o: { sharedLinkViewDetails: DBTEAMLOGSharedLinkViewDetails; });

	constructor(o: { sharedNoteOpenedDetails: DBTEAMLOGSharedNoteOpenedDetails; });

	constructor(o: { sharingChangeFolderJoinPolicyDetails: DBTEAMLOGSharingChangeFolderJoinPolicyDetails; });

	constructor(o: { sharingChangeLinkPolicyDetails: DBTEAMLOGSharingChangeLinkPolicyDetails; });

	constructor(o: { sharingChangeMemberPolicyDetails: DBTEAMLOGSharingChangeMemberPolicyDetails; });

	constructor(o: { shmodelGroupShareDetails: DBTEAMLOGShmodelGroupShareDetails; });

	constructor(o: { showcaseAccessGrantedDetails: DBTEAMLOGShowcaseAccessGrantedDetails; });

	constructor(o: { showcaseAddMemberDetails: DBTEAMLOGShowcaseAddMemberDetails; });

	constructor(o: { showcaseArchivedDetails: DBTEAMLOGShowcaseArchivedDetails; });

	constructor(o: { showcaseChangeDownloadPolicyDetails: DBTEAMLOGShowcaseChangeDownloadPolicyDetails; });

	constructor(o: { showcaseChangeEnabledPolicyDetails: DBTEAMLOGShowcaseChangeEnabledPolicyDetails; });

	constructor(o: { showcaseChangeExternalSharingPolicyDetails: DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails; });

	constructor(o: { showcaseCreatedDetails: DBTEAMLOGShowcaseCreatedDetails; });

	constructor(o: { showcaseDeleteCommentDetails: DBTEAMLOGShowcaseDeleteCommentDetails; });

	constructor(o: { showcaseEditCommentDetails: DBTEAMLOGShowcaseEditCommentDetails; });

	constructor(o: { showcaseEditedDetails: DBTEAMLOGShowcaseEditedDetails; });

	constructor(o: { showcaseFileAddedDetails: DBTEAMLOGShowcaseFileAddedDetails; });

	constructor(o: { showcaseFileDownloadDetails: DBTEAMLOGShowcaseFileDownloadDetails; });

	constructor(o: { showcaseFileRemovedDetails: DBTEAMLOGShowcaseFileRemovedDetails; });

	constructor(o: { showcaseFileViewDetails: DBTEAMLOGShowcaseFileViewDetails; });

	constructor(o: { showcasePermanentlyDeletedDetails: DBTEAMLOGShowcasePermanentlyDeletedDetails; });

	constructor(o: { showcasePostCommentDetails: DBTEAMLOGShowcasePostCommentDetails; });

	constructor(o: { showcaseRemoveMemberDetails: DBTEAMLOGShowcaseRemoveMemberDetails; });

	constructor(o: { showcaseRenamedDetails: DBTEAMLOGShowcaseRenamedDetails; });

	constructor(o: { showcaseRequestAccessDetails: DBTEAMLOGShowcaseRequestAccessDetails; });

	constructor(o: { showcaseResolveCommentDetails: DBTEAMLOGShowcaseResolveCommentDetails; });

	constructor(o: { showcaseRestoredDetails: DBTEAMLOGShowcaseRestoredDetails; });

	constructor(o: { showcaseTrashedDeprecatedDetails: DBTEAMLOGShowcaseTrashedDeprecatedDetails; });

	constructor(o: { showcaseTrashedDetails: DBTEAMLOGShowcaseTrashedDetails; });

	constructor(o: { showcaseUnresolveCommentDetails: DBTEAMLOGShowcaseUnresolveCommentDetails; });

	constructor(o: { showcaseUntrashedDeprecatedDetails: DBTEAMLOGShowcaseUntrashedDeprecatedDetails; });

	constructor(o: { showcaseUntrashedDetails: DBTEAMLOGShowcaseUntrashedDetails; });

	constructor(o: { showcaseViewDetails: DBTEAMLOGShowcaseViewDetails; });

	constructor(o: { signInAsSessionEndDetails: DBTEAMLOGSignInAsSessionEndDetails; });

	constructor(o: { signInAsSessionStartDetails: DBTEAMLOGSignInAsSessionStartDetails; });

	constructor(o: { smartSyncChangePolicyDetails: DBTEAMLOGSmartSyncChangePolicyDetails; });

	constructor(o: { smartSyncCreateAdminPrivilegeReportDetails: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails; });

	constructor(o: { smartSyncNotOptOutDetails: DBTEAMLOGSmartSyncNotOptOutDetails; });

	constructor(o: { smartSyncOptOutDetails: DBTEAMLOGSmartSyncOptOutDetails; });

	constructor(o: { ssoAddCertDetails: DBTEAMLOGSsoAddCertDetails; });

	constructor(o: { ssoAddLoginUrlDetails: DBTEAMLOGSsoAddLoginUrlDetails; });

	constructor(o: { ssoAddLogoutUrlDetails: DBTEAMLOGSsoAddLogoutUrlDetails; });

	constructor(o: { ssoChangeCertDetails: DBTEAMLOGSsoChangeCertDetails; });

	constructor(o: { ssoChangeLoginUrlDetails: DBTEAMLOGSsoChangeLoginUrlDetails; });

	constructor(o: { ssoChangeLogoutUrlDetails: DBTEAMLOGSsoChangeLogoutUrlDetails; });

	constructor(o: { ssoChangePolicyDetails: DBTEAMLOGSsoChangePolicyDetails; });

	constructor(o: { ssoChangeSamlIdentityModeDetails: DBTEAMLOGSsoChangeSamlIdentityModeDetails; });

	constructor(o: { ssoErrorDetails: DBTEAMLOGSsoErrorDetails; });

	constructor(o: { ssoRemoveCertDetails: DBTEAMLOGSsoRemoveCertDetails; });

	constructor(o: { ssoRemoveLoginUrlDetails: DBTEAMLOGSsoRemoveLoginUrlDetails; });

	constructor(o: { ssoRemoveLogoutUrlDetails: DBTEAMLOGSsoRemoveLogoutUrlDetails; });

	constructor(o: { teamActivityCreateReportDetails: DBTEAMLOGTeamActivityCreateReportDetails; });

	constructor(o: { teamFolderChangeStatusDetails: DBTEAMLOGTeamFolderChangeStatusDetails; });

	constructor(o: { teamFolderCreateDetails: DBTEAMLOGTeamFolderCreateDetails; });

	constructor(o: { teamFolderDowngradeDetails: DBTEAMLOGTeamFolderDowngradeDetails; });

	constructor(o: { teamFolderPermanentlyDeleteDetails: DBTEAMLOGTeamFolderPermanentlyDeleteDetails; });

	constructor(o: { teamFolderRenameDetails: DBTEAMLOGTeamFolderRenameDetails; });

	constructor(o: { teamMergeFromDetails: DBTEAMLOGTeamMergeFromDetails; });

	constructor(o: { teamMergeToDetails: DBTEAMLOGTeamMergeToDetails; });

	constructor(o: { teamProfileAddLogoDetails: DBTEAMLOGTeamProfileAddLogoDetails; });

	constructor(o: { teamProfileChangeDefaultLanguageDetails: DBTEAMLOGTeamProfileChangeDefaultLanguageDetails; });

	constructor(o: { teamProfileChangeLogoDetails: DBTEAMLOGTeamProfileChangeLogoDetails; });

	constructor(o: { teamProfileChangeNameDetails: DBTEAMLOGTeamProfileChangeNameDetails; });

	constructor(o: { teamProfileRemoveLogoDetails: DBTEAMLOGTeamProfileRemoveLogoDetails; });

	constructor(o: { teamSelectiveSyncPolicyChangedDetails: DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails; });

	constructor(o: { teamSelectiveSyncSettingsChangedDetails: DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails; });

	constructor(o: { tfaAddBackupPhoneDetails: DBTEAMLOGTfaAddBackupPhoneDetails; });

	constructor(o: { tfaAddSecurityKeyDetails: DBTEAMLOGTfaAddSecurityKeyDetails; });

	constructor(o: { tfaChangeBackupPhoneDetails: DBTEAMLOGTfaChangeBackupPhoneDetails; });

	constructor(o: { tfaChangePolicyDetails: DBTEAMLOGTfaChangePolicyDetails; });

	constructor(o: { tfaChangeStatusDetails: DBTEAMLOGTfaChangeStatusDetails; });

	constructor(o: { tfaRemoveBackupPhoneDetails: DBTEAMLOGTfaRemoveBackupPhoneDetails; });

	constructor(o: { tfaRemoveSecurityKeyDetails: DBTEAMLOGTfaRemoveSecurityKeyDetails; });

	constructor(o: { tfaResetDetails: DBTEAMLOGTfaResetDetails; });

	constructor(o: { twoAccountChangePolicyDetails: DBTEAMLOGTwoAccountChangePolicyDetails; });

	constructor(o: { viewerInfoPolicyChangedDetails: DBTEAMLOGViewerInfoPolicyChangedDetails; });

	constructor(o: { webSessionsChangeFixedLengthPolicyDetails: DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails; });

	constructor(o: { webSessionsChangeIdleLengthPolicyDetails: DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountCaptureChangeAvailabilityDetails(accountCaptureChangeAvailabilityDetails: DBTEAMLOGAccountCaptureChangeAvailabilityDetails): this;

	initWithAccountCaptureChangePolicyDetails(accountCaptureChangePolicyDetails: DBTEAMLOGAccountCaptureChangePolicyDetails): this;

	initWithAccountCaptureMigrateAccountDetails(accountCaptureMigrateAccountDetails: DBTEAMLOGAccountCaptureMigrateAccountDetails): this;

	initWithAccountCaptureNotificationEmailsSentDetails(accountCaptureNotificationEmailsSentDetails: DBTEAMLOGAccountCaptureNotificationEmailsSentDetails): this;

	initWithAccountCaptureRelinquishAccountDetails(accountCaptureRelinquishAccountDetails: DBTEAMLOGAccountCaptureRelinquishAccountDetails): this;

	initWithAllowDownloadDisabledDetails(allowDownloadDisabledDetails: DBTEAMLOGAllowDownloadDisabledDetails): this;

	initWithAllowDownloadEnabledDetails(allowDownloadEnabledDetails: DBTEAMLOGAllowDownloadEnabledDetails): this;

	initWithAppLinkTeamDetails(appLinkTeamDetails: DBTEAMLOGAppLinkTeamDetails): this;

	initWithAppLinkUserDetails(appLinkUserDetails: DBTEAMLOGAppLinkUserDetails): this;

	initWithAppUnlinkTeamDetails(appUnlinkTeamDetails: DBTEAMLOGAppUnlinkTeamDetails): this;

	initWithAppUnlinkUserDetails(appUnlinkUserDetails: DBTEAMLOGAppUnlinkUserDetails): this;

	initWithCameraUploadsPolicyChangedDetails(cameraUploadsPolicyChangedDetails: DBTEAMLOGCameraUploadsPolicyChangedDetails): this;

	initWithCollectionShareDetails(collectionShareDetails: DBTEAMLOGCollectionShareDetails): this;

	initWithCreateFolderDetails(createFolderDetails: DBTEAMLOGCreateFolderDetails): this;

	initWithDataPlacementRestrictionChangePolicyDetails(dataPlacementRestrictionChangePolicyDetails: DBTEAMLOGDataPlacementRestrictionChangePolicyDetails): this;

	initWithDataPlacementRestrictionSatisfyPolicyDetails(dataPlacementRestrictionSatisfyPolicyDetails: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails): this;

	initWithDeviceApprovalsChangeDesktopPolicyDetails(deviceApprovalsChangeDesktopPolicyDetails: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails): this;

	initWithDeviceApprovalsChangeMobilePolicyDetails(deviceApprovalsChangeMobilePolicyDetails: DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails): this;

	initWithDeviceApprovalsChangeOverageActionDetails(deviceApprovalsChangeOverageActionDetails: DBTEAMLOGDeviceApprovalsChangeOverageActionDetails): this;

	initWithDeviceApprovalsChangeUnlinkActionDetails(deviceApprovalsChangeUnlinkActionDetails: DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails): this;

	initWithDeviceChangeIpDesktopDetails(deviceChangeIpDesktopDetails: DBTEAMLOGDeviceChangeIpDesktopDetails): this;

	initWithDeviceChangeIpMobileDetails(deviceChangeIpMobileDetails: DBTEAMLOGDeviceChangeIpMobileDetails): this;

	initWithDeviceChangeIpWebDetails(deviceChangeIpWebDetails: DBTEAMLOGDeviceChangeIpWebDetails): this;

	initWithDeviceDeleteOnUnlinkFailDetails(deviceDeleteOnUnlinkFailDetails: DBTEAMLOGDeviceDeleteOnUnlinkFailDetails): this;

	initWithDeviceDeleteOnUnlinkSuccessDetails(deviceDeleteOnUnlinkSuccessDetails: DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails): this;

	initWithDeviceLinkFailDetails(deviceLinkFailDetails: DBTEAMLOGDeviceLinkFailDetails): this;

	initWithDeviceLinkSuccessDetails(deviceLinkSuccessDetails: DBTEAMLOGDeviceLinkSuccessDetails): this;

	initWithDeviceManagementDisabledDetails(deviceManagementDisabledDetails: DBTEAMLOGDeviceManagementDisabledDetails): this;

	initWithDeviceManagementEnabledDetails(deviceManagementEnabledDetails: DBTEAMLOGDeviceManagementEnabledDetails): this;

	initWithDeviceUnlinkDetails(deviceUnlinkDetails: DBTEAMLOGDeviceUnlinkDetails): this;

	initWithDirectoryRestrictionsAddMembersDetails(directoryRestrictionsAddMembersDetails: DBTEAMLOGDirectoryRestrictionsAddMembersDetails): this;

	initWithDirectoryRestrictionsRemoveMembersDetails(directoryRestrictionsRemoveMembersDetails: DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails): this;

	initWithDisabledDomainInvitesDetails(disabledDomainInvitesDetails: DBTEAMLOGDisabledDomainInvitesDetails): this;

	initWithDomainInvitesApproveRequestToJoinTeamDetails(domainInvitesApproveRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails): this;

	initWithDomainInvitesDeclineRequestToJoinTeamDetails(domainInvitesDeclineRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails): this;

	initWithDomainInvitesEmailExistingUsersDetails(domainInvitesEmailExistingUsersDetails: DBTEAMLOGDomainInvitesEmailExistingUsersDetails): this;

	initWithDomainInvitesRequestToJoinTeamDetails(domainInvitesRequestToJoinTeamDetails: DBTEAMLOGDomainInvitesRequestToJoinTeamDetails): this;

	initWithDomainInvitesSetInviteNewUserPrefToNoDetails(domainInvitesSetInviteNewUserPrefToNoDetails: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails): this;

	initWithDomainInvitesSetInviteNewUserPrefToYesDetails(domainInvitesSetInviteNewUserPrefToYesDetails: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails): this;

	initWithDomainVerificationAddDomainFailDetails(domainVerificationAddDomainFailDetails: DBTEAMLOGDomainVerificationAddDomainFailDetails): this;

	initWithDomainVerificationAddDomainSuccessDetails(domainVerificationAddDomainSuccessDetails: DBTEAMLOGDomainVerificationAddDomainSuccessDetails): this;

	initWithDomainVerificationRemoveDomainDetails(domainVerificationRemoveDomainDetails: DBTEAMLOGDomainVerificationRemoveDomainDetails): this;

	initWithEmmAddExceptionDetails(emmAddExceptionDetails: DBTEAMLOGEmmAddExceptionDetails): this;

	initWithEmmChangePolicyDetails(emmChangePolicyDetails: DBTEAMLOGEmmChangePolicyDetails): this;

	initWithEmmCreateExceptionsReportDetails(emmCreateExceptionsReportDetails: DBTEAMLOGEmmCreateExceptionsReportDetails): this;

	initWithEmmCreateUsageReportDetails(emmCreateUsageReportDetails: DBTEAMLOGEmmCreateUsageReportDetails): this;

	initWithEmmErrorDetails(emmErrorDetails: DBTEAMLOGEmmErrorDetails): this;

	initWithEmmRefreshAuthTokenDetails(emmRefreshAuthTokenDetails: DBTEAMLOGEmmRefreshAuthTokenDetails): this;

	initWithEmmRemoveExceptionDetails(emmRemoveExceptionDetails: DBTEAMLOGEmmRemoveExceptionDetails): this;

	initWithEnabledDomainInvitesDetails(enabledDomainInvitesDetails: DBTEAMLOGEnabledDomainInvitesDetails): this;

	initWithExportMembersReportDetails(exportMembersReportDetails: DBTEAMLOGExportMembersReportDetails): this;

	initWithExtendedVersionHistoryChangePolicyDetails(extendedVersionHistoryChangePolicyDetails: DBTEAMLOGExtendedVersionHistoryChangePolicyDetails): this;

	initWithFileAddCommentDetails(fileAddCommentDetails: DBTEAMLOGFileAddCommentDetails): this;

	initWithFileAddDetails(fileAddDetails: DBTEAMLOGFileAddDetails): this;

	initWithFileChangeCommentSubscriptionDetails(fileChangeCommentSubscriptionDetails: DBTEAMLOGFileChangeCommentSubscriptionDetails): this;

	initWithFileCommentsChangePolicyDetails(fileCommentsChangePolicyDetails: DBTEAMLOGFileCommentsChangePolicyDetails): this;

	initWithFileCopyDetails(fileCopyDetails: DBTEAMLOGFileCopyDetails): this;

	initWithFileDeleteCommentDetails(fileDeleteCommentDetails: DBTEAMLOGFileDeleteCommentDetails): this;

	initWithFileDeleteDetails(fileDeleteDetails: DBTEAMLOGFileDeleteDetails): this;

	initWithFileDownloadDetails(fileDownloadDetails: DBTEAMLOGFileDownloadDetails): this;

	initWithFileEditCommentDetails(fileEditCommentDetails: DBTEAMLOGFileEditCommentDetails): this;

	initWithFileEditDetails(fileEditDetails: DBTEAMLOGFileEditDetails): this;

	initWithFileGetCopyReferenceDetails(fileGetCopyReferenceDetails: DBTEAMLOGFileGetCopyReferenceDetails): this;

	initWithFileLikeCommentDetails(fileLikeCommentDetails: DBTEAMLOGFileLikeCommentDetails): this;

	initWithFileMoveDetails(fileMoveDetails: DBTEAMLOGFileMoveDetails): this;

	initWithFilePermanentlyDeleteDetails(filePermanentlyDeleteDetails: DBTEAMLOGFilePermanentlyDeleteDetails): this;

	initWithFilePreviewDetails(filePreviewDetails: DBTEAMLOGFilePreviewDetails): this;

	initWithFileRenameDetails(fileRenameDetails: DBTEAMLOGFileRenameDetails): this;

	initWithFileRequestChangeDetails(fileRequestChangeDetails: DBTEAMLOGFileRequestChangeDetails): this;

	initWithFileRequestCloseDetails(fileRequestCloseDetails: DBTEAMLOGFileRequestCloseDetails): this;

	initWithFileRequestCreateDetails(fileRequestCreateDetails: DBTEAMLOGFileRequestCreateDetails): this;

	initWithFileRequestReceiveFileDetails(fileRequestReceiveFileDetails: DBTEAMLOGFileRequestReceiveFileDetails): this;

	initWithFileRequestsChangePolicyDetails(fileRequestsChangePolicyDetails: DBTEAMLOGFileRequestsChangePolicyDetails): this;

	initWithFileRequestsEmailsEnabledDetails(fileRequestsEmailsEnabledDetails: DBTEAMLOGFileRequestsEmailsEnabledDetails): this;

	initWithFileRequestsEmailsRestrictedToTeamOnlyDetails(fileRequestsEmailsRestrictedToTeamOnlyDetails: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails): this;

	initWithFileResolveCommentDetails(fileResolveCommentDetails: DBTEAMLOGFileResolveCommentDetails): this;

	initWithFileRestoreDetails(fileRestoreDetails: DBTEAMLOGFileRestoreDetails): this;

	initWithFileRevertDetails(fileRevertDetails: DBTEAMLOGFileRevertDetails): this;

	initWithFileRollbackChangesDetails(fileRollbackChangesDetails: DBTEAMLOGFileRollbackChangesDetails): this;

	initWithFileSaveCopyReferenceDetails(fileSaveCopyReferenceDetails: DBTEAMLOGFileSaveCopyReferenceDetails): this;

	initWithFileUnlikeCommentDetails(fileUnlikeCommentDetails: DBTEAMLOGFileUnlikeCommentDetails): this;

	initWithFileUnresolveCommentDetails(fileUnresolveCommentDetails: DBTEAMLOGFileUnresolveCommentDetails): this;

	initWithGoogleSsoChangePolicyDetails(googleSsoChangePolicyDetails: DBTEAMLOGGoogleSsoChangePolicyDetails): this;

	initWithGroupAddExternalIdDetails(groupAddExternalIdDetails: DBTEAMLOGGroupAddExternalIdDetails): this;

	initWithGroupAddMemberDetails(groupAddMemberDetails: DBTEAMLOGGroupAddMemberDetails): this;

	initWithGroupChangeExternalIdDetails(groupChangeExternalIdDetails: DBTEAMLOGGroupChangeExternalIdDetails): this;

	initWithGroupChangeManagementTypeDetails(groupChangeManagementTypeDetails: DBTEAMLOGGroupChangeManagementTypeDetails): this;

	initWithGroupChangeMemberRoleDetails(groupChangeMemberRoleDetails: DBTEAMLOGGroupChangeMemberRoleDetails): this;

	initWithGroupCreateDetails(groupCreateDetails: DBTEAMLOGGroupCreateDetails): this;

	initWithGroupDeleteDetails(groupDeleteDetails: DBTEAMLOGGroupDeleteDetails): this;

	initWithGroupDescriptionUpdatedDetails(groupDescriptionUpdatedDetails: DBTEAMLOGGroupDescriptionUpdatedDetails): this;

	initWithGroupJoinPolicyUpdatedDetails(groupJoinPolicyUpdatedDetails: DBTEAMLOGGroupJoinPolicyUpdatedDetails): this;

	initWithGroupMovedDetails(groupMovedDetails: DBTEAMLOGGroupMovedDetails): this;

	initWithGroupRemoveExternalIdDetails(groupRemoveExternalIdDetails: DBTEAMLOGGroupRemoveExternalIdDetails): this;

	initWithGroupRemoveMemberDetails(groupRemoveMemberDetails: DBTEAMLOGGroupRemoveMemberDetails): this;

	initWithGroupRenameDetails(groupRenameDetails: DBTEAMLOGGroupRenameDetails): this;

	initWithGroupUserManagementChangePolicyDetails(groupUserManagementChangePolicyDetails: DBTEAMLOGGroupUserManagementChangePolicyDetails): this;

	initWithLoginFailDetails(loginFailDetails: DBTEAMLOGLoginFailDetails): this;

	initWithLoginSuccessDetails(loginSuccessDetails: DBTEAMLOGLoginSuccessDetails): this;

	initWithLogoutDetails(logoutDetails: DBTEAMLOGLogoutDetails): this;

	initWithMemberAddNameDetails(memberAddNameDetails: DBTEAMLOGMemberAddNameDetails): this;

	initWithMemberChangeAdminRoleDetails(memberChangeAdminRoleDetails: DBTEAMLOGMemberChangeAdminRoleDetails): this;

	initWithMemberChangeEmailDetails(memberChangeEmailDetails: DBTEAMLOGMemberChangeEmailDetails): this;

	initWithMemberChangeMembershipTypeDetails(memberChangeMembershipTypeDetails: DBTEAMLOGMemberChangeMembershipTypeDetails): this;

	initWithMemberChangeNameDetails(memberChangeNameDetails: DBTEAMLOGMemberChangeNameDetails): this;

	initWithMemberChangeStatusDetails(memberChangeStatusDetails: DBTEAMLOGMemberChangeStatusDetails): this;

	initWithMemberDeleteManualContactsDetails(memberDeleteManualContactsDetails: DBTEAMLOGMemberDeleteManualContactsDetails): this;

	initWithMemberPermanentlyDeleteAccountContentsDetails(memberPermanentlyDeleteAccountContentsDetails: DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails): this;

	initWithMemberRequestsChangePolicyDetails(memberRequestsChangePolicyDetails: DBTEAMLOGMemberRequestsChangePolicyDetails): this;

	initWithMemberSpaceLimitsAddCustomQuotaDetails(memberSpaceLimitsAddCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails): this;

	initWithMemberSpaceLimitsAddExceptionDetails(memberSpaceLimitsAddExceptionDetails: DBTEAMLOGMemberSpaceLimitsAddExceptionDetails): this;

	initWithMemberSpaceLimitsChangeCapsTypePolicyDetails(memberSpaceLimitsChangeCapsTypePolicyDetails: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails): this;

	initWithMemberSpaceLimitsChangeCustomQuotaDetails(memberSpaceLimitsChangeCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails): this;

	initWithMemberSpaceLimitsChangePolicyDetails(memberSpaceLimitsChangePolicyDetails: DBTEAMLOGMemberSpaceLimitsChangePolicyDetails): this;

	initWithMemberSpaceLimitsChangeStatusDetails(memberSpaceLimitsChangeStatusDetails: DBTEAMLOGMemberSpaceLimitsChangeStatusDetails): this;

	initWithMemberSpaceLimitsRemoveCustomQuotaDetails(memberSpaceLimitsRemoveCustomQuotaDetails: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails): this;

	initWithMemberSpaceLimitsRemoveExceptionDetails(memberSpaceLimitsRemoveExceptionDetails: DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails): this;

	initWithMemberSuggestDetails(memberSuggestDetails: DBTEAMLOGMemberSuggestDetails): this;

	initWithMemberSuggestionsChangePolicyDetails(memberSuggestionsChangePolicyDetails: DBTEAMLOGMemberSuggestionsChangePolicyDetails): this;

	initWithMemberTransferAccountContentsDetails(memberTransferAccountContentsDetails: DBTEAMLOGMemberTransferAccountContentsDetails): this;

	initWithMicrosoftOfficeAddinChangePolicyDetails(microsoftOfficeAddinChangePolicyDetails: DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails): this;

	initWithMissingDetails(missingDetails: DBTEAMLOGMissingDetails): this;

	initWithNetworkControlChangePolicyDetails(networkControlChangePolicyDetails: DBTEAMLOGNetworkControlChangePolicyDetails): this;

	initWithNoteAclInviteOnlyDetails(noteAclInviteOnlyDetails: DBTEAMLOGNoteAclInviteOnlyDetails): this;

	initWithNoteAclLinkDetails(noteAclLinkDetails: DBTEAMLOGNoteAclLinkDetails): this;

	initWithNoteAclTeamLinkDetails(noteAclTeamLinkDetails: DBTEAMLOGNoteAclTeamLinkDetails): this;

	initWithNoteShareReceiveDetails(noteShareReceiveDetails: DBTEAMLOGNoteShareReceiveDetails): this;

	initWithNoteSharedDetails(noteSharedDetails: DBTEAMLOGNoteSharedDetails): this;

	initWithOpenNoteSharedDetails(openNoteSharedDetails: DBTEAMLOGOpenNoteSharedDetails): this;

	initWithOther(): this;

	initWithPaperAdminExportStartDetails(paperAdminExportStartDetails: DBTEAMLOGPaperAdminExportStartDetails): this;

	initWithPaperChangeDeploymentPolicyDetails(paperChangeDeploymentPolicyDetails: DBTEAMLOGPaperChangeDeploymentPolicyDetails): this;

	initWithPaperChangeMemberLinkPolicyDetails(paperChangeMemberLinkPolicyDetails: DBTEAMLOGPaperChangeMemberLinkPolicyDetails): this;

	initWithPaperChangeMemberPolicyDetails(paperChangeMemberPolicyDetails: DBTEAMLOGPaperChangeMemberPolicyDetails): this;

	initWithPaperChangePolicyDetails(paperChangePolicyDetails: DBTEAMLOGPaperChangePolicyDetails): this;

	initWithPaperContentAddMemberDetails(paperContentAddMemberDetails: DBTEAMLOGPaperContentAddMemberDetails): this;

	initWithPaperContentAddToFolderDetails(paperContentAddToFolderDetails: DBTEAMLOGPaperContentAddToFolderDetails): this;

	initWithPaperContentArchiveDetails(paperContentArchiveDetails: DBTEAMLOGPaperContentArchiveDetails): this;

	initWithPaperContentCreateDetails(paperContentCreateDetails: DBTEAMLOGPaperContentCreateDetails): this;

	initWithPaperContentPermanentlyDeleteDetails(paperContentPermanentlyDeleteDetails: DBTEAMLOGPaperContentPermanentlyDeleteDetails): this;

	initWithPaperContentRemoveFromFolderDetails(paperContentRemoveFromFolderDetails: DBTEAMLOGPaperContentRemoveFromFolderDetails): this;

	initWithPaperContentRemoveMemberDetails(paperContentRemoveMemberDetails: DBTEAMLOGPaperContentRemoveMemberDetails): this;

	initWithPaperContentRenameDetails(paperContentRenameDetails: DBTEAMLOGPaperContentRenameDetails): this;

	initWithPaperContentRestoreDetails(paperContentRestoreDetails: DBTEAMLOGPaperContentRestoreDetails): this;

	initWithPaperDocAddCommentDetails(paperDocAddCommentDetails: DBTEAMLOGPaperDocAddCommentDetails): this;

	initWithPaperDocChangeMemberRoleDetails(paperDocChangeMemberRoleDetails: DBTEAMLOGPaperDocChangeMemberRoleDetails): this;

	initWithPaperDocChangeSharingPolicyDetails(paperDocChangeSharingPolicyDetails: DBTEAMLOGPaperDocChangeSharingPolicyDetails): this;

	initWithPaperDocChangeSubscriptionDetails(paperDocChangeSubscriptionDetails: DBTEAMLOGPaperDocChangeSubscriptionDetails): this;

	initWithPaperDocDeleteCommentDetails(paperDocDeleteCommentDetails: DBTEAMLOGPaperDocDeleteCommentDetails): this;

	initWithPaperDocDeletedDetails(paperDocDeletedDetails: DBTEAMLOGPaperDocDeletedDetails): this;

	initWithPaperDocDownloadDetails(paperDocDownloadDetails: DBTEAMLOGPaperDocDownloadDetails): this;

	initWithPaperDocEditCommentDetails(paperDocEditCommentDetails: DBTEAMLOGPaperDocEditCommentDetails): this;

	initWithPaperDocEditDetails(paperDocEditDetails: DBTEAMLOGPaperDocEditDetails): this;

	initWithPaperDocFollowedDetails(paperDocFollowedDetails: DBTEAMLOGPaperDocFollowedDetails): this;

	initWithPaperDocMentionDetails(paperDocMentionDetails: DBTEAMLOGPaperDocMentionDetails): this;

	initWithPaperDocOwnershipChangedDetails(paperDocOwnershipChangedDetails: DBTEAMLOGPaperDocOwnershipChangedDetails): this;

	initWithPaperDocRequestAccessDetails(paperDocRequestAccessDetails: DBTEAMLOGPaperDocRequestAccessDetails): this;

	initWithPaperDocResolveCommentDetails(paperDocResolveCommentDetails: DBTEAMLOGPaperDocResolveCommentDetails): this;

	initWithPaperDocRevertDetails(paperDocRevertDetails: DBTEAMLOGPaperDocRevertDetails): this;

	initWithPaperDocSlackShareDetails(paperDocSlackShareDetails: DBTEAMLOGPaperDocSlackShareDetails): this;

	initWithPaperDocTeamInviteDetails(paperDocTeamInviteDetails: DBTEAMLOGPaperDocTeamInviteDetails): this;

	initWithPaperDocTrashedDetails(paperDocTrashedDetails: DBTEAMLOGPaperDocTrashedDetails): this;

	initWithPaperDocUnresolveCommentDetails(paperDocUnresolveCommentDetails: DBTEAMLOGPaperDocUnresolveCommentDetails): this;

	initWithPaperDocUntrashedDetails(paperDocUntrashedDetails: DBTEAMLOGPaperDocUntrashedDetails): this;

	initWithPaperDocViewDetails(paperDocViewDetails: DBTEAMLOGPaperDocViewDetails): this;

	initWithPaperEnabledUsersGroupAdditionDetails(paperEnabledUsersGroupAdditionDetails: DBTEAMLOGPaperEnabledUsersGroupAdditionDetails): this;

	initWithPaperEnabledUsersGroupRemovalDetails(paperEnabledUsersGroupRemovalDetails: DBTEAMLOGPaperEnabledUsersGroupRemovalDetails): this;

	initWithPaperExternalViewAllowDetails(paperExternalViewAllowDetails: DBTEAMLOGPaperExternalViewAllowDetails): this;

	initWithPaperExternalViewDefaultTeamDetails(paperExternalViewDefaultTeamDetails: DBTEAMLOGPaperExternalViewDefaultTeamDetails): this;

	initWithPaperExternalViewForbidDetails(paperExternalViewForbidDetails: DBTEAMLOGPaperExternalViewForbidDetails): this;

	initWithPaperFolderChangeSubscriptionDetails(paperFolderChangeSubscriptionDetails: DBTEAMLOGPaperFolderChangeSubscriptionDetails): this;

	initWithPaperFolderDeletedDetails(paperFolderDeletedDetails: DBTEAMLOGPaperFolderDeletedDetails): this;

	initWithPaperFolderFollowedDetails(paperFolderFollowedDetails: DBTEAMLOGPaperFolderFollowedDetails): this;

	initWithPaperFolderTeamInviteDetails(paperFolderTeamInviteDetails: DBTEAMLOGPaperFolderTeamInviteDetails): this;

	initWithPasswordChangeDetails(passwordChangeDetails: DBTEAMLOGPasswordChangeDetails): this;

	initWithPasswordResetAllDetails(passwordResetAllDetails: DBTEAMLOGPasswordResetAllDetails): this;

	initWithPasswordResetDetails(passwordResetDetails: DBTEAMLOGPasswordResetDetails): this;

	initWithPermanentDeleteChangePolicyDetails(permanentDeleteChangePolicyDetails: DBTEAMLOGPermanentDeleteChangePolicyDetails): this;

	initWithResellerSupportSessionEndDetails(resellerSupportSessionEndDetails: DBTEAMLOGResellerSupportSessionEndDetails): this;

	initWithResellerSupportSessionStartDetails(resellerSupportSessionStartDetails: DBTEAMLOGResellerSupportSessionStartDetails): this;

	initWithSecondaryMailsPolicyChangedDetails(secondaryMailsPolicyChangedDetails: DBTEAMLOGSecondaryMailsPolicyChangedDetails): this;

	initWithSfAddGroupDetails(sfAddGroupDetails: DBTEAMLOGSfAddGroupDetails): this;

	initWithSfAllowNonMembersToViewSharedLinksDetails(sfAllowNonMembersToViewSharedLinksDetails: DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails): this;

	initWithSfExternalInviteWarnDetails(sfExternalInviteWarnDetails: DBTEAMLOGSfExternalInviteWarnDetails): this;

	initWithSfFbInviteChangeRoleDetails(sfFbInviteChangeRoleDetails: DBTEAMLOGSfFbInviteChangeRoleDetails): this;

	initWithSfFbInviteDetails(sfFbInviteDetails: DBTEAMLOGSfFbInviteDetails): this;

	initWithSfFbUninviteDetails(sfFbUninviteDetails: DBTEAMLOGSfFbUninviteDetails): this;

	initWithSfInviteGroupDetails(sfInviteGroupDetails: DBTEAMLOGSfInviteGroupDetails): this;

	initWithSfTeamGrantAccessDetails(sfTeamGrantAccessDetails: DBTEAMLOGSfTeamGrantAccessDetails): this;

	initWithSfTeamInviteChangeRoleDetails(sfTeamInviteChangeRoleDetails: DBTEAMLOGSfTeamInviteChangeRoleDetails): this;

	initWithSfTeamInviteDetails(sfTeamInviteDetails: DBTEAMLOGSfTeamInviteDetails): this;

	initWithSfTeamJoinDetails(sfTeamJoinDetails: DBTEAMLOGSfTeamJoinDetails): this;

	initWithSfTeamJoinFromOobLinkDetails(sfTeamJoinFromOobLinkDetails: DBTEAMLOGSfTeamJoinFromOobLinkDetails): this;

	initWithSfTeamUninviteDetails(sfTeamUninviteDetails: DBTEAMLOGSfTeamUninviteDetails): this;

	initWithSharedContentAddInviteesDetails(sharedContentAddInviteesDetails: DBTEAMLOGSharedContentAddInviteesDetails): this;

	initWithSharedContentAddLinkExpiryDetails(sharedContentAddLinkExpiryDetails: DBTEAMLOGSharedContentAddLinkExpiryDetails): this;

	initWithSharedContentAddLinkPasswordDetails(sharedContentAddLinkPasswordDetails: DBTEAMLOGSharedContentAddLinkPasswordDetails): this;

	initWithSharedContentAddMemberDetails(sharedContentAddMemberDetails: DBTEAMLOGSharedContentAddMemberDetails): this;

	initWithSharedContentChangeDownloadsPolicyDetails(sharedContentChangeDownloadsPolicyDetails: DBTEAMLOGSharedContentChangeDownloadsPolicyDetails): this;

	initWithSharedContentChangeInviteeRoleDetails(sharedContentChangeInviteeRoleDetails: DBTEAMLOGSharedContentChangeInviteeRoleDetails): this;

	initWithSharedContentChangeLinkAudienceDetails(sharedContentChangeLinkAudienceDetails: DBTEAMLOGSharedContentChangeLinkAudienceDetails): this;

	initWithSharedContentChangeLinkExpiryDetails(sharedContentChangeLinkExpiryDetails: DBTEAMLOGSharedContentChangeLinkExpiryDetails): this;

	initWithSharedContentChangeLinkPasswordDetails(sharedContentChangeLinkPasswordDetails: DBTEAMLOGSharedContentChangeLinkPasswordDetails): this;

	initWithSharedContentChangeMemberRoleDetails(sharedContentChangeMemberRoleDetails: DBTEAMLOGSharedContentChangeMemberRoleDetails): this;

	initWithSharedContentChangeViewerInfoPolicyDetails(sharedContentChangeViewerInfoPolicyDetails: DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails): this;

	initWithSharedContentClaimInvitationDetails(sharedContentClaimInvitationDetails: DBTEAMLOGSharedContentClaimInvitationDetails): this;

	initWithSharedContentCopyDetails(sharedContentCopyDetails: DBTEAMLOGSharedContentCopyDetails): this;

	initWithSharedContentDownloadDetails(sharedContentDownloadDetails: DBTEAMLOGSharedContentDownloadDetails): this;

	initWithSharedContentRelinquishMembershipDetails(sharedContentRelinquishMembershipDetails: DBTEAMLOGSharedContentRelinquishMembershipDetails): this;

	initWithSharedContentRemoveInviteesDetails(sharedContentRemoveInviteesDetails: DBTEAMLOGSharedContentRemoveInviteesDetails): this;

	initWithSharedContentRemoveLinkExpiryDetails(sharedContentRemoveLinkExpiryDetails: DBTEAMLOGSharedContentRemoveLinkExpiryDetails): this;

	initWithSharedContentRemoveLinkPasswordDetails(sharedContentRemoveLinkPasswordDetails: DBTEAMLOGSharedContentRemoveLinkPasswordDetails): this;

	initWithSharedContentRemoveMemberDetails(sharedContentRemoveMemberDetails: DBTEAMLOGSharedContentRemoveMemberDetails): this;

	initWithSharedContentRequestAccessDetails(sharedContentRequestAccessDetails: DBTEAMLOGSharedContentRequestAccessDetails): this;

	initWithSharedContentUnshareDetails(sharedContentUnshareDetails: DBTEAMLOGSharedContentUnshareDetails): this;

	initWithSharedContentViewDetails(sharedContentViewDetails: DBTEAMLOGSharedContentViewDetails): this;

	initWithSharedFolderChangeLinkPolicyDetails(sharedFolderChangeLinkPolicyDetails: DBTEAMLOGSharedFolderChangeLinkPolicyDetails): this;

	initWithSharedFolderChangeMembersInheritancePolicyDetails(sharedFolderChangeMembersInheritancePolicyDetails: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails): this;

	initWithSharedFolderChangeMembersManagementPolicyDetails(sharedFolderChangeMembersManagementPolicyDetails: DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails): this;

	initWithSharedFolderChangeMembersPolicyDetails(sharedFolderChangeMembersPolicyDetails: DBTEAMLOGSharedFolderChangeMembersPolicyDetails): this;

	initWithSharedFolderCreateDetails(sharedFolderCreateDetails: DBTEAMLOGSharedFolderCreateDetails): this;

	initWithSharedFolderDeclineInvitationDetails(sharedFolderDeclineInvitationDetails: DBTEAMLOGSharedFolderDeclineInvitationDetails): this;

	initWithSharedFolderMountDetails(sharedFolderMountDetails: DBTEAMLOGSharedFolderMountDetails): this;

	initWithSharedFolderNestDetails(sharedFolderNestDetails: DBTEAMLOGSharedFolderNestDetails): this;

	initWithSharedFolderTransferOwnershipDetails(sharedFolderTransferOwnershipDetails: DBTEAMLOGSharedFolderTransferOwnershipDetails): this;

	initWithSharedFolderUnmountDetails(sharedFolderUnmountDetails: DBTEAMLOGSharedFolderUnmountDetails): this;

	initWithSharedLinkAddExpiryDetails(sharedLinkAddExpiryDetails: DBTEAMLOGSharedLinkAddExpiryDetails): this;

	initWithSharedLinkChangeExpiryDetails(sharedLinkChangeExpiryDetails: DBTEAMLOGSharedLinkChangeExpiryDetails): this;

	initWithSharedLinkChangeVisibilityDetails(sharedLinkChangeVisibilityDetails: DBTEAMLOGSharedLinkChangeVisibilityDetails): this;

	initWithSharedLinkCopyDetails(sharedLinkCopyDetails: DBTEAMLOGSharedLinkCopyDetails): this;

	initWithSharedLinkCreateDetails(sharedLinkCreateDetails: DBTEAMLOGSharedLinkCreateDetails): this;

	initWithSharedLinkDisableDetails(sharedLinkDisableDetails: DBTEAMLOGSharedLinkDisableDetails): this;

	initWithSharedLinkDownloadDetails(sharedLinkDownloadDetails: DBTEAMLOGSharedLinkDownloadDetails): this;

	initWithSharedLinkRemoveExpiryDetails(sharedLinkRemoveExpiryDetails: DBTEAMLOGSharedLinkRemoveExpiryDetails): this;

	initWithSharedLinkShareDetails(sharedLinkShareDetails: DBTEAMLOGSharedLinkShareDetails): this;

	initWithSharedLinkViewDetails(sharedLinkViewDetails: DBTEAMLOGSharedLinkViewDetails): this;

	initWithSharedNoteOpenedDetails(sharedNoteOpenedDetails: DBTEAMLOGSharedNoteOpenedDetails): this;

	initWithSharingChangeFolderJoinPolicyDetails(sharingChangeFolderJoinPolicyDetails: DBTEAMLOGSharingChangeFolderJoinPolicyDetails): this;

	initWithSharingChangeLinkPolicyDetails(sharingChangeLinkPolicyDetails: DBTEAMLOGSharingChangeLinkPolicyDetails): this;

	initWithSharingChangeMemberPolicyDetails(sharingChangeMemberPolicyDetails: DBTEAMLOGSharingChangeMemberPolicyDetails): this;

	initWithShmodelGroupShareDetails(shmodelGroupShareDetails: DBTEAMLOGShmodelGroupShareDetails): this;

	initWithShowcaseAccessGrantedDetails(showcaseAccessGrantedDetails: DBTEAMLOGShowcaseAccessGrantedDetails): this;

	initWithShowcaseAddMemberDetails(showcaseAddMemberDetails: DBTEAMLOGShowcaseAddMemberDetails): this;

	initWithShowcaseArchivedDetails(showcaseArchivedDetails: DBTEAMLOGShowcaseArchivedDetails): this;

	initWithShowcaseChangeDownloadPolicyDetails(showcaseChangeDownloadPolicyDetails: DBTEAMLOGShowcaseChangeDownloadPolicyDetails): this;

	initWithShowcaseChangeEnabledPolicyDetails(showcaseChangeEnabledPolicyDetails: DBTEAMLOGShowcaseChangeEnabledPolicyDetails): this;

	initWithShowcaseChangeExternalSharingPolicyDetails(showcaseChangeExternalSharingPolicyDetails: DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails): this;

	initWithShowcaseCreatedDetails(showcaseCreatedDetails: DBTEAMLOGShowcaseCreatedDetails): this;

	initWithShowcaseDeleteCommentDetails(showcaseDeleteCommentDetails: DBTEAMLOGShowcaseDeleteCommentDetails): this;

	initWithShowcaseEditCommentDetails(showcaseEditCommentDetails: DBTEAMLOGShowcaseEditCommentDetails): this;

	initWithShowcaseEditedDetails(showcaseEditedDetails: DBTEAMLOGShowcaseEditedDetails): this;

	initWithShowcaseFileAddedDetails(showcaseFileAddedDetails: DBTEAMLOGShowcaseFileAddedDetails): this;

	initWithShowcaseFileDownloadDetails(showcaseFileDownloadDetails: DBTEAMLOGShowcaseFileDownloadDetails): this;

	initWithShowcaseFileRemovedDetails(showcaseFileRemovedDetails: DBTEAMLOGShowcaseFileRemovedDetails): this;

	initWithShowcaseFileViewDetails(showcaseFileViewDetails: DBTEAMLOGShowcaseFileViewDetails): this;

	initWithShowcasePermanentlyDeletedDetails(showcasePermanentlyDeletedDetails: DBTEAMLOGShowcasePermanentlyDeletedDetails): this;

	initWithShowcasePostCommentDetails(showcasePostCommentDetails: DBTEAMLOGShowcasePostCommentDetails): this;

	initWithShowcaseRemoveMemberDetails(showcaseRemoveMemberDetails: DBTEAMLOGShowcaseRemoveMemberDetails): this;

	initWithShowcaseRenamedDetails(showcaseRenamedDetails: DBTEAMLOGShowcaseRenamedDetails): this;

	initWithShowcaseRequestAccessDetails(showcaseRequestAccessDetails: DBTEAMLOGShowcaseRequestAccessDetails): this;

	initWithShowcaseResolveCommentDetails(showcaseResolveCommentDetails: DBTEAMLOGShowcaseResolveCommentDetails): this;

	initWithShowcaseRestoredDetails(showcaseRestoredDetails: DBTEAMLOGShowcaseRestoredDetails): this;

	initWithShowcaseTrashedDeprecatedDetails(showcaseTrashedDeprecatedDetails: DBTEAMLOGShowcaseTrashedDeprecatedDetails): this;

	initWithShowcaseTrashedDetails(showcaseTrashedDetails: DBTEAMLOGShowcaseTrashedDetails): this;

	initWithShowcaseUnresolveCommentDetails(showcaseUnresolveCommentDetails: DBTEAMLOGShowcaseUnresolveCommentDetails): this;

	initWithShowcaseUntrashedDeprecatedDetails(showcaseUntrashedDeprecatedDetails: DBTEAMLOGShowcaseUntrashedDeprecatedDetails): this;

	initWithShowcaseUntrashedDetails(showcaseUntrashedDetails: DBTEAMLOGShowcaseUntrashedDetails): this;

	initWithShowcaseViewDetails(showcaseViewDetails: DBTEAMLOGShowcaseViewDetails): this;

	initWithSignInAsSessionEndDetails(signInAsSessionEndDetails: DBTEAMLOGSignInAsSessionEndDetails): this;

	initWithSignInAsSessionStartDetails(signInAsSessionStartDetails: DBTEAMLOGSignInAsSessionStartDetails): this;

	initWithSmartSyncChangePolicyDetails(smartSyncChangePolicyDetails: DBTEAMLOGSmartSyncChangePolicyDetails): this;

	initWithSmartSyncCreateAdminPrivilegeReportDetails(smartSyncCreateAdminPrivilegeReportDetails: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails): this;

	initWithSmartSyncNotOptOutDetails(smartSyncNotOptOutDetails: DBTEAMLOGSmartSyncNotOptOutDetails): this;

	initWithSmartSyncOptOutDetails(smartSyncOptOutDetails: DBTEAMLOGSmartSyncOptOutDetails): this;

	initWithSsoAddCertDetails(ssoAddCertDetails: DBTEAMLOGSsoAddCertDetails): this;

	initWithSsoAddLoginUrlDetails(ssoAddLoginUrlDetails: DBTEAMLOGSsoAddLoginUrlDetails): this;

	initWithSsoAddLogoutUrlDetails(ssoAddLogoutUrlDetails: DBTEAMLOGSsoAddLogoutUrlDetails): this;

	initWithSsoChangeCertDetails(ssoChangeCertDetails: DBTEAMLOGSsoChangeCertDetails): this;

	initWithSsoChangeLoginUrlDetails(ssoChangeLoginUrlDetails: DBTEAMLOGSsoChangeLoginUrlDetails): this;

	initWithSsoChangeLogoutUrlDetails(ssoChangeLogoutUrlDetails: DBTEAMLOGSsoChangeLogoutUrlDetails): this;

	initWithSsoChangePolicyDetails(ssoChangePolicyDetails: DBTEAMLOGSsoChangePolicyDetails): this;

	initWithSsoChangeSamlIdentityModeDetails(ssoChangeSamlIdentityModeDetails: DBTEAMLOGSsoChangeSamlIdentityModeDetails): this;

	initWithSsoErrorDetails(ssoErrorDetails: DBTEAMLOGSsoErrorDetails): this;

	initWithSsoRemoveCertDetails(ssoRemoveCertDetails: DBTEAMLOGSsoRemoveCertDetails): this;

	initWithSsoRemoveLoginUrlDetails(ssoRemoveLoginUrlDetails: DBTEAMLOGSsoRemoveLoginUrlDetails): this;

	initWithSsoRemoveLogoutUrlDetails(ssoRemoveLogoutUrlDetails: DBTEAMLOGSsoRemoveLogoutUrlDetails): this;

	initWithTeamActivityCreateReportDetails(teamActivityCreateReportDetails: DBTEAMLOGTeamActivityCreateReportDetails): this;

	initWithTeamFolderChangeStatusDetails(teamFolderChangeStatusDetails: DBTEAMLOGTeamFolderChangeStatusDetails): this;

	initWithTeamFolderCreateDetails(teamFolderCreateDetails: DBTEAMLOGTeamFolderCreateDetails): this;

	initWithTeamFolderDowngradeDetails(teamFolderDowngradeDetails: DBTEAMLOGTeamFolderDowngradeDetails): this;

	initWithTeamFolderPermanentlyDeleteDetails(teamFolderPermanentlyDeleteDetails: DBTEAMLOGTeamFolderPermanentlyDeleteDetails): this;

	initWithTeamFolderRenameDetails(teamFolderRenameDetails: DBTEAMLOGTeamFolderRenameDetails): this;

	initWithTeamMergeFromDetails(teamMergeFromDetails: DBTEAMLOGTeamMergeFromDetails): this;

	initWithTeamMergeToDetails(teamMergeToDetails: DBTEAMLOGTeamMergeToDetails): this;

	initWithTeamProfileAddLogoDetails(teamProfileAddLogoDetails: DBTEAMLOGTeamProfileAddLogoDetails): this;

	initWithTeamProfileChangeDefaultLanguageDetails(teamProfileChangeDefaultLanguageDetails: DBTEAMLOGTeamProfileChangeDefaultLanguageDetails): this;

	initWithTeamProfileChangeLogoDetails(teamProfileChangeLogoDetails: DBTEAMLOGTeamProfileChangeLogoDetails): this;

	initWithTeamProfileChangeNameDetails(teamProfileChangeNameDetails: DBTEAMLOGTeamProfileChangeNameDetails): this;

	initWithTeamProfileRemoveLogoDetails(teamProfileRemoveLogoDetails: DBTEAMLOGTeamProfileRemoveLogoDetails): this;

	initWithTeamSelectiveSyncPolicyChangedDetails(teamSelectiveSyncPolicyChangedDetails: DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails): this;

	initWithTeamSelectiveSyncSettingsChangedDetails(teamSelectiveSyncSettingsChangedDetails: DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails): this;

	initWithTfaAddBackupPhoneDetails(tfaAddBackupPhoneDetails: DBTEAMLOGTfaAddBackupPhoneDetails): this;

	initWithTfaAddSecurityKeyDetails(tfaAddSecurityKeyDetails: DBTEAMLOGTfaAddSecurityKeyDetails): this;

	initWithTfaChangeBackupPhoneDetails(tfaChangeBackupPhoneDetails: DBTEAMLOGTfaChangeBackupPhoneDetails): this;

	initWithTfaChangePolicyDetails(tfaChangePolicyDetails: DBTEAMLOGTfaChangePolicyDetails): this;

	initWithTfaChangeStatusDetails(tfaChangeStatusDetails: DBTEAMLOGTfaChangeStatusDetails): this;

	initWithTfaRemoveBackupPhoneDetails(tfaRemoveBackupPhoneDetails: DBTEAMLOGTfaRemoveBackupPhoneDetails): this;

	initWithTfaRemoveSecurityKeyDetails(tfaRemoveSecurityKeyDetails: DBTEAMLOGTfaRemoveSecurityKeyDetails): this;

	initWithTfaResetDetails(tfaResetDetails: DBTEAMLOGTfaResetDetails): this;

	initWithTwoAccountChangePolicyDetails(twoAccountChangePolicyDetails: DBTEAMLOGTwoAccountChangePolicyDetails): this;

	initWithViewerInfoPolicyChangedDetails(viewerInfoPolicyChangedDetails: DBTEAMLOGViewerInfoPolicyChangedDetails): this;

	initWithWebSessionsChangeFixedLengthPolicyDetails(webSessionsChangeFixedLengthPolicyDetails: DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails): this;

	initWithWebSessionsChangeIdleLengthPolicyDetails(webSessionsChangeIdleLengthPolicyDetails: DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails): this;

	isAccountCaptureChangeAvailabilityDetails(): boolean;

	isAccountCaptureChangePolicyDetails(): boolean;

	isAccountCaptureMigrateAccountDetails(): boolean;

	isAccountCaptureNotificationEmailsSentDetails(): boolean;

	isAccountCaptureRelinquishAccountDetails(): boolean;

	isAllowDownloadDisabledDetails(): boolean;

	isAllowDownloadEnabledDetails(): boolean;

	isAppLinkTeamDetails(): boolean;

	isAppLinkUserDetails(): boolean;

	isAppUnlinkTeamDetails(): boolean;

	isAppUnlinkUserDetails(): boolean;

	isCameraUploadsPolicyChangedDetails(): boolean;

	isCollectionShareDetails(): boolean;

	isCreateFolderDetails(): boolean;

	isDataPlacementRestrictionChangePolicyDetails(): boolean;

	isDataPlacementRestrictionSatisfyPolicyDetails(): boolean;

	isDeviceApprovalsChangeDesktopPolicyDetails(): boolean;

	isDeviceApprovalsChangeMobilePolicyDetails(): boolean;

	isDeviceApprovalsChangeOverageActionDetails(): boolean;

	isDeviceApprovalsChangeUnlinkActionDetails(): boolean;

	isDeviceChangeIpDesktopDetails(): boolean;

	isDeviceChangeIpMobileDetails(): boolean;

	isDeviceChangeIpWebDetails(): boolean;

	isDeviceDeleteOnUnlinkFailDetails(): boolean;

	isDeviceDeleteOnUnlinkSuccessDetails(): boolean;

	isDeviceLinkFailDetails(): boolean;

	isDeviceLinkSuccessDetails(): boolean;

	isDeviceManagementDisabledDetails(): boolean;

	isDeviceManagementEnabledDetails(): boolean;

	isDeviceUnlinkDetails(): boolean;

	isDirectoryRestrictionsAddMembersDetails(): boolean;

	isDirectoryRestrictionsRemoveMembersDetails(): boolean;

	isDisabledDomainInvitesDetails(): boolean;

	isDomainInvitesApproveRequestToJoinTeamDetails(): boolean;

	isDomainInvitesDeclineRequestToJoinTeamDetails(): boolean;

	isDomainInvitesEmailExistingUsersDetails(): boolean;

	isDomainInvitesRequestToJoinTeamDetails(): boolean;

	isDomainInvitesSetInviteNewUserPrefToNoDetails(): boolean;

	isDomainInvitesSetInviteNewUserPrefToYesDetails(): boolean;

	isDomainVerificationAddDomainFailDetails(): boolean;

	isDomainVerificationAddDomainSuccessDetails(): boolean;

	isDomainVerificationRemoveDomainDetails(): boolean;

	isEmmAddExceptionDetails(): boolean;

	isEmmChangePolicyDetails(): boolean;

	isEmmCreateExceptionsReportDetails(): boolean;

	isEmmCreateUsageReportDetails(): boolean;

	isEmmErrorDetails(): boolean;

	isEmmRefreshAuthTokenDetails(): boolean;

	isEmmRemoveExceptionDetails(): boolean;

	isEnabledDomainInvitesDetails(): boolean;

	isEqual(object: any): boolean;

	isExportMembersReportDetails(): boolean;

	isExtendedVersionHistoryChangePolicyDetails(): boolean;

	isFileAddCommentDetails(): boolean;

	isFileAddDetails(): boolean;

	isFileChangeCommentSubscriptionDetails(): boolean;

	isFileCommentsChangePolicyDetails(): boolean;

	isFileCopyDetails(): boolean;

	isFileDeleteCommentDetails(): boolean;

	isFileDeleteDetails(): boolean;

	isFileDownloadDetails(): boolean;

	isFileEditCommentDetails(): boolean;

	isFileEditDetails(): boolean;

	isFileGetCopyReferenceDetails(): boolean;

	isFileLikeCommentDetails(): boolean;

	isFileMoveDetails(): boolean;

	isFilePermanentlyDeleteDetails(): boolean;

	isFilePreviewDetails(): boolean;

	isFileRenameDetails(): boolean;

	isFileRequestChangeDetails(): boolean;

	isFileRequestCloseDetails(): boolean;

	isFileRequestCreateDetails(): boolean;

	isFileRequestReceiveFileDetails(): boolean;

	isFileRequestsChangePolicyDetails(): boolean;

	isFileRequestsEmailsEnabledDetails(): boolean;

	isFileRequestsEmailsRestrictedToTeamOnlyDetails(): boolean;

	isFileResolveCommentDetails(): boolean;

	isFileRestoreDetails(): boolean;

	isFileRevertDetails(): boolean;

	isFileRollbackChangesDetails(): boolean;

	isFileSaveCopyReferenceDetails(): boolean;

	isFileUnlikeCommentDetails(): boolean;

	isFileUnresolveCommentDetails(): boolean;

	isGoogleSsoChangePolicyDetails(): boolean;

	isGroupAddExternalIdDetails(): boolean;

	isGroupAddMemberDetails(): boolean;

	isGroupChangeExternalIdDetails(): boolean;

	isGroupChangeManagementTypeDetails(): boolean;

	isGroupChangeMemberRoleDetails(): boolean;

	isGroupCreateDetails(): boolean;

	isGroupDeleteDetails(): boolean;

	isGroupDescriptionUpdatedDetails(): boolean;

	isGroupJoinPolicyUpdatedDetails(): boolean;

	isGroupMovedDetails(): boolean;

	isGroupRemoveExternalIdDetails(): boolean;

	isGroupRemoveMemberDetails(): boolean;

	isGroupRenameDetails(): boolean;

	isGroupUserManagementChangePolicyDetails(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLoginFailDetails(): boolean;

	isLoginSuccessDetails(): boolean;

	isLogoutDetails(): boolean;

	isMemberAddNameDetails(): boolean;

	isMemberChangeAdminRoleDetails(): boolean;

	isMemberChangeEmailDetails(): boolean;

	isMemberChangeMembershipTypeDetails(): boolean;

	isMemberChangeNameDetails(): boolean;

	isMemberChangeStatusDetails(): boolean;

	isMemberDeleteManualContactsDetails(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMemberPermanentlyDeleteAccountContentsDetails(): boolean;

	isMemberRequestsChangePolicyDetails(): boolean;

	isMemberSpaceLimitsAddCustomQuotaDetails(): boolean;

	isMemberSpaceLimitsAddExceptionDetails(): boolean;

	isMemberSpaceLimitsChangeCapsTypePolicyDetails(): boolean;

	isMemberSpaceLimitsChangeCustomQuotaDetails(): boolean;

	isMemberSpaceLimitsChangePolicyDetails(): boolean;

	isMemberSpaceLimitsChangeStatusDetails(): boolean;

	isMemberSpaceLimitsRemoveCustomQuotaDetails(): boolean;

	isMemberSpaceLimitsRemoveExceptionDetails(): boolean;

	isMemberSuggestDetails(): boolean;

	isMemberSuggestionsChangePolicyDetails(): boolean;

	isMemberTransferAccountContentsDetails(): boolean;

	isMicrosoftOfficeAddinChangePolicyDetails(): boolean;

	isMissingDetails(): boolean;

	isNetworkControlChangePolicyDetails(): boolean;

	isNoteAclInviteOnlyDetails(): boolean;

	isNoteAclLinkDetails(): boolean;

	isNoteAclTeamLinkDetails(): boolean;

	isNoteShareReceiveDetails(): boolean;

	isNoteSharedDetails(): boolean;

	isOpenNoteSharedDetails(): boolean;

	isOther(): boolean;

	isPaperAdminExportStartDetails(): boolean;

	isPaperChangeDeploymentPolicyDetails(): boolean;

	isPaperChangeMemberLinkPolicyDetails(): boolean;

	isPaperChangeMemberPolicyDetails(): boolean;

	isPaperChangePolicyDetails(): boolean;

	isPaperContentAddMemberDetails(): boolean;

	isPaperContentAddToFolderDetails(): boolean;

	isPaperContentArchiveDetails(): boolean;

	isPaperContentCreateDetails(): boolean;

	isPaperContentPermanentlyDeleteDetails(): boolean;

	isPaperContentRemoveFromFolderDetails(): boolean;

	isPaperContentRemoveMemberDetails(): boolean;

	isPaperContentRenameDetails(): boolean;

	isPaperContentRestoreDetails(): boolean;

	isPaperDocAddCommentDetails(): boolean;

	isPaperDocChangeMemberRoleDetails(): boolean;

	isPaperDocChangeSharingPolicyDetails(): boolean;

	isPaperDocChangeSubscriptionDetails(): boolean;

	isPaperDocDeleteCommentDetails(): boolean;

	isPaperDocDeletedDetails(): boolean;

	isPaperDocDownloadDetails(): boolean;

	isPaperDocEditCommentDetails(): boolean;

	isPaperDocEditDetails(): boolean;

	isPaperDocFollowedDetails(): boolean;

	isPaperDocMentionDetails(): boolean;

	isPaperDocOwnershipChangedDetails(): boolean;

	isPaperDocRequestAccessDetails(): boolean;

	isPaperDocResolveCommentDetails(): boolean;

	isPaperDocRevertDetails(): boolean;

	isPaperDocSlackShareDetails(): boolean;

	isPaperDocTeamInviteDetails(): boolean;

	isPaperDocTrashedDetails(): boolean;

	isPaperDocUnresolveCommentDetails(): boolean;

	isPaperDocUntrashedDetails(): boolean;

	isPaperDocViewDetails(): boolean;

	isPaperEnabledUsersGroupAdditionDetails(): boolean;

	isPaperEnabledUsersGroupRemovalDetails(): boolean;

	isPaperExternalViewAllowDetails(): boolean;

	isPaperExternalViewDefaultTeamDetails(): boolean;

	isPaperExternalViewForbidDetails(): boolean;

	isPaperFolderChangeSubscriptionDetails(): boolean;

	isPaperFolderDeletedDetails(): boolean;

	isPaperFolderFollowedDetails(): boolean;

	isPaperFolderTeamInviteDetails(): boolean;

	isPasswordChangeDetails(): boolean;

	isPasswordResetAllDetails(): boolean;

	isPasswordResetDetails(): boolean;

	isPermanentDeleteChangePolicyDetails(): boolean;

	isResellerSupportSessionEndDetails(): boolean;

	isResellerSupportSessionStartDetails(): boolean;

	isSecondaryMailsPolicyChangedDetails(): boolean;

	isSfAddGroupDetails(): boolean;

	isSfAllowNonMembersToViewSharedLinksDetails(): boolean;

	isSfExternalInviteWarnDetails(): boolean;

	isSfFbInviteChangeRoleDetails(): boolean;

	isSfFbInviteDetails(): boolean;

	isSfFbUninviteDetails(): boolean;

	isSfInviteGroupDetails(): boolean;

	isSfTeamGrantAccessDetails(): boolean;

	isSfTeamInviteChangeRoleDetails(): boolean;

	isSfTeamInviteDetails(): boolean;

	isSfTeamJoinDetails(): boolean;

	isSfTeamJoinFromOobLinkDetails(): boolean;

	isSfTeamUninviteDetails(): boolean;

	isSharedContentAddInviteesDetails(): boolean;

	isSharedContentAddLinkExpiryDetails(): boolean;

	isSharedContentAddLinkPasswordDetails(): boolean;

	isSharedContentAddMemberDetails(): boolean;

	isSharedContentChangeDownloadsPolicyDetails(): boolean;

	isSharedContentChangeInviteeRoleDetails(): boolean;

	isSharedContentChangeLinkAudienceDetails(): boolean;

	isSharedContentChangeLinkExpiryDetails(): boolean;

	isSharedContentChangeLinkPasswordDetails(): boolean;

	isSharedContentChangeMemberRoleDetails(): boolean;

	isSharedContentChangeViewerInfoPolicyDetails(): boolean;

	isSharedContentClaimInvitationDetails(): boolean;

	isSharedContentCopyDetails(): boolean;

	isSharedContentDownloadDetails(): boolean;

	isSharedContentRelinquishMembershipDetails(): boolean;

	isSharedContentRemoveInviteesDetails(): boolean;

	isSharedContentRemoveLinkExpiryDetails(): boolean;

	isSharedContentRemoveLinkPasswordDetails(): boolean;

	isSharedContentRemoveMemberDetails(): boolean;

	isSharedContentRequestAccessDetails(): boolean;

	isSharedContentUnshareDetails(): boolean;

	isSharedContentViewDetails(): boolean;

	isSharedFolderChangeLinkPolicyDetails(): boolean;

	isSharedFolderChangeMembersInheritancePolicyDetails(): boolean;

	isSharedFolderChangeMembersManagementPolicyDetails(): boolean;

	isSharedFolderChangeMembersPolicyDetails(): boolean;

	isSharedFolderCreateDetails(): boolean;

	isSharedFolderDeclineInvitationDetails(): boolean;

	isSharedFolderMountDetails(): boolean;

	isSharedFolderNestDetails(): boolean;

	isSharedFolderTransferOwnershipDetails(): boolean;

	isSharedFolderUnmountDetails(): boolean;

	isSharedLinkAddExpiryDetails(): boolean;

	isSharedLinkChangeExpiryDetails(): boolean;

	isSharedLinkChangeVisibilityDetails(): boolean;

	isSharedLinkCopyDetails(): boolean;

	isSharedLinkCreateDetails(): boolean;

	isSharedLinkDisableDetails(): boolean;

	isSharedLinkDownloadDetails(): boolean;

	isSharedLinkRemoveExpiryDetails(): boolean;

	isSharedLinkShareDetails(): boolean;

	isSharedLinkViewDetails(): boolean;

	isSharedNoteOpenedDetails(): boolean;

	isSharingChangeFolderJoinPolicyDetails(): boolean;

	isSharingChangeLinkPolicyDetails(): boolean;

	isSharingChangeMemberPolicyDetails(): boolean;

	isShmodelGroupShareDetails(): boolean;

	isShowcaseAccessGrantedDetails(): boolean;

	isShowcaseAddMemberDetails(): boolean;

	isShowcaseArchivedDetails(): boolean;

	isShowcaseChangeDownloadPolicyDetails(): boolean;

	isShowcaseChangeEnabledPolicyDetails(): boolean;

	isShowcaseChangeExternalSharingPolicyDetails(): boolean;

	isShowcaseCreatedDetails(): boolean;

	isShowcaseDeleteCommentDetails(): boolean;

	isShowcaseEditCommentDetails(): boolean;

	isShowcaseEditedDetails(): boolean;

	isShowcaseFileAddedDetails(): boolean;

	isShowcaseFileDownloadDetails(): boolean;

	isShowcaseFileRemovedDetails(): boolean;

	isShowcaseFileViewDetails(): boolean;

	isShowcasePermanentlyDeletedDetails(): boolean;

	isShowcasePostCommentDetails(): boolean;

	isShowcaseRemoveMemberDetails(): boolean;

	isShowcaseRenamedDetails(): boolean;

	isShowcaseRequestAccessDetails(): boolean;

	isShowcaseResolveCommentDetails(): boolean;

	isShowcaseRestoredDetails(): boolean;

	isShowcaseTrashedDeprecatedDetails(): boolean;

	isShowcaseTrashedDetails(): boolean;

	isShowcaseUnresolveCommentDetails(): boolean;

	isShowcaseUntrashedDeprecatedDetails(): boolean;

	isShowcaseUntrashedDetails(): boolean;

	isShowcaseViewDetails(): boolean;

	isSignInAsSessionEndDetails(): boolean;

	isSignInAsSessionStartDetails(): boolean;

	isSmartSyncChangePolicyDetails(): boolean;

	isSmartSyncCreateAdminPrivilegeReportDetails(): boolean;

	isSmartSyncNotOptOutDetails(): boolean;

	isSmartSyncOptOutDetails(): boolean;

	isSsoAddCertDetails(): boolean;

	isSsoAddLoginUrlDetails(): boolean;

	isSsoAddLogoutUrlDetails(): boolean;

	isSsoChangeCertDetails(): boolean;

	isSsoChangeLoginUrlDetails(): boolean;

	isSsoChangeLogoutUrlDetails(): boolean;

	isSsoChangePolicyDetails(): boolean;

	isSsoChangeSamlIdentityModeDetails(): boolean;

	isSsoErrorDetails(): boolean;

	isSsoRemoveCertDetails(): boolean;

	isSsoRemoveLoginUrlDetails(): boolean;

	isSsoRemoveLogoutUrlDetails(): boolean;

	isTeamActivityCreateReportDetails(): boolean;

	isTeamFolderChangeStatusDetails(): boolean;

	isTeamFolderCreateDetails(): boolean;

	isTeamFolderDowngradeDetails(): boolean;

	isTeamFolderPermanentlyDeleteDetails(): boolean;

	isTeamFolderRenameDetails(): boolean;

	isTeamMergeFromDetails(): boolean;

	isTeamMergeToDetails(): boolean;

	isTeamProfileAddLogoDetails(): boolean;

	isTeamProfileChangeDefaultLanguageDetails(): boolean;

	isTeamProfileChangeLogoDetails(): boolean;

	isTeamProfileChangeNameDetails(): boolean;

	isTeamProfileRemoveLogoDetails(): boolean;

	isTeamSelectiveSyncPolicyChangedDetails(): boolean;

	isTeamSelectiveSyncSettingsChangedDetails(): boolean;

	isTfaAddBackupPhoneDetails(): boolean;

	isTfaAddSecurityKeyDetails(): boolean;

	isTfaChangeBackupPhoneDetails(): boolean;

	isTfaChangePolicyDetails(): boolean;

	isTfaChangeStatusDetails(): boolean;

	isTfaRemoveBackupPhoneDetails(): boolean;

	isTfaRemoveSecurityKeyDetails(): boolean;

	isTfaResetDetails(): boolean;

	isTwoAccountChangePolicyDetails(): boolean;

	isViewerInfoPolicyChangedDetails(): boolean;

	isWebSessionsChangeFixedLengthPolicyDetails(): boolean;

	isWebSessionsChangeIdleLengthPolicyDetails(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGEventDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGEventDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEventDetails;

	static new(): DBTEAMLOGEventDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEventDetails): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGEventDetailsTag {

	AppLinkTeamDetails = 0,

	AppLinkUserDetails = 1,

	AppUnlinkTeamDetails = 2,

	AppUnlinkUserDetails = 3,

	FileAddCommentDetails = 4,

	FileChangeCommentSubscriptionDetails = 5,

	FileDeleteCommentDetails = 6,

	FileEditCommentDetails = 7,

	FileLikeCommentDetails = 8,

	FileResolveCommentDetails = 9,

	FileUnlikeCommentDetails = 10,

	FileUnresolveCommentDetails = 11,

	DeviceChangeIpDesktopDetails = 12,

	DeviceChangeIpMobileDetails = 13,

	DeviceChangeIpWebDetails = 14,

	DeviceDeleteOnUnlinkFailDetails = 15,

	DeviceDeleteOnUnlinkSuccessDetails = 16,

	DeviceLinkFailDetails = 17,

	DeviceLinkSuccessDetails = 18,

	DeviceManagementDisabledDetails = 19,

	DeviceManagementEnabledDetails = 20,

	DeviceUnlinkDetails = 21,

	EmmRefreshAuthTokenDetails = 22,

	AccountCaptureChangeAvailabilityDetails = 23,

	AccountCaptureMigrateAccountDetails = 24,

	AccountCaptureNotificationEmailsSentDetails = 25,

	AccountCaptureRelinquishAccountDetails = 26,

	DisabledDomainInvitesDetails = 27,

	DomainInvitesApproveRequestToJoinTeamDetails = 28,

	DomainInvitesDeclineRequestToJoinTeamDetails = 29,

	DomainInvitesEmailExistingUsersDetails = 30,

	DomainInvitesRequestToJoinTeamDetails = 31,

	DomainInvitesSetInviteNewUserPrefToNoDetails = 32,

	DomainInvitesSetInviteNewUserPrefToYesDetails = 33,

	DomainVerificationAddDomainFailDetails = 34,

	DomainVerificationAddDomainSuccessDetails = 35,

	DomainVerificationRemoveDomainDetails = 36,

	EnabledDomainInvitesDetails = 37,

	CreateFolderDetails = 38,

	FileAddDetails = 39,

	FileCopyDetails = 40,

	FileDeleteDetails = 41,

	FileDownloadDetails = 42,

	FileEditDetails = 43,

	FileGetCopyReferenceDetails = 44,

	FileMoveDetails = 45,

	FilePermanentlyDeleteDetails = 46,

	FilePreviewDetails = 47,

	FileRenameDetails = 48,

	FileRestoreDetails = 49,

	FileRevertDetails = 50,

	FileRollbackChangesDetails = 51,

	FileSaveCopyReferenceDetails = 52,

	FileRequestChangeDetails = 53,

	FileRequestCloseDetails = 54,

	FileRequestCreateDetails = 55,

	FileRequestReceiveFileDetails = 56,

	GroupAddExternalIdDetails = 57,

	GroupAddMemberDetails = 58,

	GroupChangeExternalIdDetails = 59,

	GroupChangeManagementTypeDetails = 60,

	GroupChangeMemberRoleDetails = 61,

	GroupCreateDetails = 62,

	GroupDeleteDetails = 63,

	GroupDescriptionUpdatedDetails = 64,

	GroupJoinPolicyUpdatedDetails = 65,

	GroupMovedDetails = 66,

	GroupRemoveExternalIdDetails = 67,

	GroupRemoveMemberDetails = 68,

	GroupRenameDetails = 69,

	EmmErrorDetails = 70,

	LoginFailDetails = 71,

	LoginSuccessDetails = 72,

	LogoutDetails = 73,

	ResellerSupportSessionEndDetails = 74,

	ResellerSupportSessionStartDetails = 75,

	SignInAsSessionEndDetails = 76,

	SignInAsSessionStartDetails = 77,

	SsoErrorDetails = 78,

	MemberAddNameDetails = 79,

	MemberChangeAdminRoleDetails = 80,

	MemberChangeEmailDetails = 81,

	MemberChangeMembershipTypeDetails = 82,

	MemberChangeNameDetails = 83,

	MemberChangeStatusDetails = 84,

	MemberDeleteManualContactsDetails = 85,

	MemberPermanentlyDeleteAccountContentsDetails = 86,

	MemberSpaceLimitsAddCustomQuotaDetails = 87,

	MemberSpaceLimitsChangeCustomQuotaDetails = 88,

	MemberSpaceLimitsChangeStatusDetails = 89,

	MemberSpaceLimitsRemoveCustomQuotaDetails = 90,

	MemberSuggestDetails = 91,

	MemberTransferAccountContentsDetails = 92,

	SecondaryMailsPolicyChangedDetails = 93,

	PaperContentAddMemberDetails = 94,

	PaperContentAddToFolderDetails = 95,

	PaperContentArchiveDetails = 96,

	PaperContentCreateDetails = 97,

	PaperContentPermanentlyDeleteDetails = 98,

	PaperContentRemoveFromFolderDetails = 99,

	PaperContentRemoveMemberDetails = 100,

	PaperContentRenameDetails = 101,

	PaperContentRestoreDetails = 102,

	PaperDocAddCommentDetails = 103,

	PaperDocChangeMemberRoleDetails = 104,

	PaperDocChangeSharingPolicyDetails = 105,

	PaperDocChangeSubscriptionDetails = 106,

	PaperDocDeletedDetails = 107,

	PaperDocDeleteCommentDetails = 108,

	PaperDocDownloadDetails = 109,

	PaperDocEditDetails = 110,

	PaperDocEditCommentDetails = 111,

	PaperDocFollowedDetails = 112,

	PaperDocMentionDetails = 113,

	PaperDocOwnershipChangedDetails = 114,

	PaperDocRequestAccessDetails = 115,

	PaperDocResolveCommentDetails = 116,

	PaperDocRevertDetails = 117,

	PaperDocSlackShareDetails = 118,

	PaperDocTeamInviteDetails = 119,

	PaperDocTrashedDetails = 120,

	PaperDocUnresolveCommentDetails = 121,

	PaperDocUntrashedDetails = 122,

	PaperDocViewDetails = 123,

	PaperExternalViewAllowDetails = 124,

	PaperExternalViewDefaultTeamDetails = 125,

	PaperExternalViewForbidDetails = 126,

	PaperFolderChangeSubscriptionDetails = 127,

	PaperFolderDeletedDetails = 128,

	PaperFolderFollowedDetails = 129,

	PaperFolderTeamInviteDetails = 130,

	PasswordChangeDetails = 131,

	PasswordResetDetails = 132,

	PasswordResetAllDetails = 133,

	EmmCreateExceptionsReportDetails = 134,

	EmmCreateUsageReportDetails = 135,

	ExportMembersReportDetails = 136,

	PaperAdminExportStartDetails = 137,

	SmartSyncCreateAdminPrivilegeReportDetails = 138,

	TeamActivityCreateReportDetails = 139,

	CollectionShareDetails = 140,

	NoteAclInviteOnlyDetails = 141,

	NoteAclLinkDetails = 142,

	NoteAclTeamLinkDetails = 143,

	NoteSharedDetails = 144,

	NoteShareReceiveDetails = 145,

	OpenNoteSharedDetails = 146,

	SfAddGroupDetails = 147,

	SfAllowNonMembersToViewSharedLinksDetails = 148,

	SfExternalInviteWarnDetails = 149,

	SfFbInviteDetails = 150,

	SfFbInviteChangeRoleDetails = 151,

	SfFbUninviteDetails = 152,

	SfInviteGroupDetails = 153,

	SfTeamGrantAccessDetails = 154,

	SfTeamInviteDetails = 155,

	SfTeamInviteChangeRoleDetails = 156,

	SfTeamJoinDetails = 157,

	SfTeamJoinFromOobLinkDetails = 158,

	SfTeamUninviteDetails = 159,

	SharedContentAddInviteesDetails = 160,

	SharedContentAddLinkExpiryDetails = 161,

	SharedContentAddLinkPasswordDetails = 162,

	SharedContentAddMemberDetails = 163,

	SharedContentChangeDownloadsPolicyDetails = 164,

	SharedContentChangeInviteeRoleDetails = 165,

	SharedContentChangeLinkAudienceDetails = 166,

	SharedContentChangeLinkExpiryDetails = 167,

	SharedContentChangeLinkPasswordDetails = 168,

	SharedContentChangeMemberRoleDetails = 169,

	SharedContentChangeViewerInfoPolicyDetails = 170,

	SharedContentClaimInvitationDetails = 171,

	SharedContentCopyDetails = 172,

	SharedContentDownloadDetails = 173,

	SharedContentRelinquishMembershipDetails = 174,

	SharedContentRemoveInviteesDetails = 175,

	SharedContentRemoveLinkExpiryDetails = 176,

	SharedContentRemoveLinkPasswordDetails = 177,

	SharedContentRemoveMemberDetails = 178,

	SharedContentRequestAccessDetails = 179,

	SharedContentUnshareDetails = 180,

	SharedContentViewDetails = 181,

	SharedFolderChangeLinkPolicyDetails = 182,

	SharedFolderChangeMembersInheritancePolicyDetails = 183,

	SharedFolderChangeMembersManagementPolicyDetails = 184,

	SharedFolderChangeMembersPolicyDetails = 185,

	SharedFolderCreateDetails = 186,

	SharedFolderDeclineInvitationDetails = 187,

	SharedFolderMountDetails = 188,

	SharedFolderNestDetails = 189,

	SharedFolderTransferOwnershipDetails = 190,

	SharedFolderUnmountDetails = 191,

	SharedLinkAddExpiryDetails = 192,

	SharedLinkChangeExpiryDetails = 193,

	SharedLinkChangeVisibilityDetails = 194,

	SharedLinkCopyDetails = 195,

	SharedLinkCreateDetails = 196,

	SharedLinkDisableDetails = 197,

	SharedLinkDownloadDetails = 198,

	SharedLinkRemoveExpiryDetails = 199,

	SharedLinkShareDetails = 200,

	SharedLinkViewDetails = 201,

	SharedNoteOpenedDetails = 202,

	ShmodelGroupShareDetails = 203,

	ShowcaseAccessGrantedDetails = 204,

	ShowcaseAddMemberDetails = 205,

	ShowcaseArchivedDetails = 206,

	ShowcaseCreatedDetails = 207,

	ShowcaseDeleteCommentDetails = 208,

	ShowcaseEditedDetails = 209,

	ShowcaseEditCommentDetails = 210,

	ShowcaseFileAddedDetails = 211,

	ShowcaseFileDownloadDetails = 212,

	ShowcaseFileRemovedDetails = 213,

	ShowcaseFileViewDetails = 214,

	ShowcasePermanentlyDeletedDetails = 215,

	ShowcasePostCommentDetails = 216,

	ShowcaseRemoveMemberDetails = 217,

	ShowcaseRenamedDetails = 218,

	ShowcaseRequestAccessDetails = 219,

	ShowcaseResolveCommentDetails = 220,

	ShowcaseRestoredDetails = 221,

	ShowcaseTrashedDetails = 222,

	ShowcaseTrashedDeprecatedDetails = 223,

	ShowcaseUnresolveCommentDetails = 224,

	ShowcaseUntrashedDetails = 225,

	ShowcaseUntrashedDeprecatedDetails = 226,

	ShowcaseViewDetails = 227,

	SsoAddCertDetails = 228,

	SsoAddLoginUrlDetails = 229,

	SsoAddLogoutUrlDetails = 230,

	SsoChangeCertDetails = 231,

	SsoChangeLoginUrlDetails = 232,

	SsoChangeLogoutUrlDetails = 233,

	SsoChangeSamlIdentityModeDetails = 234,

	SsoRemoveCertDetails = 235,

	SsoRemoveLoginUrlDetails = 236,

	SsoRemoveLogoutUrlDetails = 237,

	TeamFolderChangeStatusDetails = 238,

	TeamFolderCreateDetails = 239,

	TeamFolderDowngradeDetails = 240,

	TeamFolderPermanentlyDeleteDetails = 241,

	TeamFolderRenameDetails = 242,

	TeamSelectiveSyncSettingsChangedDetails = 243,

	AccountCaptureChangePolicyDetails = 244,

	AllowDownloadDisabledDetails = 245,

	AllowDownloadEnabledDetails = 246,

	CameraUploadsPolicyChangedDetails = 247,

	DataPlacementRestrictionChangePolicyDetails = 248,

	DataPlacementRestrictionSatisfyPolicyDetails = 249,

	DeviceApprovalsChangeDesktopPolicyDetails = 250,

	DeviceApprovalsChangeMobilePolicyDetails = 251,

	DeviceApprovalsChangeOverageActionDetails = 252,

	DeviceApprovalsChangeUnlinkActionDetails = 253,

	DirectoryRestrictionsAddMembersDetails = 254,

	DirectoryRestrictionsRemoveMembersDetails = 255,

	EmmAddExceptionDetails = 256,

	EmmChangePolicyDetails = 257,

	EmmRemoveExceptionDetails = 258,

	ExtendedVersionHistoryChangePolicyDetails = 259,

	FileCommentsChangePolicyDetails = 260,

	FileRequestsChangePolicyDetails = 261,

	FileRequestsEmailsEnabledDetails = 262,

	FileRequestsEmailsRestrictedToTeamOnlyDetails = 263,

	GoogleSsoChangePolicyDetails = 264,

	GroupUserManagementChangePolicyDetails = 265,

	MemberRequestsChangePolicyDetails = 266,

	MemberSpaceLimitsAddExceptionDetails = 267,

	MemberSpaceLimitsChangeCapsTypePolicyDetails = 268,

	MemberSpaceLimitsChangePolicyDetails = 269,

	MemberSpaceLimitsRemoveExceptionDetails = 270,

	MemberSuggestionsChangePolicyDetails = 271,

	MicrosoftOfficeAddinChangePolicyDetails = 272,

	NetworkControlChangePolicyDetails = 273,

	PaperChangeDeploymentPolicyDetails = 274,

	PaperChangeMemberLinkPolicyDetails = 275,

	PaperChangeMemberPolicyDetails = 276,

	PaperChangePolicyDetails = 277,

	PaperEnabledUsersGroupAdditionDetails = 278,

	PaperEnabledUsersGroupRemovalDetails = 279,

	PermanentDeleteChangePolicyDetails = 280,

	SharingChangeFolderJoinPolicyDetails = 281,

	SharingChangeLinkPolicyDetails = 282,

	SharingChangeMemberPolicyDetails = 283,

	ShowcaseChangeDownloadPolicyDetails = 284,

	ShowcaseChangeEnabledPolicyDetails = 285,

	ShowcaseChangeExternalSharingPolicyDetails = 286,

	SmartSyncChangePolicyDetails = 287,

	SmartSyncNotOptOutDetails = 288,

	SmartSyncOptOutDetails = 289,

	SsoChangePolicyDetails = 290,

	TeamSelectiveSyncPolicyChangedDetails = 291,

	TfaChangePolicyDetails = 292,

	TwoAccountChangePolicyDetails = 293,

	ViewerInfoPolicyChangedDetails = 294,

	WebSessionsChangeFixedLengthPolicyDetails = 295,

	WebSessionsChangeIdleLengthPolicyDetails = 296,

	TeamMergeFromDetails = 297,

	TeamMergeToDetails = 298,

	TeamProfileAddLogoDetails = 299,

	TeamProfileChangeDefaultLanguageDetails = 300,

	TeamProfileChangeLogoDetails = 301,

	TeamProfileChangeNameDetails = 302,

	TeamProfileRemoveLogoDetails = 303,

	TfaAddBackupPhoneDetails = 304,

	TfaAddSecurityKeyDetails = 305,

	TfaChangeBackupPhoneDetails = 306,

	TfaChangeStatusDetails = 307,

	TfaRemoveBackupPhoneDetails = 308,

	TfaRemoveSecurityKeyDetails = 309,

	TfaResetDetails = 310,

	MissingDetails = 311,

	Other = 312
}

declare class DBTEAMLOGEventType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGEventType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGEventType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountCaptureChangeAvailability: DBTEAMLOGAccountCaptureChangeAvailabilityType;

	readonly accountCaptureChangePolicy: DBTEAMLOGAccountCaptureChangePolicyType;

	readonly accountCaptureMigrateAccount: DBTEAMLOGAccountCaptureMigrateAccountType;

	readonly accountCaptureNotificationEmailsSent: DBTEAMLOGAccountCaptureNotificationEmailsSentType;

	readonly accountCaptureRelinquishAccount: DBTEAMLOGAccountCaptureRelinquishAccountType;

	readonly allowDownloadDisabled: DBTEAMLOGAllowDownloadDisabledType;

	readonly allowDownloadEnabled: DBTEAMLOGAllowDownloadEnabledType;

	readonly appLinkTeam: DBTEAMLOGAppLinkTeamType;

	readonly appLinkUser: DBTEAMLOGAppLinkUserType;

	readonly appUnlinkTeam: DBTEAMLOGAppUnlinkTeamType;

	readonly appUnlinkUser: DBTEAMLOGAppUnlinkUserType;

	readonly cameraUploadsPolicyChanged: DBTEAMLOGCameraUploadsPolicyChangedType;

	readonly collectionShare: DBTEAMLOGCollectionShareType;

	readonly createFolder: DBTEAMLOGCreateFolderType;

	readonly dataPlacementRestrictionChangePolicy: DBTEAMLOGDataPlacementRestrictionChangePolicyType;

	readonly dataPlacementRestrictionSatisfyPolicy: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType;

	readonly deviceApprovalsChangeDesktopPolicy: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType;

	readonly deviceApprovalsChangeMobilePolicy: DBTEAMLOGDeviceApprovalsChangeMobilePolicyType;

	readonly deviceApprovalsChangeOverageAction: DBTEAMLOGDeviceApprovalsChangeOverageActionType;

	readonly deviceApprovalsChangeUnlinkAction: DBTEAMLOGDeviceApprovalsChangeUnlinkActionType;

	readonly deviceChangeIpDesktop: DBTEAMLOGDeviceChangeIpDesktopType;

	readonly deviceChangeIpMobile: DBTEAMLOGDeviceChangeIpMobileType;

	readonly deviceChangeIpWeb: DBTEAMLOGDeviceChangeIpWebType;

	readonly deviceDeleteOnUnlinkFail: DBTEAMLOGDeviceDeleteOnUnlinkFailType;

	readonly deviceDeleteOnUnlinkSuccess: DBTEAMLOGDeviceDeleteOnUnlinkSuccessType;

	readonly deviceLinkFail: DBTEAMLOGDeviceLinkFailType;

	readonly deviceLinkSuccess: DBTEAMLOGDeviceLinkSuccessType;

	readonly deviceManagementDisabled: DBTEAMLOGDeviceManagementDisabledType;

	readonly deviceManagementEnabled: DBTEAMLOGDeviceManagementEnabledType;

	readonly deviceUnlink: DBTEAMLOGDeviceUnlinkType;

	readonly directoryRestrictionsAddMembers: DBTEAMLOGDirectoryRestrictionsAddMembersType;

	readonly directoryRestrictionsRemoveMembers: DBTEAMLOGDirectoryRestrictionsRemoveMembersType;

	readonly disabledDomainInvites: DBTEAMLOGDisabledDomainInvitesType;

	readonly domainInvitesApproveRequestToJoinTeam: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType;

	readonly domainInvitesDeclineRequestToJoinTeam: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType;

	readonly domainInvitesEmailExistingUsers: DBTEAMLOGDomainInvitesEmailExistingUsersType;

	readonly domainInvitesRequestToJoinTeam: DBTEAMLOGDomainInvitesRequestToJoinTeamType;

	readonly domainInvitesSetInviteNewUserPrefToNo: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType;

	readonly domainInvitesSetInviteNewUserPrefToYes: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType;

	readonly domainVerificationAddDomainFail: DBTEAMLOGDomainVerificationAddDomainFailType;

	readonly domainVerificationAddDomainSuccess: DBTEAMLOGDomainVerificationAddDomainSuccessType;

	readonly domainVerificationRemoveDomain: DBTEAMLOGDomainVerificationRemoveDomainType;

	readonly emmAddException: DBTEAMLOGEmmAddExceptionType;

	readonly emmChangePolicy: DBTEAMLOGEmmChangePolicyType;

	readonly emmCreateExceptionsReport: DBTEAMLOGEmmCreateExceptionsReportType;

	readonly emmCreateUsageReport: DBTEAMLOGEmmCreateUsageReportType;

	readonly emmError: DBTEAMLOGEmmErrorType;

	readonly emmRefreshAuthToken: DBTEAMLOGEmmRefreshAuthTokenType;

	readonly emmRemoveException: DBTEAMLOGEmmRemoveExceptionType;

	readonly enabledDomainInvites: DBTEAMLOGEnabledDomainInvitesType;

	readonly exportMembersReport: DBTEAMLOGExportMembersReportType;

	readonly extendedVersionHistoryChangePolicy: DBTEAMLOGExtendedVersionHistoryChangePolicyType;

	readonly fileAdd: DBTEAMLOGFileAddType;

	readonly fileAddComment: DBTEAMLOGFileAddCommentType;

	readonly fileChangeCommentSubscription: DBTEAMLOGFileChangeCommentSubscriptionType;

	readonly fileCommentsChangePolicy: DBTEAMLOGFileCommentsChangePolicyType;

	readonly fileCopy: DBTEAMLOGFileCopyType;

	readonly fileDelete: DBTEAMLOGFileDeleteType;

	readonly fileDeleteComment: DBTEAMLOGFileDeleteCommentType;

	readonly fileDownload: DBTEAMLOGFileDownloadType;

	readonly fileEdit: DBTEAMLOGFileEditType;

	readonly fileEditComment: DBTEAMLOGFileEditCommentType;

	readonly fileGetCopyReference: DBTEAMLOGFileGetCopyReferenceType;

	readonly fileLikeComment: DBTEAMLOGFileLikeCommentType;

	readonly fileMove: DBTEAMLOGFileMoveType;

	readonly filePermanentlyDelete: DBTEAMLOGFilePermanentlyDeleteType;

	readonly filePreview: DBTEAMLOGFilePreviewType;

	readonly fileRename: DBTEAMLOGFileRenameType;

	readonly fileRequestChange: DBTEAMLOGFileRequestChangeType;

	readonly fileRequestClose: DBTEAMLOGFileRequestCloseType;

	readonly fileRequestCreate: DBTEAMLOGFileRequestCreateType;

	readonly fileRequestReceiveFile: DBTEAMLOGFileRequestReceiveFileType;

	readonly fileRequestsChangePolicy: DBTEAMLOGFileRequestsChangePolicyType;

	readonly fileRequestsEmailsEnabled: DBTEAMLOGFileRequestsEmailsEnabledType;

	readonly fileRequestsEmailsRestrictedToTeamOnly: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType;

	readonly fileResolveComment: DBTEAMLOGFileResolveCommentType;

	readonly fileRestore: DBTEAMLOGFileRestoreType;

	readonly fileRevert: DBTEAMLOGFileRevertType;

	readonly fileRollbackChanges: DBTEAMLOGFileRollbackChangesType;

	readonly fileSaveCopyReference: DBTEAMLOGFileSaveCopyReferenceType;

	readonly fileUnlikeComment: DBTEAMLOGFileUnlikeCommentType;

	readonly fileUnresolveComment: DBTEAMLOGFileUnresolveCommentType;

	readonly googleSsoChangePolicy: DBTEAMLOGGoogleSsoChangePolicyType;

	readonly groupAddExternalId: DBTEAMLOGGroupAddExternalIdType;

	readonly groupAddMember: DBTEAMLOGGroupAddMemberType;

	readonly groupChangeExternalId: DBTEAMLOGGroupChangeExternalIdType;

	readonly groupChangeManagementType: DBTEAMLOGGroupChangeManagementTypeType;

	readonly groupChangeMemberRole: DBTEAMLOGGroupChangeMemberRoleType;

	readonly groupCreate: DBTEAMLOGGroupCreateType;

	readonly groupDelete: DBTEAMLOGGroupDeleteType;

	readonly groupDescriptionUpdated: DBTEAMLOGGroupDescriptionUpdatedType;

	readonly groupJoinPolicyUpdated: DBTEAMLOGGroupJoinPolicyUpdatedType;

	readonly groupMoved: DBTEAMLOGGroupMovedType;

	readonly groupRemoveExternalId: DBTEAMLOGGroupRemoveExternalIdType;

	readonly groupRemoveMember: DBTEAMLOGGroupRemoveMemberType;

	readonly groupRename: DBTEAMLOGGroupRenameType;

	readonly groupUserManagementChangePolicy: DBTEAMLOGGroupUserManagementChangePolicyType;

	readonly loginFail: DBTEAMLOGLoginFailType;

	readonly loginSuccess: DBTEAMLOGLoginSuccessType;

	readonly logout: DBTEAMLOGLogoutType;

	readonly memberAddName: DBTEAMLOGMemberAddNameType;

	readonly memberChangeAdminRole: DBTEAMLOGMemberChangeAdminRoleType;

	readonly memberChangeEmail: DBTEAMLOGMemberChangeEmailType;

	readonly memberChangeMembershipType: DBTEAMLOGMemberChangeMembershipTypeType;

	readonly memberChangeName: DBTEAMLOGMemberChangeNameType;

	readonly memberChangeStatus: DBTEAMLOGMemberChangeStatusType;

	readonly memberDeleteManualContacts: DBTEAMLOGMemberDeleteManualContactsType;

	readonly memberPermanentlyDeleteAccountContents: DBTEAMLOGMemberPermanentlyDeleteAccountContentsType;

	readonly memberRequestsChangePolicy: DBTEAMLOGMemberRequestsChangePolicyType;

	readonly memberSpaceLimitsAddCustomQuota: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType;

	readonly memberSpaceLimitsAddException: DBTEAMLOGMemberSpaceLimitsAddExceptionType;

	readonly memberSpaceLimitsChangeCapsTypePolicy: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType;

	readonly memberSpaceLimitsChangeCustomQuota: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType;

	readonly memberSpaceLimitsChangePolicy: DBTEAMLOGMemberSpaceLimitsChangePolicyType;

	readonly memberSpaceLimitsChangeStatus: DBTEAMLOGMemberSpaceLimitsChangeStatusType;

	readonly memberSpaceLimitsRemoveCustomQuota: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType;

	readonly memberSpaceLimitsRemoveException: DBTEAMLOGMemberSpaceLimitsRemoveExceptionType;

	readonly memberSuggest: DBTEAMLOGMemberSuggestType;

	readonly memberSuggestionsChangePolicy: DBTEAMLOGMemberSuggestionsChangePolicyType;

	readonly memberTransferAccountContents: DBTEAMLOGMemberTransferAccountContentsType;

	readonly microsoftOfficeAddinChangePolicy: DBTEAMLOGMicrosoftOfficeAddinChangePolicyType;

	readonly networkControlChangePolicy: DBTEAMLOGNetworkControlChangePolicyType;

	readonly noteAclInviteOnly: DBTEAMLOGNoteAclInviteOnlyType;

	readonly noteAclLink: DBTEAMLOGNoteAclLinkType;

	readonly noteAclTeamLink: DBTEAMLOGNoteAclTeamLinkType;

	readonly noteShareReceive: DBTEAMLOGNoteShareReceiveType;

	readonly noteShared: DBTEAMLOGNoteSharedType;

	readonly openNoteShared: DBTEAMLOGOpenNoteSharedType;

	readonly paperAdminExportStart: DBTEAMLOGPaperAdminExportStartType;

	readonly paperChangeDeploymentPolicy: DBTEAMLOGPaperChangeDeploymentPolicyType;

	readonly paperChangeMemberLinkPolicy: DBTEAMLOGPaperChangeMemberLinkPolicyType;

	readonly paperChangeMemberPolicy: DBTEAMLOGPaperChangeMemberPolicyType;

	readonly paperChangePolicy: DBTEAMLOGPaperChangePolicyType;

	readonly paperContentAddMember: DBTEAMLOGPaperContentAddMemberType;

	readonly paperContentAddToFolder: DBTEAMLOGPaperContentAddToFolderType;

	readonly paperContentArchive: DBTEAMLOGPaperContentArchiveType;

	readonly paperContentCreate: DBTEAMLOGPaperContentCreateType;

	readonly paperContentPermanentlyDelete: DBTEAMLOGPaperContentPermanentlyDeleteType;

	readonly paperContentRemoveFromFolder: DBTEAMLOGPaperContentRemoveFromFolderType;

	readonly paperContentRemoveMember: DBTEAMLOGPaperContentRemoveMemberType;

	readonly paperContentRename: DBTEAMLOGPaperContentRenameType;

	readonly paperContentRestore: DBTEAMLOGPaperContentRestoreType;

	readonly paperDocAddComment: DBTEAMLOGPaperDocAddCommentType;

	readonly paperDocChangeMemberRole: DBTEAMLOGPaperDocChangeMemberRoleType;

	readonly paperDocChangeSharingPolicy: DBTEAMLOGPaperDocChangeSharingPolicyType;

	readonly paperDocChangeSubscription: DBTEAMLOGPaperDocChangeSubscriptionType;

	readonly paperDocDeleteComment: DBTEAMLOGPaperDocDeleteCommentType;

	readonly paperDocDeleted: DBTEAMLOGPaperDocDeletedType;

	readonly paperDocDownload: DBTEAMLOGPaperDocDownloadType;

	readonly paperDocEdit: DBTEAMLOGPaperDocEditType;

	readonly paperDocEditComment: DBTEAMLOGPaperDocEditCommentType;

	readonly paperDocFollowed: DBTEAMLOGPaperDocFollowedType;

	readonly paperDocMention: DBTEAMLOGPaperDocMentionType;

	readonly paperDocOwnershipChanged: DBTEAMLOGPaperDocOwnershipChangedType;

	readonly paperDocRequestAccess: DBTEAMLOGPaperDocRequestAccessType;

	readonly paperDocResolveComment: DBTEAMLOGPaperDocResolveCommentType;

	readonly paperDocRevert: DBTEAMLOGPaperDocRevertType;

	readonly paperDocSlackShare: DBTEAMLOGPaperDocSlackShareType;

	readonly paperDocTeamInvite: DBTEAMLOGPaperDocTeamInviteType;

	readonly paperDocTrashed: DBTEAMLOGPaperDocTrashedType;

	readonly paperDocUnresolveComment: DBTEAMLOGPaperDocUnresolveCommentType;

	readonly paperDocUntrashed: DBTEAMLOGPaperDocUntrashedType;

	readonly paperDocView: DBTEAMLOGPaperDocViewType;

	readonly paperEnabledUsersGroupAddition: DBTEAMLOGPaperEnabledUsersGroupAdditionType;

	readonly paperEnabledUsersGroupRemoval: DBTEAMLOGPaperEnabledUsersGroupRemovalType;

	readonly paperExternalViewAllow: DBTEAMLOGPaperExternalViewAllowType;

	readonly paperExternalViewDefaultTeam: DBTEAMLOGPaperExternalViewDefaultTeamType;

	readonly paperExternalViewForbid: DBTEAMLOGPaperExternalViewForbidType;

	readonly paperFolderChangeSubscription: DBTEAMLOGPaperFolderChangeSubscriptionType;

	readonly paperFolderDeleted: DBTEAMLOGPaperFolderDeletedType;

	readonly paperFolderFollowed: DBTEAMLOGPaperFolderFollowedType;

	readonly paperFolderTeamInvite: DBTEAMLOGPaperFolderTeamInviteType;

	readonly passwordChange: DBTEAMLOGPasswordChangeType;

	readonly passwordReset: DBTEAMLOGPasswordResetType;

	readonly passwordResetAll: DBTEAMLOGPasswordResetAllType;

	readonly permanentDeleteChangePolicy: DBTEAMLOGPermanentDeleteChangePolicyType;

	readonly resellerSupportSessionEnd: DBTEAMLOGResellerSupportSessionEndType;

	readonly resellerSupportSessionStart: DBTEAMLOGResellerSupportSessionStartType;

	readonly secondaryMailsPolicyChanged: DBTEAMLOGSecondaryMailsPolicyChangedType;

	readonly sfAddGroup: DBTEAMLOGSfAddGroupType;

	readonly sfAllowNonMembersToViewSharedLinks: DBTEAMLOGSfAllowNonMembersToViewSharedLinksType;

	readonly sfExternalInviteWarn: DBTEAMLOGSfExternalInviteWarnType;

	readonly sfFbInvite: DBTEAMLOGSfFbInviteType;

	readonly sfFbInviteChangeRole: DBTEAMLOGSfFbInviteChangeRoleType;

	readonly sfFbUninvite: DBTEAMLOGSfFbUninviteType;

	readonly sfInviteGroup: DBTEAMLOGSfInviteGroupType;

	readonly sfTeamGrantAccess: DBTEAMLOGSfTeamGrantAccessType;

	readonly sfTeamInvite: DBTEAMLOGSfTeamInviteType;

	readonly sfTeamInviteChangeRole: DBTEAMLOGSfTeamInviteChangeRoleType;

	readonly sfTeamJoin: DBTEAMLOGSfTeamJoinType;

	readonly sfTeamJoinFromOobLink: DBTEAMLOGSfTeamJoinFromOobLinkType;

	readonly sfTeamUninvite: DBTEAMLOGSfTeamUninviteType;

	readonly sharedContentAddInvitees: DBTEAMLOGSharedContentAddInviteesType;

	readonly sharedContentAddLinkExpiry: DBTEAMLOGSharedContentAddLinkExpiryType;

	readonly sharedContentAddLinkPassword: DBTEAMLOGSharedContentAddLinkPasswordType;

	readonly sharedContentAddMember: DBTEAMLOGSharedContentAddMemberType;

	readonly sharedContentChangeDownloadsPolicy: DBTEAMLOGSharedContentChangeDownloadsPolicyType;

	readonly sharedContentChangeInviteeRole: DBTEAMLOGSharedContentChangeInviteeRoleType;

	readonly sharedContentChangeLinkAudience: DBTEAMLOGSharedContentChangeLinkAudienceType;

	readonly sharedContentChangeLinkExpiry: DBTEAMLOGSharedContentChangeLinkExpiryType;

	readonly sharedContentChangeLinkPassword: DBTEAMLOGSharedContentChangeLinkPasswordType;

	readonly sharedContentChangeMemberRole: DBTEAMLOGSharedContentChangeMemberRoleType;

	readonly sharedContentChangeViewerInfoPolicy: DBTEAMLOGSharedContentChangeViewerInfoPolicyType;

	readonly sharedContentClaimInvitation: DBTEAMLOGSharedContentClaimInvitationType;

	readonly sharedContentCopy: DBTEAMLOGSharedContentCopyType;

	readonly sharedContentDownload: DBTEAMLOGSharedContentDownloadType;

	readonly sharedContentRelinquishMembership: DBTEAMLOGSharedContentRelinquishMembershipType;

	readonly sharedContentRemoveInvitees: DBTEAMLOGSharedContentRemoveInviteesType;

	readonly sharedContentRemoveLinkExpiry: DBTEAMLOGSharedContentRemoveLinkExpiryType;

	readonly sharedContentRemoveLinkPassword: DBTEAMLOGSharedContentRemoveLinkPasswordType;

	readonly sharedContentRemoveMember: DBTEAMLOGSharedContentRemoveMemberType;

	readonly sharedContentRequestAccess: DBTEAMLOGSharedContentRequestAccessType;

	readonly sharedContentUnshare: DBTEAMLOGSharedContentUnshareType;

	readonly sharedContentView: DBTEAMLOGSharedContentViewType;

	readonly sharedFolderChangeLinkPolicy: DBTEAMLOGSharedFolderChangeLinkPolicyType;

	readonly sharedFolderChangeMembersInheritancePolicy: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType;

	readonly sharedFolderChangeMembersManagementPolicy: DBTEAMLOGSharedFolderChangeMembersManagementPolicyType;

	readonly sharedFolderChangeMembersPolicy: DBTEAMLOGSharedFolderChangeMembersPolicyType;

	readonly sharedFolderCreate: DBTEAMLOGSharedFolderCreateType;

	readonly sharedFolderDeclineInvitation: DBTEAMLOGSharedFolderDeclineInvitationType;

	readonly sharedFolderMount: DBTEAMLOGSharedFolderMountType;

	readonly sharedFolderNest: DBTEAMLOGSharedFolderNestType;

	readonly sharedFolderTransferOwnership: DBTEAMLOGSharedFolderTransferOwnershipType;

	readonly sharedFolderUnmount: DBTEAMLOGSharedFolderUnmountType;

	readonly sharedLinkAddExpiry: DBTEAMLOGSharedLinkAddExpiryType;

	readonly sharedLinkChangeExpiry: DBTEAMLOGSharedLinkChangeExpiryType;

	readonly sharedLinkChangeVisibility: DBTEAMLOGSharedLinkChangeVisibilityType;

	readonly sharedLinkCopy: DBTEAMLOGSharedLinkCopyType;

	readonly sharedLinkCreate: DBTEAMLOGSharedLinkCreateType;

	readonly sharedLinkDisable: DBTEAMLOGSharedLinkDisableType;

	readonly sharedLinkDownload: DBTEAMLOGSharedLinkDownloadType;

	readonly sharedLinkRemoveExpiry: DBTEAMLOGSharedLinkRemoveExpiryType;

	readonly sharedLinkShare: DBTEAMLOGSharedLinkShareType;

	readonly sharedLinkView: DBTEAMLOGSharedLinkViewType;

	readonly sharedNoteOpened: DBTEAMLOGSharedNoteOpenedType;

	readonly sharingChangeFolderJoinPolicy: DBTEAMLOGSharingChangeFolderJoinPolicyType;

	readonly sharingChangeLinkPolicy: DBTEAMLOGSharingChangeLinkPolicyType;

	readonly sharingChangeMemberPolicy: DBTEAMLOGSharingChangeMemberPolicyType;

	readonly shmodelGroupShare: DBTEAMLOGShmodelGroupShareType;

	readonly showcaseAccessGranted: DBTEAMLOGShowcaseAccessGrantedType;

	readonly showcaseAddMember: DBTEAMLOGShowcaseAddMemberType;

	readonly showcaseArchived: DBTEAMLOGShowcaseArchivedType;

	readonly showcaseChangeDownloadPolicy: DBTEAMLOGShowcaseChangeDownloadPolicyType;

	readonly showcaseChangeEnabledPolicy: DBTEAMLOGShowcaseChangeEnabledPolicyType;

	readonly showcaseChangeExternalSharingPolicy: DBTEAMLOGShowcaseChangeExternalSharingPolicyType;

	readonly showcaseCreated: DBTEAMLOGShowcaseCreatedType;

	readonly showcaseDeleteComment: DBTEAMLOGShowcaseDeleteCommentType;

	readonly showcaseEditComment: DBTEAMLOGShowcaseEditCommentType;

	readonly showcaseEdited: DBTEAMLOGShowcaseEditedType;

	readonly showcaseFileAdded: DBTEAMLOGShowcaseFileAddedType;

	readonly showcaseFileDownload: DBTEAMLOGShowcaseFileDownloadType;

	readonly showcaseFileRemoved: DBTEAMLOGShowcaseFileRemovedType;

	readonly showcaseFileView: DBTEAMLOGShowcaseFileViewType;

	readonly showcasePermanentlyDeleted: DBTEAMLOGShowcasePermanentlyDeletedType;

	readonly showcasePostComment: DBTEAMLOGShowcasePostCommentType;

	readonly showcaseRemoveMember: DBTEAMLOGShowcaseRemoveMemberType;

	readonly showcaseRenamed: DBTEAMLOGShowcaseRenamedType;

	readonly showcaseRequestAccess: DBTEAMLOGShowcaseRequestAccessType;

	readonly showcaseResolveComment: DBTEAMLOGShowcaseResolveCommentType;

	readonly showcaseRestored: DBTEAMLOGShowcaseRestoredType;

	readonly showcaseTrashed: DBTEAMLOGShowcaseTrashedType;

	readonly showcaseTrashedDeprecated: DBTEAMLOGShowcaseTrashedDeprecatedType;

	readonly showcaseUnresolveComment: DBTEAMLOGShowcaseUnresolveCommentType;

	readonly showcaseUntrashed: DBTEAMLOGShowcaseUntrashedType;

	readonly showcaseUntrashedDeprecated: DBTEAMLOGShowcaseUntrashedDeprecatedType;

	readonly showcaseView: DBTEAMLOGShowcaseViewType;

	readonly signInAsSessionEnd: DBTEAMLOGSignInAsSessionEndType;

	readonly signInAsSessionStart: DBTEAMLOGSignInAsSessionStartType;

	readonly smartSyncChangePolicy: DBTEAMLOGSmartSyncChangePolicyType;

	readonly smartSyncCreateAdminPrivilegeReport: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType;

	readonly smartSyncNotOptOut: DBTEAMLOGSmartSyncNotOptOutType;

	readonly smartSyncOptOut: DBTEAMLOGSmartSyncOptOutType;

	readonly ssoAddCert: DBTEAMLOGSsoAddCertType;

	readonly ssoAddLoginUrl: DBTEAMLOGSsoAddLoginUrlType;

	readonly ssoAddLogoutUrl: DBTEAMLOGSsoAddLogoutUrlType;

	readonly ssoChangeCert: DBTEAMLOGSsoChangeCertType;

	readonly ssoChangeLoginUrl: DBTEAMLOGSsoChangeLoginUrlType;

	readonly ssoChangeLogoutUrl: DBTEAMLOGSsoChangeLogoutUrlType;

	readonly ssoChangePolicy: DBTEAMLOGSsoChangePolicyType;

	readonly ssoChangeSamlIdentityMode: DBTEAMLOGSsoChangeSamlIdentityModeType;

	readonly ssoError: DBTEAMLOGSsoErrorType;

	readonly ssoRemoveCert: DBTEAMLOGSsoRemoveCertType;

	readonly ssoRemoveLoginUrl: DBTEAMLOGSsoRemoveLoginUrlType;

	readonly ssoRemoveLogoutUrl: DBTEAMLOGSsoRemoveLogoutUrlType;

	readonly tag: DBTEAMLOGEventTypeTag;

	readonly teamActivityCreateReport: DBTEAMLOGTeamActivityCreateReportType;

	readonly teamFolderChangeStatus: DBTEAMLOGTeamFolderChangeStatusType;

	readonly teamFolderCreate: DBTEAMLOGTeamFolderCreateType;

	readonly teamFolderDowngrade: DBTEAMLOGTeamFolderDowngradeType;

	readonly teamFolderPermanentlyDelete: DBTEAMLOGTeamFolderPermanentlyDeleteType;

	readonly teamFolderRename: DBTEAMLOGTeamFolderRenameType;

	readonly teamMergeFrom: DBTEAMLOGTeamMergeFromType;

	readonly teamMergeTo: DBTEAMLOGTeamMergeToType;

	readonly teamProfileAddLogo: DBTEAMLOGTeamProfileAddLogoType;

	readonly teamProfileChangeDefaultLanguage: DBTEAMLOGTeamProfileChangeDefaultLanguageType;

	readonly teamProfileChangeLogo: DBTEAMLOGTeamProfileChangeLogoType;

	readonly teamProfileChangeName: DBTEAMLOGTeamProfileChangeNameType;

	readonly teamProfileRemoveLogo: DBTEAMLOGTeamProfileRemoveLogoType;

	readonly teamSelectiveSyncPolicyChanged: DBTEAMLOGTeamSelectiveSyncPolicyChangedType;

	readonly teamSelectiveSyncSettingsChanged: DBTEAMLOGTeamSelectiveSyncSettingsChangedType;

	readonly tfaAddBackupPhone: DBTEAMLOGTfaAddBackupPhoneType;

	readonly tfaAddSecurityKey: DBTEAMLOGTfaAddSecurityKeyType;

	readonly tfaChangeBackupPhone: DBTEAMLOGTfaChangeBackupPhoneType;

	readonly tfaChangePolicy: DBTEAMLOGTfaChangePolicyType;

	readonly tfaChangeStatus: DBTEAMLOGTfaChangeStatusType;

	readonly tfaRemoveBackupPhone: DBTEAMLOGTfaRemoveBackupPhoneType;

	readonly tfaRemoveSecurityKey: DBTEAMLOGTfaRemoveSecurityKeyType;

	readonly tfaReset: DBTEAMLOGTfaResetType;

	readonly twoAccountChangePolicy: DBTEAMLOGTwoAccountChangePolicyType;

	readonly viewerInfoPolicyChanged: DBTEAMLOGViewerInfoPolicyChangedType;

	readonly webSessionsChangeFixedLengthPolicy: DBTEAMLOGWebSessionsChangeFixedLengthPolicyType;

	readonly webSessionsChangeIdleLengthPolicy: DBTEAMLOGWebSessionsChangeIdleLengthPolicyType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountCaptureChangeAvailability: DBTEAMLOGAccountCaptureChangeAvailabilityType; });

	constructor(o: { accountCaptureChangePolicy: DBTEAMLOGAccountCaptureChangePolicyType; });

	constructor(o: { accountCaptureMigrateAccount: DBTEAMLOGAccountCaptureMigrateAccountType; });

	constructor(o: { accountCaptureNotificationEmailsSent: DBTEAMLOGAccountCaptureNotificationEmailsSentType; });

	constructor(o: { accountCaptureRelinquishAccount: DBTEAMLOGAccountCaptureRelinquishAccountType; });

	constructor(o: { allowDownloadDisabled: DBTEAMLOGAllowDownloadDisabledType; });

	constructor(o: { allowDownloadEnabled: DBTEAMLOGAllowDownloadEnabledType; });

	constructor(o: { appLinkTeam: DBTEAMLOGAppLinkTeamType; });

	constructor(o: { appLinkUser: DBTEAMLOGAppLinkUserType; });

	constructor(o: { appUnlinkTeam: DBTEAMLOGAppUnlinkTeamType; });

	constructor(o: { appUnlinkUser: DBTEAMLOGAppUnlinkUserType; });

	constructor(o: { cameraUploadsPolicyChanged: DBTEAMLOGCameraUploadsPolicyChangedType; });

	constructor(o: { collectionShare: DBTEAMLOGCollectionShareType; });

	constructor(o: { createFolder: DBTEAMLOGCreateFolderType; });

	constructor(o: { dataPlacementRestrictionChangePolicy: DBTEAMLOGDataPlacementRestrictionChangePolicyType; });

	constructor(o: { dataPlacementRestrictionSatisfyPolicy: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType; });

	constructor(o: { deviceApprovalsChangeDesktopPolicy: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType; });

	constructor(o: { deviceApprovalsChangeMobilePolicy: DBTEAMLOGDeviceApprovalsChangeMobilePolicyType; });

	constructor(o: { deviceApprovalsChangeOverageAction: DBTEAMLOGDeviceApprovalsChangeOverageActionType; });

	constructor(o: { deviceApprovalsChangeUnlinkAction: DBTEAMLOGDeviceApprovalsChangeUnlinkActionType; });

	constructor(o: { deviceChangeIpDesktop: DBTEAMLOGDeviceChangeIpDesktopType; });

	constructor(o: { deviceChangeIpMobile: DBTEAMLOGDeviceChangeIpMobileType; });

	constructor(o: { deviceChangeIpWeb: DBTEAMLOGDeviceChangeIpWebType; });

	constructor(o: { deviceDeleteOnUnlinkFail: DBTEAMLOGDeviceDeleteOnUnlinkFailType; });

	constructor(o: { deviceDeleteOnUnlinkSuccess: DBTEAMLOGDeviceDeleteOnUnlinkSuccessType; });

	constructor(o: { deviceLinkFail: DBTEAMLOGDeviceLinkFailType; });

	constructor(o: { deviceLinkSuccess: DBTEAMLOGDeviceLinkSuccessType; });

	constructor(o: { deviceManagementDisabled: DBTEAMLOGDeviceManagementDisabledType; });

	constructor(o: { deviceManagementEnabled: DBTEAMLOGDeviceManagementEnabledType; });

	constructor(o: { deviceUnlink: DBTEAMLOGDeviceUnlinkType; });

	constructor(o: { directoryRestrictionsAddMembers: DBTEAMLOGDirectoryRestrictionsAddMembersType; });

	constructor(o: { directoryRestrictionsRemoveMembers: DBTEAMLOGDirectoryRestrictionsRemoveMembersType; });

	constructor(o: { disabledDomainInvites: DBTEAMLOGDisabledDomainInvitesType; });

	constructor(o: { domainInvitesApproveRequestToJoinTeam: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType; });

	constructor(o: { domainInvitesDeclineRequestToJoinTeam: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType; });

	constructor(o: { domainInvitesEmailExistingUsers: DBTEAMLOGDomainInvitesEmailExistingUsersType; });

	constructor(o: { domainInvitesRequestToJoinTeam: DBTEAMLOGDomainInvitesRequestToJoinTeamType; });

	constructor(o: { domainInvitesSetInviteNewUserPrefToNo: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType; });

	constructor(o: { domainInvitesSetInviteNewUserPrefToYes: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType; });

	constructor(o: { domainVerificationAddDomainFail: DBTEAMLOGDomainVerificationAddDomainFailType; });

	constructor(o: { domainVerificationAddDomainSuccess: DBTEAMLOGDomainVerificationAddDomainSuccessType; });

	constructor(o: { domainVerificationRemoveDomain: DBTEAMLOGDomainVerificationRemoveDomainType; });

	constructor(o: { emmAddException: DBTEAMLOGEmmAddExceptionType; });

	constructor(o: { emmChangePolicy: DBTEAMLOGEmmChangePolicyType; });

	constructor(o: { emmCreateExceptionsReport: DBTEAMLOGEmmCreateExceptionsReportType; });

	constructor(o: { emmCreateUsageReport: DBTEAMLOGEmmCreateUsageReportType; });

	constructor(o: { emmError: DBTEAMLOGEmmErrorType; });

	constructor(o: { emmRefreshAuthToken: DBTEAMLOGEmmRefreshAuthTokenType; });

	constructor(o: { emmRemoveException: DBTEAMLOGEmmRemoveExceptionType; });

	constructor(o: { enabledDomainInvites: DBTEAMLOGEnabledDomainInvitesType; });

	constructor(o: { exportMembersReport: DBTEAMLOGExportMembersReportType; });

	constructor(o: { extendedVersionHistoryChangePolicy: DBTEAMLOGExtendedVersionHistoryChangePolicyType; });

	constructor(o: { fileAdd: DBTEAMLOGFileAddType; });

	constructor(o: { fileAddComment: DBTEAMLOGFileAddCommentType; });

	constructor(o: { fileChangeCommentSubscription: DBTEAMLOGFileChangeCommentSubscriptionType; });

	constructor(o: { fileCommentsChangePolicy: DBTEAMLOGFileCommentsChangePolicyType; });

	constructor(o: { fileCopy: DBTEAMLOGFileCopyType; });

	constructor(o: { fileDelete: DBTEAMLOGFileDeleteType; });

	constructor(o: { fileDeleteComment: DBTEAMLOGFileDeleteCommentType; });

	constructor(o: { fileDownload: DBTEAMLOGFileDownloadType; });

	constructor(o: { fileEdit: DBTEAMLOGFileEditType; });

	constructor(o: { fileEditComment: DBTEAMLOGFileEditCommentType; });

	constructor(o: { fileGetCopyReference: DBTEAMLOGFileGetCopyReferenceType; });

	constructor(o: { fileLikeComment: DBTEAMLOGFileLikeCommentType; });

	constructor(o: { fileMove: DBTEAMLOGFileMoveType; });

	constructor(o: { filePermanentlyDelete: DBTEAMLOGFilePermanentlyDeleteType; });

	constructor(o: { filePreview: DBTEAMLOGFilePreviewType; });

	constructor(o: { fileRename: DBTEAMLOGFileRenameType; });

	constructor(o: { fileRequestChange: DBTEAMLOGFileRequestChangeType; });

	constructor(o: { fileRequestClose: DBTEAMLOGFileRequestCloseType; });

	constructor(o: { fileRequestCreate: DBTEAMLOGFileRequestCreateType; });

	constructor(o: { fileRequestReceiveFile: DBTEAMLOGFileRequestReceiveFileType; });

	constructor(o: { fileRequestsChangePolicy: DBTEAMLOGFileRequestsChangePolicyType; });

	constructor(o: { fileRequestsEmailsEnabled: DBTEAMLOGFileRequestsEmailsEnabledType; });

	constructor(o: { fileRequestsEmailsRestrictedToTeamOnly: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType; });

	constructor(o: { fileResolveComment: DBTEAMLOGFileResolveCommentType; });

	constructor(o: { fileRestore: DBTEAMLOGFileRestoreType; });

	constructor(o: { fileRevert: DBTEAMLOGFileRevertType; });

	constructor(o: { fileRollbackChanges: DBTEAMLOGFileRollbackChangesType; });

	constructor(o: { fileSaveCopyReference: DBTEAMLOGFileSaveCopyReferenceType; });

	constructor(o: { fileUnlikeComment: DBTEAMLOGFileUnlikeCommentType; });

	constructor(o: { fileUnresolveComment: DBTEAMLOGFileUnresolveCommentType; });

	constructor(o: { googleSsoChangePolicy: DBTEAMLOGGoogleSsoChangePolicyType; });

	constructor(o: { groupAddExternalId: DBTEAMLOGGroupAddExternalIdType; });

	constructor(o: { groupAddMember: DBTEAMLOGGroupAddMemberType; });

	constructor(o: { groupChangeExternalId: DBTEAMLOGGroupChangeExternalIdType; });

	constructor(o: { groupChangeManagementType: DBTEAMLOGGroupChangeManagementTypeType; });

	constructor(o: { groupChangeMemberRole: DBTEAMLOGGroupChangeMemberRoleType; });

	constructor(o: { groupCreate: DBTEAMLOGGroupCreateType; });

	constructor(o: { groupDelete: DBTEAMLOGGroupDeleteType; });

	constructor(o: { groupDescriptionUpdated: DBTEAMLOGGroupDescriptionUpdatedType; });

	constructor(o: { groupJoinPolicyUpdated: DBTEAMLOGGroupJoinPolicyUpdatedType; });

	constructor(o: { groupMoved: DBTEAMLOGGroupMovedType; });

	constructor(o: { groupRemoveExternalId: DBTEAMLOGGroupRemoveExternalIdType; });

	constructor(o: { groupRemoveMember: DBTEAMLOGGroupRemoveMemberType; });

	constructor(o: { groupRename: DBTEAMLOGGroupRenameType; });

	constructor(o: { groupUserManagementChangePolicy: DBTEAMLOGGroupUserManagementChangePolicyType; });

	constructor(o: { loginFail: DBTEAMLOGLoginFailType; });

	constructor(o: { loginSuccess: DBTEAMLOGLoginSuccessType; });

	constructor(o: { logout: DBTEAMLOGLogoutType; });

	constructor(o: { memberAddName: DBTEAMLOGMemberAddNameType; });

	constructor(o: { memberChangeAdminRole: DBTEAMLOGMemberChangeAdminRoleType; });

	constructor(o: { memberChangeEmail: DBTEAMLOGMemberChangeEmailType; });

	constructor(o: { memberChangeMembershipType: DBTEAMLOGMemberChangeMembershipTypeType; });

	constructor(o: { memberChangeName: DBTEAMLOGMemberChangeNameType; });

	constructor(o: { memberChangeStatus: DBTEAMLOGMemberChangeStatusType; });

	constructor(o: { memberDeleteManualContacts: DBTEAMLOGMemberDeleteManualContactsType; });

	constructor(o: { memberPermanentlyDeleteAccountContents: DBTEAMLOGMemberPermanentlyDeleteAccountContentsType; });

	constructor(o: { memberRequestsChangePolicy: DBTEAMLOGMemberRequestsChangePolicyType; });

	constructor(o: { memberSpaceLimitsAddCustomQuota: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType; });

	constructor(o: { memberSpaceLimitsAddException: DBTEAMLOGMemberSpaceLimitsAddExceptionType; });

	constructor(o: { memberSpaceLimitsChangeCapsTypePolicy: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType; });

	constructor(o: { memberSpaceLimitsChangeCustomQuota: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType; });

	constructor(o: { memberSpaceLimitsChangePolicy: DBTEAMLOGMemberSpaceLimitsChangePolicyType; });

	constructor(o: { memberSpaceLimitsChangeStatus: DBTEAMLOGMemberSpaceLimitsChangeStatusType; });

	constructor(o: { memberSpaceLimitsRemoveCustomQuota: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType; });

	constructor(o: { memberSpaceLimitsRemoveException: DBTEAMLOGMemberSpaceLimitsRemoveExceptionType; });

	constructor(o: { memberSuggest: DBTEAMLOGMemberSuggestType; });

	constructor(o: { memberSuggestionsChangePolicy: DBTEAMLOGMemberSuggestionsChangePolicyType; });

	constructor(o: { memberTransferAccountContents: DBTEAMLOGMemberTransferAccountContentsType; });

	constructor(o: { microsoftOfficeAddinChangePolicy: DBTEAMLOGMicrosoftOfficeAddinChangePolicyType; });

	constructor(o: { networkControlChangePolicy: DBTEAMLOGNetworkControlChangePolicyType; });

	constructor(o: { noteAclInviteOnly: DBTEAMLOGNoteAclInviteOnlyType; });

	constructor(o: { noteAclLink: DBTEAMLOGNoteAclLinkType; });

	constructor(o: { noteAclTeamLink: DBTEAMLOGNoteAclTeamLinkType; });

	constructor(o: { noteShareReceive: DBTEAMLOGNoteShareReceiveType; });

	constructor(o: { noteShared: DBTEAMLOGNoteSharedType; });

	constructor(o: { openNoteShared: DBTEAMLOGOpenNoteSharedType; });

	constructor(o: { other: void; });

	constructor(o: { paperAdminExportStart: DBTEAMLOGPaperAdminExportStartType; });

	constructor(o: { paperChangeDeploymentPolicy: DBTEAMLOGPaperChangeDeploymentPolicyType; });

	constructor(o: { paperChangeMemberLinkPolicy: DBTEAMLOGPaperChangeMemberLinkPolicyType; });

	constructor(o: { paperChangeMemberPolicy: DBTEAMLOGPaperChangeMemberPolicyType; });

	constructor(o: { paperChangePolicy: DBTEAMLOGPaperChangePolicyType; });

	constructor(o: { paperContentAddMember: DBTEAMLOGPaperContentAddMemberType; });

	constructor(o: { paperContentAddToFolder: DBTEAMLOGPaperContentAddToFolderType; });

	constructor(o: { paperContentArchive: DBTEAMLOGPaperContentArchiveType; });

	constructor(o: { paperContentCreate: DBTEAMLOGPaperContentCreateType; });

	constructor(o: { paperContentPermanentlyDelete: DBTEAMLOGPaperContentPermanentlyDeleteType; });

	constructor(o: { paperContentRemoveFromFolder: DBTEAMLOGPaperContentRemoveFromFolderType; });

	constructor(o: { paperContentRemoveMember: DBTEAMLOGPaperContentRemoveMemberType; });

	constructor(o: { paperContentRename: DBTEAMLOGPaperContentRenameType; });

	constructor(o: { paperContentRestore: DBTEAMLOGPaperContentRestoreType; });

	constructor(o: { paperDocAddComment: DBTEAMLOGPaperDocAddCommentType; });

	constructor(o: { paperDocChangeMemberRole: DBTEAMLOGPaperDocChangeMemberRoleType; });

	constructor(o: { paperDocChangeSharingPolicy: DBTEAMLOGPaperDocChangeSharingPolicyType; });

	constructor(o: { paperDocChangeSubscription: DBTEAMLOGPaperDocChangeSubscriptionType; });

	constructor(o: { paperDocDeleteComment: DBTEAMLOGPaperDocDeleteCommentType; });

	constructor(o: { paperDocDeleted: DBTEAMLOGPaperDocDeletedType; });

	constructor(o: { paperDocDownload: DBTEAMLOGPaperDocDownloadType; });

	constructor(o: { paperDocEdit: DBTEAMLOGPaperDocEditType; });

	constructor(o: { paperDocEditComment: DBTEAMLOGPaperDocEditCommentType; });

	constructor(o: { paperDocFollowed: DBTEAMLOGPaperDocFollowedType; });

	constructor(o: { paperDocMention: DBTEAMLOGPaperDocMentionType; });

	constructor(o: { paperDocOwnershipChanged: DBTEAMLOGPaperDocOwnershipChangedType; });

	constructor(o: { paperDocRequestAccess: DBTEAMLOGPaperDocRequestAccessType; });

	constructor(o: { paperDocResolveComment: DBTEAMLOGPaperDocResolveCommentType; });

	constructor(o: { paperDocRevert: DBTEAMLOGPaperDocRevertType; });

	constructor(o: { paperDocSlackShare: DBTEAMLOGPaperDocSlackShareType; });

	constructor(o: { paperDocTeamInvite: DBTEAMLOGPaperDocTeamInviteType; });

	constructor(o: { paperDocTrashed: DBTEAMLOGPaperDocTrashedType; });

	constructor(o: { paperDocUnresolveComment: DBTEAMLOGPaperDocUnresolveCommentType; });

	constructor(o: { paperDocUntrashed: DBTEAMLOGPaperDocUntrashedType; });

	constructor(o: { paperDocView: DBTEAMLOGPaperDocViewType; });

	constructor(o: { paperEnabledUsersGroupAddition: DBTEAMLOGPaperEnabledUsersGroupAdditionType; });

	constructor(o: { paperEnabledUsersGroupRemoval: DBTEAMLOGPaperEnabledUsersGroupRemovalType; });

	constructor(o: { paperExternalViewAllow: DBTEAMLOGPaperExternalViewAllowType; });

	constructor(o: { paperExternalViewDefaultTeam: DBTEAMLOGPaperExternalViewDefaultTeamType; });

	constructor(o: { paperExternalViewForbid: DBTEAMLOGPaperExternalViewForbidType; });

	constructor(o: { paperFolderChangeSubscription: DBTEAMLOGPaperFolderChangeSubscriptionType; });

	constructor(o: { paperFolderDeleted: DBTEAMLOGPaperFolderDeletedType; });

	constructor(o: { paperFolderFollowed: DBTEAMLOGPaperFolderFollowedType; });

	constructor(o: { paperFolderTeamInvite: DBTEAMLOGPaperFolderTeamInviteType; });

	constructor(o: { passwordChange: DBTEAMLOGPasswordChangeType; });

	constructor(o: { passwordReset: DBTEAMLOGPasswordResetType; });

	constructor(o: { passwordResetAll: DBTEAMLOGPasswordResetAllType; });

	constructor(o: { permanentDeleteChangePolicy: DBTEAMLOGPermanentDeleteChangePolicyType; });

	constructor(o: { resellerSupportSessionEnd: DBTEAMLOGResellerSupportSessionEndType; });

	constructor(o: { resellerSupportSessionStart: DBTEAMLOGResellerSupportSessionStartType; });

	constructor(o: { secondaryMailsPolicyChanged: DBTEAMLOGSecondaryMailsPolicyChangedType; });

	constructor(o: { sfAddGroup: DBTEAMLOGSfAddGroupType; });

	constructor(o: { sfAllowNonMembersToViewSharedLinks: DBTEAMLOGSfAllowNonMembersToViewSharedLinksType; });

	constructor(o: { sfExternalInviteWarn: DBTEAMLOGSfExternalInviteWarnType; });

	constructor(o: { sfFbInvite: DBTEAMLOGSfFbInviteType; });

	constructor(o: { sfFbInviteChangeRole: DBTEAMLOGSfFbInviteChangeRoleType; });

	constructor(o: { sfFbUninvite: DBTEAMLOGSfFbUninviteType; });

	constructor(o: { sfInviteGroup: DBTEAMLOGSfInviteGroupType; });

	constructor(o: { sfTeamGrantAccess: DBTEAMLOGSfTeamGrantAccessType; });

	constructor(o: { sfTeamInvite: DBTEAMLOGSfTeamInviteType; });

	constructor(o: { sfTeamInviteChangeRole: DBTEAMLOGSfTeamInviteChangeRoleType; });

	constructor(o: { sfTeamJoin: DBTEAMLOGSfTeamJoinType; });

	constructor(o: { sfTeamJoinFromOobLink: DBTEAMLOGSfTeamJoinFromOobLinkType; });

	constructor(o: { sfTeamUninvite: DBTEAMLOGSfTeamUninviteType; });

	constructor(o: { sharedContentAddInvitees: DBTEAMLOGSharedContentAddInviteesType; });

	constructor(o: { sharedContentAddLinkExpiry: DBTEAMLOGSharedContentAddLinkExpiryType; });

	constructor(o: { sharedContentAddLinkPassword: DBTEAMLOGSharedContentAddLinkPasswordType; });

	constructor(o: { sharedContentAddMember: DBTEAMLOGSharedContentAddMemberType; });

	constructor(o: { sharedContentChangeDownloadsPolicy: DBTEAMLOGSharedContentChangeDownloadsPolicyType; });

	constructor(o: { sharedContentChangeInviteeRole: DBTEAMLOGSharedContentChangeInviteeRoleType; });

	constructor(o: { sharedContentChangeLinkAudience: DBTEAMLOGSharedContentChangeLinkAudienceType; });

	constructor(o: { sharedContentChangeLinkExpiry: DBTEAMLOGSharedContentChangeLinkExpiryType; });

	constructor(o: { sharedContentChangeLinkPassword: DBTEAMLOGSharedContentChangeLinkPasswordType; });

	constructor(o: { sharedContentChangeMemberRole: DBTEAMLOGSharedContentChangeMemberRoleType; });

	constructor(o: { sharedContentChangeViewerInfoPolicy: DBTEAMLOGSharedContentChangeViewerInfoPolicyType; });

	constructor(o: { sharedContentClaimInvitation: DBTEAMLOGSharedContentClaimInvitationType; });

	constructor(o: { sharedContentCopy: DBTEAMLOGSharedContentCopyType; });

	constructor(o: { sharedContentDownload: DBTEAMLOGSharedContentDownloadType; });

	constructor(o: { sharedContentRelinquishMembership: DBTEAMLOGSharedContentRelinquishMembershipType; });

	constructor(o: { sharedContentRemoveInvitees: DBTEAMLOGSharedContentRemoveInviteesType; });

	constructor(o: { sharedContentRemoveLinkExpiry: DBTEAMLOGSharedContentRemoveLinkExpiryType; });

	constructor(o: { sharedContentRemoveLinkPassword: DBTEAMLOGSharedContentRemoveLinkPasswordType; });

	constructor(o: { sharedContentRemoveMember: DBTEAMLOGSharedContentRemoveMemberType; });

	constructor(o: { sharedContentRequestAccess: DBTEAMLOGSharedContentRequestAccessType; });

	constructor(o: { sharedContentUnshare: DBTEAMLOGSharedContentUnshareType; });

	constructor(o: { sharedContentView: DBTEAMLOGSharedContentViewType; });

	constructor(o: { sharedFolderChangeLinkPolicy: DBTEAMLOGSharedFolderChangeLinkPolicyType; });

	constructor(o: { sharedFolderChangeMembersInheritancePolicy: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType; });

	constructor(o: { sharedFolderChangeMembersManagementPolicy: DBTEAMLOGSharedFolderChangeMembersManagementPolicyType; });

	constructor(o: { sharedFolderChangeMembersPolicy: DBTEAMLOGSharedFolderChangeMembersPolicyType; });

	constructor(o: { sharedFolderCreate: DBTEAMLOGSharedFolderCreateType; });

	constructor(o: { sharedFolderDeclineInvitation: DBTEAMLOGSharedFolderDeclineInvitationType; });

	constructor(o: { sharedFolderMount: DBTEAMLOGSharedFolderMountType; });

	constructor(o: { sharedFolderNest: DBTEAMLOGSharedFolderNestType; });

	constructor(o: { sharedFolderTransferOwnership: DBTEAMLOGSharedFolderTransferOwnershipType; });

	constructor(o: { sharedFolderUnmount: DBTEAMLOGSharedFolderUnmountType; });

	constructor(o: { sharedLinkAddExpiry: DBTEAMLOGSharedLinkAddExpiryType; });

	constructor(o: { sharedLinkChangeExpiry: DBTEAMLOGSharedLinkChangeExpiryType; });

	constructor(o: { sharedLinkChangeVisibility: DBTEAMLOGSharedLinkChangeVisibilityType; });

	constructor(o: { sharedLinkCopy: DBTEAMLOGSharedLinkCopyType; });

	constructor(o: { sharedLinkCreate: DBTEAMLOGSharedLinkCreateType; });

	constructor(o: { sharedLinkDisable: DBTEAMLOGSharedLinkDisableType; });

	constructor(o: { sharedLinkDownload: DBTEAMLOGSharedLinkDownloadType; });

	constructor(o: { sharedLinkRemoveExpiry: DBTEAMLOGSharedLinkRemoveExpiryType; });

	constructor(o: { sharedLinkShare: DBTEAMLOGSharedLinkShareType; });

	constructor(o: { sharedLinkView: DBTEAMLOGSharedLinkViewType; });

	constructor(o: { sharedNoteOpened: DBTEAMLOGSharedNoteOpenedType; });

	constructor(o: { sharingChangeFolderJoinPolicy: DBTEAMLOGSharingChangeFolderJoinPolicyType; });

	constructor(o: { sharingChangeLinkPolicy: DBTEAMLOGSharingChangeLinkPolicyType; });

	constructor(o: { sharingChangeMemberPolicy: DBTEAMLOGSharingChangeMemberPolicyType; });

	constructor(o: { shmodelGroupShare: DBTEAMLOGShmodelGroupShareType; });

	constructor(o: { showcaseAccessGranted: DBTEAMLOGShowcaseAccessGrantedType; });

	constructor(o: { showcaseAddMember: DBTEAMLOGShowcaseAddMemberType; });

	constructor(o: { showcaseArchived: DBTEAMLOGShowcaseArchivedType; });

	constructor(o: { showcaseChangeDownloadPolicy: DBTEAMLOGShowcaseChangeDownloadPolicyType; });

	constructor(o: { showcaseChangeEnabledPolicy: DBTEAMLOGShowcaseChangeEnabledPolicyType; });

	constructor(o: { showcaseChangeExternalSharingPolicy: DBTEAMLOGShowcaseChangeExternalSharingPolicyType; });

	constructor(o: { showcaseCreated: DBTEAMLOGShowcaseCreatedType; });

	constructor(o: { showcaseDeleteComment: DBTEAMLOGShowcaseDeleteCommentType; });

	constructor(o: { showcaseEditComment: DBTEAMLOGShowcaseEditCommentType; });

	constructor(o: { showcaseEdited: DBTEAMLOGShowcaseEditedType; });

	constructor(o: { showcaseFileAdded: DBTEAMLOGShowcaseFileAddedType; });

	constructor(o: { showcaseFileDownload: DBTEAMLOGShowcaseFileDownloadType; });

	constructor(o: { showcaseFileRemoved: DBTEAMLOGShowcaseFileRemovedType; });

	constructor(o: { showcaseFileView: DBTEAMLOGShowcaseFileViewType; });

	constructor(o: { showcasePermanentlyDeleted: DBTEAMLOGShowcasePermanentlyDeletedType; });

	constructor(o: { showcasePostComment: DBTEAMLOGShowcasePostCommentType; });

	constructor(o: { showcaseRemoveMember: DBTEAMLOGShowcaseRemoveMemberType; });

	constructor(o: { showcaseRenamed: DBTEAMLOGShowcaseRenamedType; });

	constructor(o: { showcaseRequestAccess: DBTEAMLOGShowcaseRequestAccessType; });

	constructor(o: { showcaseResolveComment: DBTEAMLOGShowcaseResolveCommentType; });

	constructor(o: { showcaseRestored: DBTEAMLOGShowcaseRestoredType; });

	constructor(o: { showcaseTrashed: DBTEAMLOGShowcaseTrashedType; });

	constructor(o: { showcaseTrashedDeprecated: DBTEAMLOGShowcaseTrashedDeprecatedType; });

	constructor(o: { showcaseUnresolveComment: DBTEAMLOGShowcaseUnresolveCommentType; });

	constructor(o: { showcaseUntrashed: DBTEAMLOGShowcaseUntrashedType; });

	constructor(o: { showcaseUntrashedDeprecated: DBTEAMLOGShowcaseUntrashedDeprecatedType; });

	constructor(o: { showcaseView: DBTEAMLOGShowcaseViewType; });

	constructor(o: { signInAsSessionEnd: DBTEAMLOGSignInAsSessionEndType; });

	constructor(o: { signInAsSessionStart: DBTEAMLOGSignInAsSessionStartType; });

	constructor(o: { smartSyncChangePolicy: DBTEAMLOGSmartSyncChangePolicyType; });

	constructor(o: { smartSyncCreateAdminPrivilegeReport: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType; });

	constructor(o: { smartSyncNotOptOut: DBTEAMLOGSmartSyncNotOptOutType; });

	constructor(o: { smartSyncOptOut: DBTEAMLOGSmartSyncOptOutType; });

	constructor(o: { ssoAddCert: DBTEAMLOGSsoAddCertType; });

	constructor(o: { ssoAddLoginUrl: DBTEAMLOGSsoAddLoginUrlType; });

	constructor(o: { ssoAddLogoutUrl: DBTEAMLOGSsoAddLogoutUrlType; });

	constructor(o: { ssoChangeCert: DBTEAMLOGSsoChangeCertType; });

	constructor(o: { ssoChangeLoginUrl: DBTEAMLOGSsoChangeLoginUrlType; });

	constructor(o: { ssoChangeLogoutUrl: DBTEAMLOGSsoChangeLogoutUrlType; });

	constructor(o: { ssoChangePolicy: DBTEAMLOGSsoChangePolicyType; });

	constructor(o: { ssoChangeSamlIdentityMode: DBTEAMLOGSsoChangeSamlIdentityModeType; });

	constructor(o: { ssoError: DBTEAMLOGSsoErrorType; });

	constructor(o: { ssoRemoveCert: DBTEAMLOGSsoRemoveCertType; });

	constructor(o: { ssoRemoveLoginUrl: DBTEAMLOGSsoRemoveLoginUrlType; });

	constructor(o: { ssoRemoveLogoutUrl: DBTEAMLOGSsoRemoveLogoutUrlType; });

	constructor(o: { teamActivityCreateReport: DBTEAMLOGTeamActivityCreateReportType; });

	constructor(o: { teamFolderChangeStatus: DBTEAMLOGTeamFolderChangeStatusType; });

	constructor(o: { teamFolderCreate: DBTEAMLOGTeamFolderCreateType; });

	constructor(o: { teamFolderDowngrade: DBTEAMLOGTeamFolderDowngradeType; });

	constructor(o: { teamFolderPermanentlyDelete: DBTEAMLOGTeamFolderPermanentlyDeleteType; });

	constructor(o: { teamFolderRename: DBTEAMLOGTeamFolderRenameType; });

	constructor(o: { teamMergeFrom: DBTEAMLOGTeamMergeFromType; });

	constructor(o: { teamMergeTo: DBTEAMLOGTeamMergeToType; });

	constructor(o: { teamProfileAddLogo: DBTEAMLOGTeamProfileAddLogoType; });

	constructor(o: { teamProfileChangeDefaultLanguage: DBTEAMLOGTeamProfileChangeDefaultLanguageType; });

	constructor(o: { teamProfileChangeLogo: DBTEAMLOGTeamProfileChangeLogoType; });

	constructor(o: { teamProfileChangeName: DBTEAMLOGTeamProfileChangeNameType; });

	constructor(o: { teamProfileRemoveLogo: DBTEAMLOGTeamProfileRemoveLogoType; });

	constructor(o: { teamSelectiveSyncPolicyChanged: DBTEAMLOGTeamSelectiveSyncPolicyChangedType; });

	constructor(o: { teamSelectiveSyncSettingsChanged: DBTEAMLOGTeamSelectiveSyncSettingsChangedType; });

	constructor(o: { tfaAddBackupPhone: DBTEAMLOGTfaAddBackupPhoneType; });

	constructor(o: { tfaAddSecurityKey: DBTEAMLOGTfaAddSecurityKeyType; });

	constructor(o: { tfaChangeBackupPhone: DBTEAMLOGTfaChangeBackupPhoneType; });

	constructor(o: { tfaChangePolicy: DBTEAMLOGTfaChangePolicyType; });

	constructor(o: { tfaChangeStatus: DBTEAMLOGTfaChangeStatusType; });

	constructor(o: { tfaRemoveBackupPhone: DBTEAMLOGTfaRemoveBackupPhoneType; });

	constructor(o: { tfaRemoveSecurityKey: DBTEAMLOGTfaRemoveSecurityKeyType; });

	constructor(o: { tfaReset: DBTEAMLOGTfaResetType; });

	constructor(o: { twoAccountChangePolicy: DBTEAMLOGTwoAccountChangePolicyType; });

	constructor(o: { viewerInfoPolicyChanged: DBTEAMLOGViewerInfoPolicyChangedType; });

	constructor(o: { webSessionsChangeFixedLengthPolicy: DBTEAMLOGWebSessionsChangeFixedLengthPolicyType; });

	constructor(o: { webSessionsChangeIdleLengthPolicy: DBTEAMLOGWebSessionsChangeIdleLengthPolicyType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountCaptureChangeAvailability(accountCaptureChangeAvailability: DBTEAMLOGAccountCaptureChangeAvailabilityType): this;

	initWithAccountCaptureChangePolicy(accountCaptureChangePolicy: DBTEAMLOGAccountCaptureChangePolicyType): this;

	initWithAccountCaptureMigrateAccount(accountCaptureMigrateAccount: DBTEAMLOGAccountCaptureMigrateAccountType): this;

	initWithAccountCaptureNotificationEmailsSent(accountCaptureNotificationEmailsSent: DBTEAMLOGAccountCaptureNotificationEmailsSentType): this;

	initWithAccountCaptureRelinquishAccount(accountCaptureRelinquishAccount: DBTEAMLOGAccountCaptureRelinquishAccountType): this;

	initWithAllowDownloadDisabled(allowDownloadDisabled: DBTEAMLOGAllowDownloadDisabledType): this;

	initWithAllowDownloadEnabled(allowDownloadEnabled: DBTEAMLOGAllowDownloadEnabledType): this;

	initWithAppLinkTeam(appLinkTeam: DBTEAMLOGAppLinkTeamType): this;

	initWithAppLinkUser(appLinkUser: DBTEAMLOGAppLinkUserType): this;

	initWithAppUnlinkTeam(appUnlinkTeam: DBTEAMLOGAppUnlinkTeamType): this;

	initWithAppUnlinkUser(appUnlinkUser: DBTEAMLOGAppUnlinkUserType): this;

	initWithCameraUploadsPolicyChanged(cameraUploadsPolicyChanged: DBTEAMLOGCameraUploadsPolicyChangedType): this;

	initWithCollectionShare(collectionShare: DBTEAMLOGCollectionShareType): this;

	initWithCreateFolder(createFolder: DBTEAMLOGCreateFolderType): this;

	initWithDataPlacementRestrictionChangePolicy(dataPlacementRestrictionChangePolicy: DBTEAMLOGDataPlacementRestrictionChangePolicyType): this;

	initWithDataPlacementRestrictionSatisfyPolicy(dataPlacementRestrictionSatisfyPolicy: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType): this;

	initWithDeviceApprovalsChangeDesktopPolicy(deviceApprovalsChangeDesktopPolicy: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType): this;

	initWithDeviceApprovalsChangeMobilePolicy(deviceApprovalsChangeMobilePolicy: DBTEAMLOGDeviceApprovalsChangeMobilePolicyType): this;

	initWithDeviceApprovalsChangeOverageAction(deviceApprovalsChangeOverageAction: DBTEAMLOGDeviceApprovalsChangeOverageActionType): this;

	initWithDeviceApprovalsChangeUnlinkAction(deviceApprovalsChangeUnlinkAction: DBTEAMLOGDeviceApprovalsChangeUnlinkActionType): this;

	initWithDeviceChangeIpDesktop(deviceChangeIpDesktop: DBTEAMLOGDeviceChangeIpDesktopType): this;

	initWithDeviceChangeIpMobile(deviceChangeIpMobile: DBTEAMLOGDeviceChangeIpMobileType): this;

	initWithDeviceChangeIpWeb(deviceChangeIpWeb: DBTEAMLOGDeviceChangeIpWebType): this;

	initWithDeviceDeleteOnUnlinkFail(deviceDeleteOnUnlinkFail: DBTEAMLOGDeviceDeleteOnUnlinkFailType): this;

	initWithDeviceDeleteOnUnlinkSuccess(deviceDeleteOnUnlinkSuccess: DBTEAMLOGDeviceDeleteOnUnlinkSuccessType): this;

	initWithDeviceLinkFail(deviceLinkFail: DBTEAMLOGDeviceLinkFailType): this;

	initWithDeviceLinkSuccess(deviceLinkSuccess: DBTEAMLOGDeviceLinkSuccessType): this;

	initWithDeviceManagementDisabled(deviceManagementDisabled: DBTEAMLOGDeviceManagementDisabledType): this;

	initWithDeviceManagementEnabled(deviceManagementEnabled: DBTEAMLOGDeviceManagementEnabledType): this;

	initWithDeviceUnlink(deviceUnlink: DBTEAMLOGDeviceUnlinkType): this;

	initWithDirectoryRestrictionsAddMembers(directoryRestrictionsAddMembers: DBTEAMLOGDirectoryRestrictionsAddMembersType): this;

	initWithDirectoryRestrictionsRemoveMembers(directoryRestrictionsRemoveMembers: DBTEAMLOGDirectoryRestrictionsRemoveMembersType): this;

	initWithDisabledDomainInvites(disabledDomainInvites: DBTEAMLOGDisabledDomainInvitesType): this;

	initWithDomainInvitesApproveRequestToJoinTeam(domainInvitesApproveRequestToJoinTeam: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType): this;

	initWithDomainInvitesDeclineRequestToJoinTeam(domainInvitesDeclineRequestToJoinTeam: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType): this;

	initWithDomainInvitesEmailExistingUsers(domainInvitesEmailExistingUsers: DBTEAMLOGDomainInvitesEmailExistingUsersType): this;

	initWithDomainInvitesRequestToJoinTeam(domainInvitesRequestToJoinTeam: DBTEAMLOGDomainInvitesRequestToJoinTeamType): this;

	initWithDomainInvitesSetInviteNewUserPrefToNo(domainInvitesSetInviteNewUserPrefToNo: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType): this;

	initWithDomainInvitesSetInviteNewUserPrefToYes(domainInvitesSetInviteNewUserPrefToYes: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType): this;

	initWithDomainVerificationAddDomainFail(domainVerificationAddDomainFail: DBTEAMLOGDomainVerificationAddDomainFailType): this;

	initWithDomainVerificationAddDomainSuccess(domainVerificationAddDomainSuccess: DBTEAMLOGDomainVerificationAddDomainSuccessType): this;

	initWithDomainVerificationRemoveDomain(domainVerificationRemoveDomain: DBTEAMLOGDomainVerificationRemoveDomainType): this;

	initWithEmmAddException(emmAddException: DBTEAMLOGEmmAddExceptionType): this;

	initWithEmmChangePolicy(emmChangePolicy: DBTEAMLOGEmmChangePolicyType): this;

	initWithEmmCreateExceptionsReport(emmCreateExceptionsReport: DBTEAMLOGEmmCreateExceptionsReportType): this;

	initWithEmmCreateUsageReport(emmCreateUsageReport: DBTEAMLOGEmmCreateUsageReportType): this;

	initWithEmmError(emmError: DBTEAMLOGEmmErrorType): this;

	initWithEmmRefreshAuthToken(emmRefreshAuthToken: DBTEAMLOGEmmRefreshAuthTokenType): this;

	initWithEmmRemoveException(emmRemoveException: DBTEAMLOGEmmRemoveExceptionType): this;

	initWithEnabledDomainInvites(enabledDomainInvites: DBTEAMLOGEnabledDomainInvitesType): this;

	initWithExportMembersReport(exportMembersReport: DBTEAMLOGExportMembersReportType): this;

	initWithExtendedVersionHistoryChangePolicy(extendedVersionHistoryChangePolicy: DBTEAMLOGExtendedVersionHistoryChangePolicyType): this;

	initWithFileAdd(fileAdd: DBTEAMLOGFileAddType): this;

	initWithFileAddComment(fileAddComment: DBTEAMLOGFileAddCommentType): this;

	initWithFileChangeCommentSubscription(fileChangeCommentSubscription: DBTEAMLOGFileChangeCommentSubscriptionType): this;

	initWithFileCommentsChangePolicy(fileCommentsChangePolicy: DBTEAMLOGFileCommentsChangePolicyType): this;

	initWithFileCopy(fileCopy: DBTEAMLOGFileCopyType): this;

	initWithFileDelete(fileDelete: DBTEAMLOGFileDeleteType): this;

	initWithFileDeleteComment(fileDeleteComment: DBTEAMLOGFileDeleteCommentType): this;

	initWithFileDownload(fileDownload: DBTEAMLOGFileDownloadType): this;

	initWithFileEdit(fileEdit: DBTEAMLOGFileEditType): this;

	initWithFileEditComment(fileEditComment: DBTEAMLOGFileEditCommentType): this;

	initWithFileGetCopyReference(fileGetCopyReference: DBTEAMLOGFileGetCopyReferenceType): this;

	initWithFileLikeComment(fileLikeComment: DBTEAMLOGFileLikeCommentType): this;

	initWithFileMove(fileMove: DBTEAMLOGFileMoveType): this;

	initWithFilePermanentlyDelete(filePermanentlyDelete: DBTEAMLOGFilePermanentlyDeleteType): this;

	initWithFilePreview(filePreview: DBTEAMLOGFilePreviewType): this;

	initWithFileRename(fileRename: DBTEAMLOGFileRenameType): this;

	initWithFileRequestChange(fileRequestChange: DBTEAMLOGFileRequestChangeType): this;

	initWithFileRequestClose(fileRequestClose: DBTEAMLOGFileRequestCloseType): this;

	initWithFileRequestCreate(fileRequestCreate: DBTEAMLOGFileRequestCreateType): this;

	initWithFileRequestReceiveFile(fileRequestReceiveFile: DBTEAMLOGFileRequestReceiveFileType): this;

	initWithFileRequestsChangePolicy(fileRequestsChangePolicy: DBTEAMLOGFileRequestsChangePolicyType): this;

	initWithFileRequestsEmailsEnabled(fileRequestsEmailsEnabled: DBTEAMLOGFileRequestsEmailsEnabledType): this;

	initWithFileRequestsEmailsRestrictedToTeamOnly(fileRequestsEmailsRestrictedToTeamOnly: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType): this;

	initWithFileResolveComment(fileResolveComment: DBTEAMLOGFileResolveCommentType): this;

	initWithFileRestore(fileRestore: DBTEAMLOGFileRestoreType): this;

	initWithFileRevert(fileRevert: DBTEAMLOGFileRevertType): this;

	initWithFileRollbackChanges(fileRollbackChanges: DBTEAMLOGFileRollbackChangesType): this;

	initWithFileSaveCopyReference(fileSaveCopyReference: DBTEAMLOGFileSaveCopyReferenceType): this;

	initWithFileUnlikeComment(fileUnlikeComment: DBTEAMLOGFileUnlikeCommentType): this;

	initWithFileUnresolveComment(fileUnresolveComment: DBTEAMLOGFileUnresolveCommentType): this;

	initWithGoogleSsoChangePolicy(googleSsoChangePolicy: DBTEAMLOGGoogleSsoChangePolicyType): this;

	initWithGroupAddExternalId(groupAddExternalId: DBTEAMLOGGroupAddExternalIdType): this;

	initWithGroupAddMember(groupAddMember: DBTEAMLOGGroupAddMemberType): this;

	initWithGroupChangeExternalId(groupChangeExternalId: DBTEAMLOGGroupChangeExternalIdType): this;

	initWithGroupChangeManagementType(groupChangeManagementType: DBTEAMLOGGroupChangeManagementTypeType): this;

	initWithGroupChangeMemberRole(groupChangeMemberRole: DBTEAMLOGGroupChangeMemberRoleType): this;

	initWithGroupCreate(groupCreate: DBTEAMLOGGroupCreateType): this;

	initWithGroupDelete(groupDelete: DBTEAMLOGGroupDeleteType): this;

	initWithGroupDescriptionUpdated(groupDescriptionUpdated: DBTEAMLOGGroupDescriptionUpdatedType): this;

	initWithGroupJoinPolicyUpdated(groupJoinPolicyUpdated: DBTEAMLOGGroupJoinPolicyUpdatedType): this;

	initWithGroupMoved(groupMoved: DBTEAMLOGGroupMovedType): this;

	initWithGroupRemoveExternalId(groupRemoveExternalId: DBTEAMLOGGroupRemoveExternalIdType): this;

	initWithGroupRemoveMember(groupRemoveMember: DBTEAMLOGGroupRemoveMemberType): this;

	initWithGroupRename(groupRename: DBTEAMLOGGroupRenameType): this;

	initWithGroupUserManagementChangePolicy(groupUserManagementChangePolicy: DBTEAMLOGGroupUserManagementChangePolicyType): this;

	initWithLoginFail(loginFail: DBTEAMLOGLoginFailType): this;

	initWithLoginSuccess(loginSuccess: DBTEAMLOGLoginSuccessType): this;

	initWithLogout(logout: DBTEAMLOGLogoutType): this;

	initWithMemberAddName(memberAddName: DBTEAMLOGMemberAddNameType): this;

	initWithMemberChangeAdminRole(memberChangeAdminRole: DBTEAMLOGMemberChangeAdminRoleType): this;

	initWithMemberChangeEmail(memberChangeEmail: DBTEAMLOGMemberChangeEmailType): this;

	initWithMemberChangeMembershipType(memberChangeMembershipType: DBTEAMLOGMemberChangeMembershipTypeType): this;

	initWithMemberChangeName(memberChangeName: DBTEAMLOGMemberChangeNameType): this;

	initWithMemberChangeStatus(memberChangeStatus: DBTEAMLOGMemberChangeStatusType): this;

	initWithMemberDeleteManualContacts(memberDeleteManualContacts: DBTEAMLOGMemberDeleteManualContactsType): this;

	initWithMemberPermanentlyDeleteAccountContents(memberPermanentlyDeleteAccountContents: DBTEAMLOGMemberPermanentlyDeleteAccountContentsType): this;

	initWithMemberRequestsChangePolicy(memberRequestsChangePolicy: DBTEAMLOGMemberRequestsChangePolicyType): this;

	initWithMemberSpaceLimitsAddCustomQuota(memberSpaceLimitsAddCustomQuota: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType): this;

	initWithMemberSpaceLimitsAddException(memberSpaceLimitsAddException: DBTEAMLOGMemberSpaceLimitsAddExceptionType): this;

	initWithMemberSpaceLimitsChangeCapsTypePolicy(memberSpaceLimitsChangeCapsTypePolicy: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType): this;

	initWithMemberSpaceLimitsChangeCustomQuota(memberSpaceLimitsChangeCustomQuota: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType): this;

	initWithMemberSpaceLimitsChangePolicy(memberSpaceLimitsChangePolicy: DBTEAMLOGMemberSpaceLimitsChangePolicyType): this;

	initWithMemberSpaceLimitsChangeStatus(memberSpaceLimitsChangeStatus: DBTEAMLOGMemberSpaceLimitsChangeStatusType): this;

	initWithMemberSpaceLimitsRemoveCustomQuota(memberSpaceLimitsRemoveCustomQuota: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType): this;

	initWithMemberSpaceLimitsRemoveException(memberSpaceLimitsRemoveException: DBTEAMLOGMemberSpaceLimitsRemoveExceptionType): this;

	initWithMemberSuggest(memberSuggest: DBTEAMLOGMemberSuggestType): this;

	initWithMemberSuggestionsChangePolicy(memberSuggestionsChangePolicy: DBTEAMLOGMemberSuggestionsChangePolicyType): this;

	initWithMemberTransferAccountContents(memberTransferAccountContents: DBTEAMLOGMemberTransferAccountContentsType): this;

	initWithMicrosoftOfficeAddinChangePolicy(microsoftOfficeAddinChangePolicy: DBTEAMLOGMicrosoftOfficeAddinChangePolicyType): this;

	initWithNetworkControlChangePolicy(networkControlChangePolicy: DBTEAMLOGNetworkControlChangePolicyType): this;

	initWithNoteAclInviteOnly(noteAclInviteOnly: DBTEAMLOGNoteAclInviteOnlyType): this;

	initWithNoteAclLink(noteAclLink: DBTEAMLOGNoteAclLinkType): this;

	initWithNoteAclTeamLink(noteAclTeamLink: DBTEAMLOGNoteAclTeamLinkType): this;

	initWithNoteShareReceive(noteShareReceive: DBTEAMLOGNoteShareReceiveType): this;

	initWithNoteShared(noteShared: DBTEAMLOGNoteSharedType): this;

	initWithOpenNoteShared(openNoteShared: DBTEAMLOGOpenNoteSharedType): this;

	initWithOther(): this;

	initWithPaperAdminExportStart(paperAdminExportStart: DBTEAMLOGPaperAdminExportStartType): this;

	initWithPaperChangeDeploymentPolicy(paperChangeDeploymentPolicy: DBTEAMLOGPaperChangeDeploymentPolicyType): this;

	initWithPaperChangeMemberLinkPolicy(paperChangeMemberLinkPolicy: DBTEAMLOGPaperChangeMemberLinkPolicyType): this;

	initWithPaperChangeMemberPolicy(paperChangeMemberPolicy: DBTEAMLOGPaperChangeMemberPolicyType): this;

	initWithPaperChangePolicy(paperChangePolicy: DBTEAMLOGPaperChangePolicyType): this;

	initWithPaperContentAddMember(paperContentAddMember: DBTEAMLOGPaperContentAddMemberType): this;

	initWithPaperContentAddToFolder(paperContentAddToFolder: DBTEAMLOGPaperContentAddToFolderType): this;

	initWithPaperContentArchive(paperContentArchive: DBTEAMLOGPaperContentArchiveType): this;

	initWithPaperContentCreate(paperContentCreate: DBTEAMLOGPaperContentCreateType): this;

	initWithPaperContentPermanentlyDelete(paperContentPermanentlyDelete: DBTEAMLOGPaperContentPermanentlyDeleteType): this;

	initWithPaperContentRemoveFromFolder(paperContentRemoveFromFolder: DBTEAMLOGPaperContentRemoveFromFolderType): this;

	initWithPaperContentRemoveMember(paperContentRemoveMember: DBTEAMLOGPaperContentRemoveMemberType): this;

	initWithPaperContentRename(paperContentRename: DBTEAMLOGPaperContentRenameType): this;

	initWithPaperContentRestore(paperContentRestore: DBTEAMLOGPaperContentRestoreType): this;

	initWithPaperDocAddComment(paperDocAddComment: DBTEAMLOGPaperDocAddCommentType): this;

	initWithPaperDocChangeMemberRole(paperDocChangeMemberRole: DBTEAMLOGPaperDocChangeMemberRoleType): this;

	initWithPaperDocChangeSharingPolicy(paperDocChangeSharingPolicy: DBTEAMLOGPaperDocChangeSharingPolicyType): this;

	initWithPaperDocChangeSubscription(paperDocChangeSubscription: DBTEAMLOGPaperDocChangeSubscriptionType): this;

	initWithPaperDocDeleteComment(paperDocDeleteComment: DBTEAMLOGPaperDocDeleteCommentType): this;

	initWithPaperDocDeleted(paperDocDeleted: DBTEAMLOGPaperDocDeletedType): this;

	initWithPaperDocDownload(paperDocDownload: DBTEAMLOGPaperDocDownloadType): this;

	initWithPaperDocEdit(paperDocEdit: DBTEAMLOGPaperDocEditType): this;

	initWithPaperDocEditComment(paperDocEditComment: DBTEAMLOGPaperDocEditCommentType): this;

	initWithPaperDocFollowed(paperDocFollowed: DBTEAMLOGPaperDocFollowedType): this;

	initWithPaperDocMention(paperDocMention: DBTEAMLOGPaperDocMentionType): this;

	initWithPaperDocOwnershipChanged(paperDocOwnershipChanged: DBTEAMLOGPaperDocOwnershipChangedType): this;

	initWithPaperDocRequestAccess(paperDocRequestAccess: DBTEAMLOGPaperDocRequestAccessType): this;

	initWithPaperDocResolveComment(paperDocResolveComment: DBTEAMLOGPaperDocResolveCommentType): this;

	initWithPaperDocRevert(paperDocRevert: DBTEAMLOGPaperDocRevertType): this;

	initWithPaperDocSlackShare(paperDocSlackShare: DBTEAMLOGPaperDocSlackShareType): this;

	initWithPaperDocTeamInvite(paperDocTeamInvite: DBTEAMLOGPaperDocTeamInviteType): this;

	initWithPaperDocTrashed(paperDocTrashed: DBTEAMLOGPaperDocTrashedType): this;

	initWithPaperDocUnresolveComment(paperDocUnresolveComment: DBTEAMLOGPaperDocUnresolveCommentType): this;

	initWithPaperDocUntrashed(paperDocUntrashed: DBTEAMLOGPaperDocUntrashedType): this;

	initWithPaperDocView(paperDocView: DBTEAMLOGPaperDocViewType): this;

	initWithPaperEnabledUsersGroupAddition(paperEnabledUsersGroupAddition: DBTEAMLOGPaperEnabledUsersGroupAdditionType): this;

	initWithPaperEnabledUsersGroupRemoval(paperEnabledUsersGroupRemoval: DBTEAMLOGPaperEnabledUsersGroupRemovalType): this;

	initWithPaperExternalViewAllow(paperExternalViewAllow: DBTEAMLOGPaperExternalViewAllowType): this;

	initWithPaperExternalViewDefaultTeam(paperExternalViewDefaultTeam: DBTEAMLOGPaperExternalViewDefaultTeamType): this;

	initWithPaperExternalViewForbid(paperExternalViewForbid: DBTEAMLOGPaperExternalViewForbidType): this;

	initWithPaperFolderChangeSubscription(paperFolderChangeSubscription: DBTEAMLOGPaperFolderChangeSubscriptionType): this;

	initWithPaperFolderDeleted(paperFolderDeleted: DBTEAMLOGPaperFolderDeletedType): this;

	initWithPaperFolderFollowed(paperFolderFollowed: DBTEAMLOGPaperFolderFollowedType): this;

	initWithPaperFolderTeamInvite(paperFolderTeamInvite: DBTEAMLOGPaperFolderTeamInviteType): this;

	initWithPasswordChange(passwordChange: DBTEAMLOGPasswordChangeType): this;

	initWithPasswordReset(passwordReset: DBTEAMLOGPasswordResetType): this;

	initWithPasswordResetAll(passwordResetAll: DBTEAMLOGPasswordResetAllType): this;

	initWithPermanentDeleteChangePolicy(permanentDeleteChangePolicy: DBTEAMLOGPermanentDeleteChangePolicyType): this;

	initWithResellerSupportSessionEnd(resellerSupportSessionEnd: DBTEAMLOGResellerSupportSessionEndType): this;

	initWithResellerSupportSessionStart(resellerSupportSessionStart: DBTEAMLOGResellerSupportSessionStartType): this;

	initWithSecondaryMailsPolicyChanged(secondaryMailsPolicyChanged: DBTEAMLOGSecondaryMailsPolicyChangedType): this;

	initWithSfAddGroup(sfAddGroup: DBTEAMLOGSfAddGroupType): this;

	initWithSfAllowNonMembersToViewSharedLinks(sfAllowNonMembersToViewSharedLinks: DBTEAMLOGSfAllowNonMembersToViewSharedLinksType): this;

	initWithSfExternalInviteWarn(sfExternalInviteWarn: DBTEAMLOGSfExternalInviteWarnType): this;

	initWithSfFbInvite(sfFbInvite: DBTEAMLOGSfFbInviteType): this;

	initWithSfFbInviteChangeRole(sfFbInviteChangeRole: DBTEAMLOGSfFbInviteChangeRoleType): this;

	initWithSfFbUninvite(sfFbUninvite: DBTEAMLOGSfFbUninviteType): this;

	initWithSfInviteGroup(sfInviteGroup: DBTEAMLOGSfInviteGroupType): this;

	initWithSfTeamGrantAccess(sfTeamGrantAccess: DBTEAMLOGSfTeamGrantAccessType): this;

	initWithSfTeamInvite(sfTeamInvite: DBTEAMLOGSfTeamInviteType): this;

	initWithSfTeamInviteChangeRole(sfTeamInviteChangeRole: DBTEAMLOGSfTeamInviteChangeRoleType): this;

	initWithSfTeamJoin(sfTeamJoin: DBTEAMLOGSfTeamJoinType): this;

	initWithSfTeamJoinFromOobLink(sfTeamJoinFromOobLink: DBTEAMLOGSfTeamJoinFromOobLinkType): this;

	initWithSfTeamUninvite(sfTeamUninvite: DBTEAMLOGSfTeamUninviteType): this;

	initWithSharedContentAddInvitees(sharedContentAddInvitees: DBTEAMLOGSharedContentAddInviteesType): this;

	initWithSharedContentAddLinkExpiry(sharedContentAddLinkExpiry: DBTEAMLOGSharedContentAddLinkExpiryType): this;

	initWithSharedContentAddLinkPassword(sharedContentAddLinkPassword: DBTEAMLOGSharedContentAddLinkPasswordType): this;

	initWithSharedContentAddMember(sharedContentAddMember: DBTEAMLOGSharedContentAddMemberType): this;

	initWithSharedContentChangeDownloadsPolicy(sharedContentChangeDownloadsPolicy: DBTEAMLOGSharedContentChangeDownloadsPolicyType): this;

	initWithSharedContentChangeInviteeRole(sharedContentChangeInviteeRole: DBTEAMLOGSharedContentChangeInviteeRoleType): this;

	initWithSharedContentChangeLinkAudience(sharedContentChangeLinkAudience: DBTEAMLOGSharedContentChangeLinkAudienceType): this;

	initWithSharedContentChangeLinkExpiry(sharedContentChangeLinkExpiry: DBTEAMLOGSharedContentChangeLinkExpiryType): this;

	initWithSharedContentChangeLinkPassword(sharedContentChangeLinkPassword: DBTEAMLOGSharedContentChangeLinkPasswordType): this;

	initWithSharedContentChangeMemberRole(sharedContentChangeMemberRole: DBTEAMLOGSharedContentChangeMemberRoleType): this;

	initWithSharedContentChangeViewerInfoPolicy(sharedContentChangeViewerInfoPolicy: DBTEAMLOGSharedContentChangeViewerInfoPolicyType): this;

	initWithSharedContentClaimInvitation(sharedContentClaimInvitation: DBTEAMLOGSharedContentClaimInvitationType): this;

	initWithSharedContentCopy(sharedContentCopy: DBTEAMLOGSharedContentCopyType): this;

	initWithSharedContentDownload(sharedContentDownload: DBTEAMLOGSharedContentDownloadType): this;

	initWithSharedContentRelinquishMembership(sharedContentRelinquishMembership: DBTEAMLOGSharedContentRelinquishMembershipType): this;

	initWithSharedContentRemoveInvitees(sharedContentRemoveInvitees: DBTEAMLOGSharedContentRemoveInviteesType): this;

	initWithSharedContentRemoveLinkExpiry(sharedContentRemoveLinkExpiry: DBTEAMLOGSharedContentRemoveLinkExpiryType): this;

	initWithSharedContentRemoveLinkPassword(sharedContentRemoveLinkPassword: DBTEAMLOGSharedContentRemoveLinkPasswordType): this;

	initWithSharedContentRemoveMember(sharedContentRemoveMember: DBTEAMLOGSharedContentRemoveMemberType): this;

	initWithSharedContentRequestAccess(sharedContentRequestAccess: DBTEAMLOGSharedContentRequestAccessType): this;

	initWithSharedContentUnshare(sharedContentUnshare: DBTEAMLOGSharedContentUnshareType): this;

	initWithSharedContentView(sharedContentView: DBTEAMLOGSharedContentViewType): this;

	initWithSharedFolderChangeLinkPolicy(sharedFolderChangeLinkPolicy: DBTEAMLOGSharedFolderChangeLinkPolicyType): this;

	initWithSharedFolderChangeMembersInheritancePolicy(sharedFolderChangeMembersInheritancePolicy: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType): this;

	initWithSharedFolderChangeMembersManagementPolicy(sharedFolderChangeMembersManagementPolicy: DBTEAMLOGSharedFolderChangeMembersManagementPolicyType): this;

	initWithSharedFolderChangeMembersPolicy(sharedFolderChangeMembersPolicy: DBTEAMLOGSharedFolderChangeMembersPolicyType): this;

	initWithSharedFolderCreate(sharedFolderCreate: DBTEAMLOGSharedFolderCreateType): this;

	initWithSharedFolderDeclineInvitation(sharedFolderDeclineInvitation: DBTEAMLOGSharedFolderDeclineInvitationType): this;

	initWithSharedFolderMount(sharedFolderMount: DBTEAMLOGSharedFolderMountType): this;

	initWithSharedFolderNest(sharedFolderNest: DBTEAMLOGSharedFolderNestType): this;

	initWithSharedFolderTransferOwnership(sharedFolderTransferOwnership: DBTEAMLOGSharedFolderTransferOwnershipType): this;

	initWithSharedFolderUnmount(sharedFolderUnmount: DBTEAMLOGSharedFolderUnmountType): this;

	initWithSharedLinkAddExpiry(sharedLinkAddExpiry: DBTEAMLOGSharedLinkAddExpiryType): this;

	initWithSharedLinkChangeExpiry(sharedLinkChangeExpiry: DBTEAMLOGSharedLinkChangeExpiryType): this;

	initWithSharedLinkChangeVisibility(sharedLinkChangeVisibility: DBTEAMLOGSharedLinkChangeVisibilityType): this;

	initWithSharedLinkCopy(sharedLinkCopy: DBTEAMLOGSharedLinkCopyType): this;

	initWithSharedLinkCreate(sharedLinkCreate: DBTEAMLOGSharedLinkCreateType): this;

	initWithSharedLinkDisable(sharedLinkDisable: DBTEAMLOGSharedLinkDisableType): this;

	initWithSharedLinkDownload(sharedLinkDownload: DBTEAMLOGSharedLinkDownloadType): this;

	initWithSharedLinkRemoveExpiry(sharedLinkRemoveExpiry: DBTEAMLOGSharedLinkRemoveExpiryType): this;

	initWithSharedLinkShare(sharedLinkShare: DBTEAMLOGSharedLinkShareType): this;

	initWithSharedLinkView(sharedLinkView: DBTEAMLOGSharedLinkViewType): this;

	initWithSharedNoteOpened(sharedNoteOpened: DBTEAMLOGSharedNoteOpenedType): this;

	initWithSharingChangeFolderJoinPolicy(sharingChangeFolderJoinPolicy: DBTEAMLOGSharingChangeFolderJoinPolicyType): this;

	initWithSharingChangeLinkPolicy(sharingChangeLinkPolicy: DBTEAMLOGSharingChangeLinkPolicyType): this;

	initWithSharingChangeMemberPolicy(sharingChangeMemberPolicy: DBTEAMLOGSharingChangeMemberPolicyType): this;

	initWithShmodelGroupShare(shmodelGroupShare: DBTEAMLOGShmodelGroupShareType): this;

	initWithShowcaseAccessGranted(showcaseAccessGranted: DBTEAMLOGShowcaseAccessGrantedType): this;

	initWithShowcaseAddMember(showcaseAddMember: DBTEAMLOGShowcaseAddMemberType): this;

	initWithShowcaseArchived(showcaseArchived: DBTEAMLOGShowcaseArchivedType): this;

	initWithShowcaseChangeDownloadPolicy(showcaseChangeDownloadPolicy: DBTEAMLOGShowcaseChangeDownloadPolicyType): this;

	initWithShowcaseChangeEnabledPolicy(showcaseChangeEnabledPolicy: DBTEAMLOGShowcaseChangeEnabledPolicyType): this;

	initWithShowcaseChangeExternalSharingPolicy(showcaseChangeExternalSharingPolicy: DBTEAMLOGShowcaseChangeExternalSharingPolicyType): this;

	initWithShowcaseCreated(showcaseCreated: DBTEAMLOGShowcaseCreatedType): this;

	initWithShowcaseDeleteComment(showcaseDeleteComment: DBTEAMLOGShowcaseDeleteCommentType): this;

	initWithShowcaseEditComment(showcaseEditComment: DBTEAMLOGShowcaseEditCommentType): this;

	initWithShowcaseEdited(showcaseEdited: DBTEAMLOGShowcaseEditedType): this;

	initWithShowcaseFileAdded(showcaseFileAdded: DBTEAMLOGShowcaseFileAddedType): this;

	initWithShowcaseFileDownload(showcaseFileDownload: DBTEAMLOGShowcaseFileDownloadType): this;

	initWithShowcaseFileRemoved(showcaseFileRemoved: DBTEAMLOGShowcaseFileRemovedType): this;

	initWithShowcaseFileView(showcaseFileView: DBTEAMLOGShowcaseFileViewType): this;

	initWithShowcasePermanentlyDeleted(showcasePermanentlyDeleted: DBTEAMLOGShowcasePermanentlyDeletedType): this;

	initWithShowcasePostComment(showcasePostComment: DBTEAMLOGShowcasePostCommentType): this;

	initWithShowcaseRemoveMember(showcaseRemoveMember: DBTEAMLOGShowcaseRemoveMemberType): this;

	initWithShowcaseRenamed(showcaseRenamed: DBTEAMLOGShowcaseRenamedType): this;

	initWithShowcaseRequestAccess(showcaseRequestAccess: DBTEAMLOGShowcaseRequestAccessType): this;

	initWithShowcaseResolveComment(showcaseResolveComment: DBTEAMLOGShowcaseResolveCommentType): this;

	initWithShowcaseRestored(showcaseRestored: DBTEAMLOGShowcaseRestoredType): this;

	initWithShowcaseTrashed(showcaseTrashed: DBTEAMLOGShowcaseTrashedType): this;

	initWithShowcaseTrashedDeprecated(showcaseTrashedDeprecated: DBTEAMLOGShowcaseTrashedDeprecatedType): this;

	initWithShowcaseUnresolveComment(showcaseUnresolveComment: DBTEAMLOGShowcaseUnresolveCommentType): this;

	initWithShowcaseUntrashed(showcaseUntrashed: DBTEAMLOGShowcaseUntrashedType): this;

	initWithShowcaseUntrashedDeprecated(showcaseUntrashedDeprecated: DBTEAMLOGShowcaseUntrashedDeprecatedType): this;

	initWithShowcaseView(showcaseView: DBTEAMLOGShowcaseViewType): this;

	initWithSignInAsSessionEnd(signInAsSessionEnd: DBTEAMLOGSignInAsSessionEndType): this;

	initWithSignInAsSessionStart(signInAsSessionStart: DBTEAMLOGSignInAsSessionStartType): this;

	initWithSmartSyncChangePolicy(smartSyncChangePolicy: DBTEAMLOGSmartSyncChangePolicyType): this;

	initWithSmartSyncCreateAdminPrivilegeReport(smartSyncCreateAdminPrivilegeReport: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType): this;

	initWithSmartSyncNotOptOut(smartSyncNotOptOut: DBTEAMLOGSmartSyncNotOptOutType): this;

	initWithSmartSyncOptOut(smartSyncOptOut: DBTEAMLOGSmartSyncOptOutType): this;

	initWithSsoAddCert(ssoAddCert: DBTEAMLOGSsoAddCertType): this;

	initWithSsoAddLoginUrl(ssoAddLoginUrl: DBTEAMLOGSsoAddLoginUrlType): this;

	initWithSsoAddLogoutUrl(ssoAddLogoutUrl: DBTEAMLOGSsoAddLogoutUrlType): this;

	initWithSsoChangeCert(ssoChangeCert: DBTEAMLOGSsoChangeCertType): this;

	initWithSsoChangeLoginUrl(ssoChangeLoginUrl: DBTEAMLOGSsoChangeLoginUrlType): this;

	initWithSsoChangeLogoutUrl(ssoChangeLogoutUrl: DBTEAMLOGSsoChangeLogoutUrlType): this;

	initWithSsoChangePolicy(ssoChangePolicy: DBTEAMLOGSsoChangePolicyType): this;

	initWithSsoChangeSamlIdentityMode(ssoChangeSamlIdentityMode: DBTEAMLOGSsoChangeSamlIdentityModeType): this;

	initWithSsoError(ssoError: DBTEAMLOGSsoErrorType): this;

	initWithSsoRemoveCert(ssoRemoveCert: DBTEAMLOGSsoRemoveCertType): this;

	initWithSsoRemoveLoginUrl(ssoRemoveLoginUrl: DBTEAMLOGSsoRemoveLoginUrlType): this;

	initWithSsoRemoveLogoutUrl(ssoRemoveLogoutUrl: DBTEAMLOGSsoRemoveLogoutUrlType): this;

	initWithTeamActivityCreateReport(teamActivityCreateReport: DBTEAMLOGTeamActivityCreateReportType): this;

	initWithTeamFolderChangeStatus(teamFolderChangeStatus: DBTEAMLOGTeamFolderChangeStatusType): this;

	initWithTeamFolderCreate(teamFolderCreate: DBTEAMLOGTeamFolderCreateType): this;

	initWithTeamFolderDowngrade(teamFolderDowngrade: DBTEAMLOGTeamFolderDowngradeType): this;

	initWithTeamFolderPermanentlyDelete(teamFolderPermanentlyDelete: DBTEAMLOGTeamFolderPermanentlyDeleteType): this;

	initWithTeamFolderRename(teamFolderRename: DBTEAMLOGTeamFolderRenameType): this;

	initWithTeamMergeFrom(teamMergeFrom: DBTEAMLOGTeamMergeFromType): this;

	initWithTeamMergeTo(teamMergeTo: DBTEAMLOGTeamMergeToType): this;

	initWithTeamProfileAddLogo(teamProfileAddLogo: DBTEAMLOGTeamProfileAddLogoType): this;

	initWithTeamProfileChangeDefaultLanguage(teamProfileChangeDefaultLanguage: DBTEAMLOGTeamProfileChangeDefaultLanguageType): this;

	initWithTeamProfileChangeLogo(teamProfileChangeLogo: DBTEAMLOGTeamProfileChangeLogoType): this;

	initWithTeamProfileChangeName(teamProfileChangeName: DBTEAMLOGTeamProfileChangeNameType): this;

	initWithTeamProfileRemoveLogo(teamProfileRemoveLogo: DBTEAMLOGTeamProfileRemoveLogoType): this;

	initWithTeamSelectiveSyncPolicyChanged(teamSelectiveSyncPolicyChanged: DBTEAMLOGTeamSelectiveSyncPolicyChangedType): this;

	initWithTeamSelectiveSyncSettingsChanged(teamSelectiveSyncSettingsChanged: DBTEAMLOGTeamSelectiveSyncSettingsChangedType): this;

	initWithTfaAddBackupPhone(tfaAddBackupPhone: DBTEAMLOGTfaAddBackupPhoneType): this;

	initWithTfaAddSecurityKey(tfaAddSecurityKey: DBTEAMLOGTfaAddSecurityKeyType): this;

	initWithTfaChangeBackupPhone(tfaChangeBackupPhone: DBTEAMLOGTfaChangeBackupPhoneType): this;

	initWithTfaChangePolicy(tfaChangePolicy: DBTEAMLOGTfaChangePolicyType): this;

	initWithTfaChangeStatus(tfaChangeStatus: DBTEAMLOGTfaChangeStatusType): this;

	initWithTfaRemoveBackupPhone(tfaRemoveBackupPhone: DBTEAMLOGTfaRemoveBackupPhoneType): this;

	initWithTfaRemoveSecurityKey(tfaRemoveSecurityKey: DBTEAMLOGTfaRemoveSecurityKeyType): this;

	initWithTfaReset(tfaReset: DBTEAMLOGTfaResetType): this;

	initWithTwoAccountChangePolicy(twoAccountChangePolicy: DBTEAMLOGTwoAccountChangePolicyType): this;

	initWithViewerInfoPolicyChanged(viewerInfoPolicyChanged: DBTEAMLOGViewerInfoPolicyChangedType): this;

	initWithWebSessionsChangeFixedLengthPolicy(webSessionsChangeFixedLengthPolicy: DBTEAMLOGWebSessionsChangeFixedLengthPolicyType): this;

	initWithWebSessionsChangeIdleLengthPolicy(webSessionsChangeIdleLengthPolicy: DBTEAMLOGWebSessionsChangeIdleLengthPolicyType): this;

	isAccountCaptureChangeAvailability(): boolean;

	isAccountCaptureChangePolicy(): boolean;

	isAccountCaptureMigrateAccount(): boolean;

	isAccountCaptureNotificationEmailsSent(): boolean;

	isAccountCaptureRelinquishAccount(): boolean;

	isAllowDownloadDisabled(): boolean;

	isAllowDownloadEnabled(): boolean;

	isAppLinkTeam(): boolean;

	isAppLinkUser(): boolean;

	isAppUnlinkTeam(): boolean;

	isAppUnlinkUser(): boolean;

	isCameraUploadsPolicyChanged(): boolean;

	isCollectionShare(): boolean;

	isCreateFolder(): boolean;

	isDataPlacementRestrictionChangePolicy(): boolean;

	isDataPlacementRestrictionSatisfyPolicy(): boolean;

	isDeviceApprovalsChangeDesktopPolicy(): boolean;

	isDeviceApprovalsChangeMobilePolicy(): boolean;

	isDeviceApprovalsChangeOverageAction(): boolean;

	isDeviceApprovalsChangeUnlinkAction(): boolean;

	isDeviceChangeIpDesktop(): boolean;

	isDeviceChangeIpMobile(): boolean;

	isDeviceChangeIpWeb(): boolean;

	isDeviceDeleteOnUnlinkFail(): boolean;

	isDeviceDeleteOnUnlinkSuccess(): boolean;

	isDeviceLinkFail(): boolean;

	isDeviceLinkSuccess(): boolean;

	isDeviceManagementDisabled(): boolean;

	isDeviceManagementEnabled(): boolean;

	isDeviceUnlink(): boolean;

	isDirectoryRestrictionsAddMembers(): boolean;

	isDirectoryRestrictionsRemoveMembers(): boolean;

	isDisabledDomainInvites(): boolean;

	isDomainInvitesApproveRequestToJoinTeam(): boolean;

	isDomainInvitesDeclineRequestToJoinTeam(): boolean;

	isDomainInvitesEmailExistingUsers(): boolean;

	isDomainInvitesRequestToJoinTeam(): boolean;

	isDomainInvitesSetInviteNewUserPrefToNo(): boolean;

	isDomainInvitesSetInviteNewUserPrefToYes(): boolean;

	isDomainVerificationAddDomainFail(): boolean;

	isDomainVerificationAddDomainSuccess(): boolean;

	isDomainVerificationRemoveDomain(): boolean;

	isEmmAddException(): boolean;

	isEmmChangePolicy(): boolean;

	isEmmCreateExceptionsReport(): boolean;

	isEmmCreateUsageReport(): boolean;

	isEmmError(): boolean;

	isEmmRefreshAuthToken(): boolean;

	isEmmRemoveException(): boolean;

	isEnabledDomainInvites(): boolean;

	isEqual(object: any): boolean;

	isExportMembersReport(): boolean;

	isExtendedVersionHistoryChangePolicy(): boolean;

	isFileAdd(): boolean;

	isFileAddComment(): boolean;

	isFileChangeCommentSubscription(): boolean;

	isFileCommentsChangePolicy(): boolean;

	isFileCopy(): boolean;

	isFileDelete(): boolean;

	isFileDeleteComment(): boolean;

	isFileDownload(): boolean;

	isFileEdit(): boolean;

	isFileEditComment(): boolean;

	isFileGetCopyReference(): boolean;

	isFileLikeComment(): boolean;

	isFileMove(): boolean;

	isFilePermanentlyDelete(): boolean;

	isFilePreview(): boolean;

	isFileRename(): boolean;

	isFileRequestChange(): boolean;

	isFileRequestClose(): boolean;

	isFileRequestCreate(): boolean;

	isFileRequestReceiveFile(): boolean;

	isFileRequestsChangePolicy(): boolean;

	isFileRequestsEmailsEnabled(): boolean;

	isFileRequestsEmailsRestrictedToTeamOnly(): boolean;

	isFileResolveComment(): boolean;

	isFileRestore(): boolean;

	isFileRevert(): boolean;

	isFileRollbackChanges(): boolean;

	isFileSaveCopyReference(): boolean;

	isFileUnlikeComment(): boolean;

	isFileUnresolveComment(): boolean;

	isGoogleSsoChangePolicy(): boolean;

	isGroupAddExternalId(): boolean;

	isGroupAddMember(): boolean;

	isGroupChangeExternalId(): boolean;

	isGroupChangeManagementType(): boolean;

	isGroupChangeMemberRole(): boolean;

	isGroupCreate(): boolean;

	isGroupDelete(): boolean;

	isGroupDescriptionUpdated(): boolean;

	isGroupJoinPolicyUpdated(): boolean;

	isGroupMoved(): boolean;

	isGroupRemoveExternalId(): boolean;

	isGroupRemoveMember(): boolean;

	isGroupRename(): boolean;

	isGroupUserManagementChangePolicy(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLoginFail(): boolean;

	isLoginSuccess(): boolean;

	isLogout(): boolean;

	isMemberAddName(): boolean;

	isMemberChangeAdminRole(): boolean;

	isMemberChangeEmail(): boolean;

	isMemberChangeMembershipType(): boolean;

	isMemberChangeName(): boolean;

	isMemberChangeStatus(): boolean;

	isMemberDeleteManualContacts(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMemberPermanentlyDeleteAccountContents(): boolean;

	isMemberRequestsChangePolicy(): boolean;

	isMemberSpaceLimitsAddCustomQuota(): boolean;

	isMemberSpaceLimitsAddException(): boolean;

	isMemberSpaceLimitsChangeCapsTypePolicy(): boolean;

	isMemberSpaceLimitsChangeCustomQuota(): boolean;

	isMemberSpaceLimitsChangePolicy(): boolean;

	isMemberSpaceLimitsChangeStatus(): boolean;

	isMemberSpaceLimitsRemoveCustomQuota(): boolean;

	isMemberSpaceLimitsRemoveException(): boolean;

	isMemberSuggest(): boolean;

	isMemberSuggestionsChangePolicy(): boolean;

	isMemberTransferAccountContents(): boolean;

	isMicrosoftOfficeAddinChangePolicy(): boolean;

	isNetworkControlChangePolicy(): boolean;

	isNoteAclInviteOnly(): boolean;

	isNoteAclLink(): boolean;

	isNoteAclTeamLink(): boolean;

	isNoteShareReceive(): boolean;

	isNoteShared(): boolean;

	isOpenNoteShared(): boolean;

	isOther(): boolean;

	isPaperAdminExportStart(): boolean;

	isPaperChangeDeploymentPolicy(): boolean;

	isPaperChangeMemberLinkPolicy(): boolean;

	isPaperChangeMemberPolicy(): boolean;

	isPaperChangePolicy(): boolean;

	isPaperContentAddMember(): boolean;

	isPaperContentAddToFolder(): boolean;

	isPaperContentArchive(): boolean;

	isPaperContentCreate(): boolean;

	isPaperContentPermanentlyDelete(): boolean;

	isPaperContentRemoveFromFolder(): boolean;

	isPaperContentRemoveMember(): boolean;

	isPaperContentRename(): boolean;

	isPaperContentRestore(): boolean;

	isPaperDocAddComment(): boolean;

	isPaperDocChangeMemberRole(): boolean;

	isPaperDocChangeSharingPolicy(): boolean;

	isPaperDocChangeSubscription(): boolean;

	isPaperDocDeleteComment(): boolean;

	isPaperDocDeleted(): boolean;

	isPaperDocDownload(): boolean;

	isPaperDocEdit(): boolean;

	isPaperDocEditComment(): boolean;

	isPaperDocFollowed(): boolean;

	isPaperDocMention(): boolean;

	isPaperDocOwnershipChanged(): boolean;

	isPaperDocRequestAccess(): boolean;

	isPaperDocResolveComment(): boolean;

	isPaperDocRevert(): boolean;

	isPaperDocSlackShare(): boolean;

	isPaperDocTeamInvite(): boolean;

	isPaperDocTrashed(): boolean;

	isPaperDocUnresolveComment(): boolean;

	isPaperDocUntrashed(): boolean;

	isPaperDocView(): boolean;

	isPaperEnabledUsersGroupAddition(): boolean;

	isPaperEnabledUsersGroupRemoval(): boolean;

	isPaperExternalViewAllow(): boolean;

	isPaperExternalViewDefaultTeam(): boolean;

	isPaperExternalViewForbid(): boolean;

	isPaperFolderChangeSubscription(): boolean;

	isPaperFolderDeleted(): boolean;

	isPaperFolderFollowed(): boolean;

	isPaperFolderTeamInvite(): boolean;

	isPasswordChange(): boolean;

	isPasswordReset(): boolean;

	isPasswordResetAll(): boolean;

	isPermanentDeleteChangePolicy(): boolean;

	isResellerSupportSessionEnd(): boolean;

	isResellerSupportSessionStart(): boolean;

	isSecondaryMailsPolicyChanged(): boolean;

	isSfAddGroup(): boolean;

	isSfAllowNonMembersToViewSharedLinks(): boolean;

	isSfExternalInviteWarn(): boolean;

	isSfFbInvite(): boolean;

	isSfFbInviteChangeRole(): boolean;

	isSfFbUninvite(): boolean;

	isSfInviteGroup(): boolean;

	isSfTeamGrantAccess(): boolean;

	isSfTeamInvite(): boolean;

	isSfTeamInviteChangeRole(): boolean;

	isSfTeamJoin(): boolean;

	isSfTeamJoinFromOobLink(): boolean;

	isSfTeamUninvite(): boolean;

	isSharedContentAddInvitees(): boolean;

	isSharedContentAddLinkExpiry(): boolean;

	isSharedContentAddLinkPassword(): boolean;

	isSharedContentAddMember(): boolean;

	isSharedContentChangeDownloadsPolicy(): boolean;

	isSharedContentChangeInviteeRole(): boolean;

	isSharedContentChangeLinkAudience(): boolean;

	isSharedContentChangeLinkExpiry(): boolean;

	isSharedContentChangeLinkPassword(): boolean;

	isSharedContentChangeMemberRole(): boolean;

	isSharedContentChangeViewerInfoPolicy(): boolean;

	isSharedContentClaimInvitation(): boolean;

	isSharedContentCopy(): boolean;

	isSharedContentDownload(): boolean;

	isSharedContentRelinquishMembership(): boolean;

	isSharedContentRemoveInvitees(): boolean;

	isSharedContentRemoveLinkExpiry(): boolean;

	isSharedContentRemoveLinkPassword(): boolean;

	isSharedContentRemoveMember(): boolean;

	isSharedContentRequestAccess(): boolean;

	isSharedContentUnshare(): boolean;

	isSharedContentView(): boolean;

	isSharedFolderChangeLinkPolicy(): boolean;

	isSharedFolderChangeMembersInheritancePolicy(): boolean;

	isSharedFolderChangeMembersManagementPolicy(): boolean;

	isSharedFolderChangeMembersPolicy(): boolean;

	isSharedFolderCreate(): boolean;

	isSharedFolderDeclineInvitation(): boolean;

	isSharedFolderMount(): boolean;

	isSharedFolderNest(): boolean;

	isSharedFolderTransferOwnership(): boolean;

	isSharedFolderUnmount(): boolean;

	isSharedLinkAddExpiry(): boolean;

	isSharedLinkChangeExpiry(): boolean;

	isSharedLinkChangeVisibility(): boolean;

	isSharedLinkCopy(): boolean;

	isSharedLinkCreate(): boolean;

	isSharedLinkDisable(): boolean;

	isSharedLinkDownload(): boolean;

	isSharedLinkRemoveExpiry(): boolean;

	isSharedLinkShare(): boolean;

	isSharedLinkView(): boolean;

	isSharedNoteOpened(): boolean;

	isSharingChangeFolderJoinPolicy(): boolean;

	isSharingChangeLinkPolicy(): boolean;

	isSharingChangeMemberPolicy(): boolean;

	isShmodelGroupShare(): boolean;

	isShowcaseAccessGranted(): boolean;

	isShowcaseAddMember(): boolean;

	isShowcaseArchived(): boolean;

	isShowcaseChangeDownloadPolicy(): boolean;

	isShowcaseChangeEnabledPolicy(): boolean;

	isShowcaseChangeExternalSharingPolicy(): boolean;

	isShowcaseCreated(): boolean;

	isShowcaseDeleteComment(): boolean;

	isShowcaseEditComment(): boolean;

	isShowcaseEdited(): boolean;

	isShowcaseFileAdded(): boolean;

	isShowcaseFileDownload(): boolean;

	isShowcaseFileRemoved(): boolean;

	isShowcaseFileView(): boolean;

	isShowcasePermanentlyDeleted(): boolean;

	isShowcasePostComment(): boolean;

	isShowcaseRemoveMember(): boolean;

	isShowcaseRenamed(): boolean;

	isShowcaseRequestAccess(): boolean;

	isShowcaseResolveComment(): boolean;

	isShowcaseRestored(): boolean;

	isShowcaseTrashed(): boolean;

	isShowcaseTrashedDeprecated(): boolean;

	isShowcaseUnresolveComment(): boolean;

	isShowcaseUntrashed(): boolean;

	isShowcaseUntrashedDeprecated(): boolean;

	isShowcaseView(): boolean;

	isSignInAsSessionEnd(): boolean;

	isSignInAsSessionStart(): boolean;

	isSmartSyncChangePolicy(): boolean;

	isSmartSyncCreateAdminPrivilegeReport(): boolean;

	isSmartSyncNotOptOut(): boolean;

	isSmartSyncOptOut(): boolean;

	isSsoAddCert(): boolean;

	isSsoAddLoginUrl(): boolean;

	isSsoAddLogoutUrl(): boolean;

	isSsoChangeCert(): boolean;

	isSsoChangeLoginUrl(): boolean;

	isSsoChangeLogoutUrl(): boolean;

	isSsoChangePolicy(): boolean;

	isSsoChangeSamlIdentityMode(): boolean;

	isSsoError(): boolean;

	isSsoRemoveCert(): boolean;

	isSsoRemoveLoginUrl(): boolean;

	isSsoRemoveLogoutUrl(): boolean;

	isTeamActivityCreateReport(): boolean;

	isTeamFolderChangeStatus(): boolean;

	isTeamFolderCreate(): boolean;

	isTeamFolderDowngrade(): boolean;

	isTeamFolderPermanentlyDelete(): boolean;

	isTeamFolderRename(): boolean;

	isTeamMergeFrom(): boolean;

	isTeamMergeTo(): boolean;

	isTeamProfileAddLogo(): boolean;

	isTeamProfileChangeDefaultLanguage(): boolean;

	isTeamProfileChangeLogo(): boolean;

	isTeamProfileChangeName(): boolean;

	isTeamProfileRemoveLogo(): boolean;

	isTeamSelectiveSyncPolicyChanged(): boolean;

	isTeamSelectiveSyncSettingsChanged(): boolean;

	isTfaAddBackupPhone(): boolean;

	isTfaAddSecurityKey(): boolean;

	isTfaChangeBackupPhone(): boolean;

	isTfaChangePolicy(): boolean;

	isTfaChangeStatus(): boolean;

	isTfaRemoveBackupPhone(): boolean;

	isTfaRemoveSecurityKey(): boolean;

	isTfaReset(): boolean;

	isTwoAccountChangePolicy(): boolean;

	isViewerInfoPolicyChanged(): boolean;

	isWebSessionsChangeFixedLengthPolicy(): boolean;

	isWebSessionsChangeIdleLengthPolicy(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGEventTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGEventTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGEventType;

	static new(): DBTEAMLOGEventTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGEventType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGEventTypeTag {

	AppLinkTeam = 0,

	AppLinkUser = 1,

	AppUnlinkTeam = 2,

	AppUnlinkUser = 3,

	FileAddComment = 4,

	FileChangeCommentSubscription = 5,

	FileDeleteComment = 6,

	FileEditComment = 7,

	FileLikeComment = 8,

	FileResolveComment = 9,

	FileUnlikeComment = 10,

	FileUnresolveComment = 11,

	DeviceChangeIpDesktop = 12,

	DeviceChangeIpMobile = 13,

	DeviceChangeIpWeb = 14,

	DeviceDeleteOnUnlinkFail = 15,

	DeviceDeleteOnUnlinkSuccess = 16,

	DeviceLinkFail = 17,

	DeviceLinkSuccess = 18,

	DeviceManagementDisabled = 19,

	DeviceManagementEnabled = 20,

	DeviceUnlink = 21,

	EmmRefreshAuthToken = 22,

	AccountCaptureChangeAvailability = 23,

	AccountCaptureMigrateAccount = 24,

	AccountCaptureNotificationEmailsSent = 25,

	AccountCaptureRelinquishAccount = 26,

	DisabledDomainInvites = 27,

	DomainInvitesApproveRequestToJoinTeam = 28,

	DomainInvitesDeclineRequestToJoinTeam = 29,

	DomainInvitesEmailExistingUsers = 30,

	DomainInvitesRequestToJoinTeam = 31,

	DomainInvitesSetInviteNewUserPrefToNo = 32,

	DomainInvitesSetInviteNewUserPrefToYes = 33,

	DomainVerificationAddDomainFail = 34,

	DomainVerificationAddDomainSuccess = 35,

	DomainVerificationRemoveDomain = 36,

	EnabledDomainInvites = 37,

	CreateFolder = 38,

	FileAdd = 39,

	FileCopy = 40,

	FileDelete = 41,

	FileDownload = 42,

	FileEdit = 43,

	FileGetCopyReference = 44,

	FileMove = 45,

	FilePermanentlyDelete = 46,

	FilePreview = 47,

	FileRename = 48,

	FileRestore = 49,

	FileRevert = 50,

	FileRollbackChanges = 51,

	FileSaveCopyReference = 52,

	FileRequestChange = 53,

	FileRequestClose = 54,

	FileRequestCreate = 55,

	FileRequestReceiveFile = 56,

	GroupAddExternalId = 57,

	GroupAddMember = 58,

	GroupChangeExternalId = 59,

	GroupChangeManagementType = 60,

	GroupChangeMemberRole = 61,

	GroupCreate = 62,

	GroupDelete = 63,

	GroupDescriptionUpdated = 64,

	GroupJoinPolicyUpdated = 65,

	GroupMoved = 66,

	GroupRemoveExternalId = 67,

	GroupRemoveMember = 68,

	GroupRename = 69,

	EmmError = 70,

	LoginFail = 71,

	LoginSuccess = 72,

	Logout = 73,

	ResellerSupportSessionEnd = 74,

	ResellerSupportSessionStart = 75,

	SignInAsSessionEnd = 76,

	SignInAsSessionStart = 77,

	SsoError = 78,

	MemberAddName = 79,

	MemberChangeAdminRole = 80,

	MemberChangeEmail = 81,

	MemberChangeMembershipType = 82,

	MemberChangeName = 83,

	MemberChangeStatus = 84,

	MemberDeleteManualContacts = 85,

	MemberPermanentlyDeleteAccountContents = 86,

	MemberSpaceLimitsAddCustomQuota = 87,

	MemberSpaceLimitsChangeCustomQuota = 88,

	MemberSpaceLimitsChangeStatus = 89,

	MemberSpaceLimitsRemoveCustomQuota = 90,

	MemberSuggest = 91,

	MemberTransferAccountContents = 92,

	SecondaryMailsPolicyChanged = 93,

	PaperContentAddMember = 94,

	PaperContentAddToFolder = 95,

	PaperContentArchive = 96,

	PaperContentCreate = 97,

	PaperContentPermanentlyDelete = 98,

	PaperContentRemoveFromFolder = 99,

	PaperContentRemoveMember = 100,

	PaperContentRename = 101,

	PaperContentRestore = 102,

	PaperDocAddComment = 103,

	PaperDocChangeMemberRole = 104,

	PaperDocChangeSharingPolicy = 105,

	PaperDocChangeSubscription = 106,

	PaperDocDeleted = 107,

	PaperDocDeleteComment = 108,

	PaperDocDownload = 109,

	PaperDocEdit = 110,

	PaperDocEditComment = 111,

	PaperDocFollowed = 112,

	PaperDocMention = 113,

	PaperDocOwnershipChanged = 114,

	PaperDocRequestAccess = 115,

	PaperDocResolveComment = 116,

	PaperDocRevert = 117,

	PaperDocSlackShare = 118,

	PaperDocTeamInvite = 119,

	PaperDocTrashed = 120,

	PaperDocUnresolveComment = 121,

	PaperDocUntrashed = 122,

	PaperDocView = 123,

	PaperExternalViewAllow = 124,

	PaperExternalViewDefaultTeam = 125,

	PaperExternalViewForbid = 126,

	PaperFolderChangeSubscription = 127,

	PaperFolderDeleted = 128,

	PaperFolderFollowed = 129,

	PaperFolderTeamInvite = 130,

	PasswordChange = 131,

	PasswordReset = 132,

	PasswordResetAll = 133,

	EmmCreateExceptionsReport = 134,

	EmmCreateUsageReport = 135,

	ExportMembersReport = 136,

	PaperAdminExportStart = 137,

	SmartSyncCreateAdminPrivilegeReport = 138,

	TeamActivityCreateReport = 139,

	CollectionShare = 140,

	NoteAclInviteOnly = 141,

	NoteAclLink = 142,

	NoteAclTeamLink = 143,

	NoteShared = 144,

	NoteShareReceive = 145,

	OpenNoteShared = 146,

	SfAddGroup = 147,

	SfAllowNonMembersToViewSharedLinks = 148,

	SfExternalInviteWarn = 149,

	SfFbInvite = 150,

	SfFbInviteChangeRole = 151,

	SfFbUninvite = 152,

	SfInviteGroup = 153,

	SfTeamGrantAccess = 154,

	SfTeamInvite = 155,

	SfTeamInviteChangeRole = 156,

	SfTeamJoin = 157,

	SfTeamJoinFromOobLink = 158,

	SfTeamUninvite = 159,

	SharedContentAddInvitees = 160,

	SharedContentAddLinkExpiry = 161,

	SharedContentAddLinkPassword = 162,

	SharedContentAddMember = 163,

	SharedContentChangeDownloadsPolicy = 164,

	SharedContentChangeInviteeRole = 165,

	SharedContentChangeLinkAudience = 166,

	SharedContentChangeLinkExpiry = 167,

	SharedContentChangeLinkPassword = 168,

	SharedContentChangeMemberRole = 169,

	SharedContentChangeViewerInfoPolicy = 170,

	SharedContentClaimInvitation = 171,

	SharedContentCopy = 172,

	SharedContentDownload = 173,

	SharedContentRelinquishMembership = 174,

	SharedContentRemoveInvitees = 175,

	SharedContentRemoveLinkExpiry = 176,

	SharedContentRemoveLinkPassword = 177,

	SharedContentRemoveMember = 178,

	SharedContentRequestAccess = 179,

	SharedContentUnshare = 180,

	SharedContentView = 181,

	SharedFolderChangeLinkPolicy = 182,

	SharedFolderChangeMembersInheritancePolicy = 183,

	SharedFolderChangeMembersManagementPolicy = 184,

	SharedFolderChangeMembersPolicy = 185,

	SharedFolderCreate = 186,

	SharedFolderDeclineInvitation = 187,

	SharedFolderMount = 188,

	SharedFolderNest = 189,

	SharedFolderTransferOwnership = 190,

	SharedFolderUnmount = 191,

	SharedLinkAddExpiry = 192,

	SharedLinkChangeExpiry = 193,

	SharedLinkChangeVisibility = 194,

	SharedLinkCopy = 195,

	SharedLinkCreate = 196,

	SharedLinkDisable = 197,

	SharedLinkDownload = 198,

	SharedLinkRemoveExpiry = 199,

	SharedLinkShare = 200,

	SharedLinkView = 201,

	SharedNoteOpened = 202,

	ShmodelGroupShare = 203,

	ShowcaseAccessGranted = 204,

	ShowcaseAddMember = 205,

	ShowcaseArchived = 206,

	ShowcaseCreated = 207,

	ShowcaseDeleteComment = 208,

	ShowcaseEdited = 209,

	ShowcaseEditComment = 210,

	ShowcaseFileAdded = 211,

	ShowcaseFileDownload = 212,

	ShowcaseFileRemoved = 213,

	ShowcaseFileView = 214,

	ShowcasePermanentlyDeleted = 215,

	ShowcasePostComment = 216,

	ShowcaseRemoveMember = 217,

	ShowcaseRenamed = 218,

	ShowcaseRequestAccess = 219,

	ShowcaseResolveComment = 220,

	ShowcaseRestored = 221,

	ShowcaseTrashed = 222,

	ShowcaseTrashedDeprecated = 223,

	ShowcaseUnresolveComment = 224,

	ShowcaseUntrashed = 225,

	ShowcaseUntrashedDeprecated = 226,

	ShowcaseView = 227,

	SsoAddCert = 228,

	SsoAddLoginUrl = 229,

	SsoAddLogoutUrl = 230,

	SsoChangeCert = 231,

	SsoChangeLoginUrl = 232,

	SsoChangeLogoutUrl = 233,

	SsoChangeSamlIdentityMode = 234,

	SsoRemoveCert = 235,

	SsoRemoveLoginUrl = 236,

	SsoRemoveLogoutUrl = 237,

	TeamFolderChangeStatus = 238,

	TeamFolderCreate = 239,

	TeamFolderDowngrade = 240,

	TeamFolderPermanentlyDelete = 241,

	TeamFolderRename = 242,

	TeamSelectiveSyncSettingsChanged = 243,

	AccountCaptureChangePolicy = 244,

	AllowDownloadDisabled = 245,

	AllowDownloadEnabled = 246,

	CameraUploadsPolicyChanged = 247,

	DataPlacementRestrictionChangePolicy = 248,

	DataPlacementRestrictionSatisfyPolicy = 249,

	DeviceApprovalsChangeDesktopPolicy = 250,

	DeviceApprovalsChangeMobilePolicy = 251,

	DeviceApprovalsChangeOverageAction = 252,

	DeviceApprovalsChangeUnlinkAction = 253,

	DirectoryRestrictionsAddMembers = 254,

	DirectoryRestrictionsRemoveMembers = 255,

	EmmAddException = 256,

	EmmChangePolicy = 257,

	EmmRemoveException = 258,

	ExtendedVersionHistoryChangePolicy = 259,

	FileCommentsChangePolicy = 260,

	FileRequestsChangePolicy = 261,

	FileRequestsEmailsEnabled = 262,

	FileRequestsEmailsRestrictedToTeamOnly = 263,

	GoogleSsoChangePolicy = 264,

	GroupUserManagementChangePolicy = 265,

	MemberRequestsChangePolicy = 266,

	MemberSpaceLimitsAddException = 267,

	MemberSpaceLimitsChangeCapsTypePolicy = 268,

	MemberSpaceLimitsChangePolicy = 269,

	MemberSpaceLimitsRemoveException = 270,

	MemberSuggestionsChangePolicy = 271,

	MicrosoftOfficeAddinChangePolicy = 272,

	NetworkControlChangePolicy = 273,

	PaperChangeDeploymentPolicy = 274,

	PaperChangeMemberLinkPolicy = 275,

	PaperChangeMemberPolicy = 276,

	PaperChangePolicy = 277,

	PaperEnabledUsersGroupAddition = 278,

	PaperEnabledUsersGroupRemoval = 279,

	PermanentDeleteChangePolicy = 280,

	SharingChangeFolderJoinPolicy = 281,

	SharingChangeLinkPolicy = 282,

	SharingChangeMemberPolicy = 283,

	ShowcaseChangeDownloadPolicy = 284,

	ShowcaseChangeEnabledPolicy = 285,

	ShowcaseChangeExternalSharingPolicy = 286,

	SmartSyncChangePolicy = 287,

	SmartSyncNotOptOut = 288,

	SmartSyncOptOut = 289,

	SsoChangePolicy = 290,

	TeamSelectiveSyncPolicyChanged = 291,

	TfaChangePolicy = 292,

	TwoAccountChangePolicy = 293,

	ViewerInfoPolicyChanged = 294,

	WebSessionsChangeFixedLengthPolicy = 295,

	WebSessionsChangeIdleLengthPolicy = 296,

	TeamMergeFrom = 297,

	TeamMergeTo = 298,

	TeamProfileAddLogo = 299,

	TeamProfileChangeDefaultLanguage = 300,

	TeamProfileChangeLogo = 301,

	TeamProfileChangeName = 302,

	TeamProfileRemoveLogo = 303,

	TfaAddBackupPhone = 304,

	TfaAddSecurityKey = 305,

	TfaChangeBackupPhone = 306,

	TfaChangeStatus = 307,

	TfaRemoveBackupPhone = 308,

	TfaRemoveSecurityKey = 309,

	TfaReset = 310,

	Other = 311
}

declare class DBTEAMLOGExportMembersReportDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGExportMembersReportDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGExportMembersReportDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGExportMembersReportDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGExportMembersReportDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGExportMembersReportDetails;

	static new(): DBTEAMLOGExportMembersReportDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGExportMembersReportDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGExportMembersReportType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGExportMembersReportType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGExportMembersReportType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGExportMembersReportTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGExportMembersReportTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGExportMembersReportType;

	static new(): DBTEAMLOGExportMembersReportTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGExportMembersReportType): NSDictionary<string, any>;
}

declare class DBTEAMLOGExtendedVersionHistoryChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGExtendedVersionHistoryChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGExtendedVersionHistoryChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGExtendedVersionHistoryPolicy;

	readonly previousValue: DBTEAMLOGExtendedVersionHistoryPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGExtendedVersionHistoryPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGExtendedVersionHistoryPolicy; previousValue: DBTEAMLOGExtendedVersionHistoryPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGExtendedVersionHistoryPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGExtendedVersionHistoryPolicy, previousValue: DBTEAMLOGExtendedVersionHistoryPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGExtendedVersionHistoryChangePolicyDetails;

	static new(): DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGExtendedVersionHistoryChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGExtendedVersionHistoryChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGExtendedVersionHistoryChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGExtendedVersionHistoryChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGExtendedVersionHistoryChangePolicyType;

	static new(): DBTEAMLOGExtendedVersionHistoryChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGExtendedVersionHistoryChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGExtendedVersionHistoryPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGExtendedVersionHistoryPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGExtendedVersionHistoryPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGExtendedVersionHistoryPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { explicitlyLimited: void; });

	constructor(o: { explicitlyUnlimited: void; });

	constructor(o: { implicitlyLimited: void; });

	constructor(o: { implicitlyUnlimited: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithExplicitlyLimited(): this;

	initWithExplicitlyUnlimited(): this;

	initWithImplicitlyLimited(): this;

	initWithImplicitlyUnlimited(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isExplicitlyLimited(): boolean;

	isExplicitlyUnlimited(): boolean;

	isImplicitlyLimited(): boolean;

	isImplicitlyUnlimited(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGExtendedVersionHistoryPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGExtendedVersionHistoryPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGExtendedVersionHistoryPolicy;

	static new(): DBTEAMLOGExtendedVersionHistoryPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGExtendedVersionHistoryPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGExtendedVersionHistoryPolicyTag {

	ExplicitlyLimited = 0,

	ExplicitlyUnlimited = 1,

	ImplicitlyLimited = 2,

	ImplicitlyUnlimited = 3,

	Other = 4
}

declare class DBTEAMLOGExternalUserLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGExternalUserLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGExternalUserLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly identifierType: DBTEAMLOGIdentifierType;

	readonly userIdentifier: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { userIdentifier: string; identifierType: DBTEAMLOGIdentifierType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserIdentifierIdentifierType(userIdentifier: string, identifierType: DBTEAMLOGIdentifierType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGExternalUserLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGExternalUserLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGExternalUserLogInfo;

	static new(): DBTEAMLOGExternalUserLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGExternalUserLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGFailureDetailsLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFailureDetailsLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFailureDetailsLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly technicalErrorMessage: string;

	readonly userFriendlyMessage: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { userFriendlyMessage: string; technicalErrorMessage: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithUserFriendlyMessageTechnicalErrorMessage(userFriendlyMessage: string, technicalErrorMessage: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFailureDetailsLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGFailureDetailsLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFailureDetailsLogInfo;

	static new(): DBTEAMLOGFailureDetailsLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFailureDetailsLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileAddCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileAddCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileAddCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCommentText(commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileAddCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileAddCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileAddCommentDetails;

	static new(): DBTEAMLOGFileAddCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileAddCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileAddCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileAddCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileAddCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileAddCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileAddCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileAddCommentType;

	static new(): DBTEAMLOGFileAddCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileAddCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileAddDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileAddDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileAddDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileAddDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileAddDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileAddDetails;

	static new(): DBTEAMLOGFileAddDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileAddDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileAddType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileAddType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileAddType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileAddTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileAddTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileAddType;

	static new(): DBTEAMLOGFileAddTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileAddType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileChangeCommentSubscriptionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileChangeCommentSubscriptionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileChangeCommentSubscriptionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGFileCommentNotificationPolicy;

	readonly previousValue: DBTEAMLOGFileCommentNotificationPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGFileCommentNotificationPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGFileCommentNotificationPolicy; previousValue: DBTEAMLOGFileCommentNotificationPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGFileCommentNotificationPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGFileCommentNotificationPolicy, previousValue: DBTEAMLOGFileCommentNotificationPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileChangeCommentSubscriptionDetails;

	static new(): DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileChangeCommentSubscriptionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileChangeCommentSubscriptionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileChangeCommentSubscriptionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileChangeCommentSubscriptionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileChangeCommentSubscriptionType;

	static new(): DBTEAMLOGFileChangeCommentSubscriptionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileChangeCommentSubscriptionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileCommentNotificationPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileCommentNotificationPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileCommentNotificationPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGFileCommentNotificationPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGFileCommentNotificationPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGFileCommentNotificationPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileCommentNotificationPolicy;

	static new(): DBTEAMLOGFileCommentNotificationPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileCommentNotificationPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGFileCommentNotificationPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGFileCommentsChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileCommentsChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileCommentsChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGFileCommentsPolicy;

	readonly previousValue: DBTEAMLOGFileCommentsPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGFileCommentsPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGFileCommentsPolicy; previousValue: DBTEAMLOGFileCommentsPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGFileCommentsPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGFileCommentsPolicy, previousValue: DBTEAMLOGFileCommentsPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileCommentsChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileCommentsChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileCommentsChangePolicyDetails;

	static new(): DBTEAMLOGFileCommentsChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileCommentsChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileCommentsChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileCommentsChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileCommentsChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileCommentsChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileCommentsChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileCommentsChangePolicyType;

	static new(): DBTEAMLOGFileCommentsChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileCommentsChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileCommentsPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileCommentsPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileCommentsPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGFileCommentsPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGFileCommentsPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGFileCommentsPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileCommentsPolicy;

	static new(): DBTEAMLOGFileCommentsPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileCommentsPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGFileCommentsPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGFileCopyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileCopyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileCopyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo> | DBTEAMLOGRelocateAssetReferencesLogInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRelocateActionDetails(relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo> | DBTEAMLOGRelocateAssetReferencesLogInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileCopyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileCopyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileCopyDetails;

	static new(): DBTEAMLOGFileCopyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileCopyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileCopyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileCopyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileCopyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileCopyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileCopyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileCopyType;

	static new(): DBTEAMLOGFileCopyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileCopyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileDeleteCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileDeleteCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileDeleteCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCommentText(commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileDeleteCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileDeleteCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileDeleteCommentDetails;

	static new(): DBTEAMLOGFileDeleteCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileDeleteCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileDeleteCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileDeleteCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileDeleteCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileDeleteCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileDeleteCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileDeleteCommentType;

	static new(): DBTEAMLOGFileDeleteCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileDeleteCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileDeleteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileDeleteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileDeleteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileDeleteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileDeleteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileDeleteDetails;

	static new(): DBTEAMLOGFileDeleteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileDeleteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileDeleteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileDeleteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileDeleteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileDeleteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileDeleteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileDeleteType;

	static new(): DBTEAMLOGFileDeleteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileDeleteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileDownloadDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileDownloadDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileDownloadDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileDownloadDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileDownloadDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileDownloadDetails;

	static new(): DBTEAMLOGFileDownloadDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileDownloadDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileDownloadType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileDownloadType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileDownloadType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileDownloadTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileDownloadTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileDownloadType;

	static new(): DBTEAMLOGFileDownloadTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileDownloadType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileEditCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileEditCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileEditCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly previousCommentText: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousCommentText: string; });

	constructor(o: { previousCommentText: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousCommentText(previousCommentText: string): this;

	initWithPreviousCommentTextCommentText(previousCommentText: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileEditCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileEditCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileEditCommentDetails;

	static new(): DBTEAMLOGFileEditCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileEditCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileEditCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileEditCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileEditCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileEditCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileEditCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileEditCommentType;

	static new(): DBTEAMLOGFileEditCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileEditCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileEditDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileEditDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileEditDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileEditDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileEditDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileEditDetails;

	static new(): DBTEAMLOGFileEditDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileEditDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileEditType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileEditType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileEditType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileEditTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileEditTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileEditType;

	static new(): DBTEAMLOGFileEditTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileEditType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileGetCopyReferenceDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileGetCopyReferenceDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileGetCopyReferenceDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileGetCopyReferenceDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileGetCopyReferenceDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileGetCopyReferenceDetails;

	static new(): DBTEAMLOGFileGetCopyReferenceDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileGetCopyReferenceDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileGetCopyReferenceType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileGetCopyReferenceType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileGetCopyReferenceType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileGetCopyReferenceTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileGetCopyReferenceTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileGetCopyReferenceType;

	static new(): DBTEAMLOGFileGetCopyReferenceTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileGetCopyReferenceType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileLikeCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileLikeCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileLikeCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCommentText(commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileLikeCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileLikeCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileLikeCommentDetails;

	static new(): DBTEAMLOGFileLikeCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileLikeCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileLikeCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileLikeCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileLikeCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileLikeCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileLikeCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileLikeCommentType;

	static new(): DBTEAMLOGFileLikeCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileLikeCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileLogInfo extends DBTEAMLOGFileOrFolderLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileLogInfo;

	static new(): DBTEAMLOGFileLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileMoveDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileMoveDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileMoveDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo> | DBTEAMLOGRelocateAssetReferencesLogInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRelocateActionDetails(relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo> | DBTEAMLOGRelocateAssetReferencesLogInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileMoveDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileMoveDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileMoveDetails;

	static new(): DBTEAMLOGFileMoveDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileMoveDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileMoveType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileMoveType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileMoveType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileMoveTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileMoveTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileMoveType;

	static new(): DBTEAMLOGFileMoveTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileMoveType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileOrFolderLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileOrFolderLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileOrFolderLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly displayName: string;

	readonly fileId: string;

	readonly path: DBTEAMLOGPathLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { path: DBTEAMLOGPathLogInfo; });

	constructor(o: { path: DBTEAMLOGPathLogInfo; displayName: string; fileId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPath(path: DBTEAMLOGPathLogInfo): this;

	initWithPathDisplayNameFileId(path: DBTEAMLOGPathLogInfo, displayName: string, fileId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileOrFolderLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileOrFolderLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileOrFolderLogInfo;

	static new(): DBTEAMLOGFileOrFolderLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileOrFolderLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGFilePermanentlyDeleteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFilePermanentlyDeleteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFilePermanentlyDeleteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFilePermanentlyDeleteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFilePermanentlyDeleteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFilePermanentlyDeleteDetails;

	static new(): DBTEAMLOGFilePermanentlyDeleteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFilePermanentlyDeleteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFilePermanentlyDeleteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFilePermanentlyDeleteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFilePermanentlyDeleteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFilePermanentlyDeleteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFilePermanentlyDeleteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFilePermanentlyDeleteType;

	static new(): DBTEAMLOGFilePermanentlyDeleteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFilePermanentlyDeleteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFilePreviewDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFilePreviewDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFilePreviewDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFilePreviewDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFilePreviewDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFilePreviewDetails;

	static new(): DBTEAMLOGFilePreviewDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFilePreviewDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFilePreviewType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFilePreviewType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFilePreviewType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFilePreviewTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFilePreviewTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFilePreviewType;

	static new(): DBTEAMLOGFilePreviewTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFilePreviewType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRenameDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRenameDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRenameDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo> | DBTEAMLOGRelocateAssetReferencesLogInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRelocateActionDetails(relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo> | DBTEAMLOGRelocateAssetReferencesLogInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRenameDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRenameDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRenameDetails;

	static new(): DBTEAMLOGFileRenameDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRenameDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRenameType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRenameType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRenameType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRenameTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRenameTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRenameType;

	static new(): DBTEAMLOGFileRenameTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRenameType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestChangeDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestChangeDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestChangeDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewDetails: DBTEAMLOGFileRequestDetails;

	readonly fileRequestId: string;

	readonly previousDetails: DBTEAMLOGFileRequestDetails;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewDetails: DBTEAMLOGFileRequestDetails; });

	constructor(o: { DNewDetails: DBTEAMLOGFileRequestDetails; fileRequestId: string; previousDetails: DBTEAMLOGFileRequestDetails; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewDetails(dNewDetails: DBTEAMLOGFileRequestDetails): this;

	initWithDNewDetailsFileRequestIdPreviousDetails(dNewDetails: DBTEAMLOGFileRequestDetails, fileRequestId: string, previousDetails: DBTEAMLOGFileRequestDetails): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestChangeDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestChangeDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestChangeDetails;

	static new(): DBTEAMLOGFileRequestChangeDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestChangeDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestChangeType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestChangeType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestChangeType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestChangeTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestChangeTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestChangeType;

	static new(): DBTEAMLOGFileRequestChangeTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestChangeType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestCloseDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestCloseDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestCloseDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fileRequestId: string;

	readonly previousDetails: DBTEAMLOGFileRequestDetails;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { fileRequestId: string; previousDetails: DBTEAMLOGFileRequestDetails; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithFileRequestIdPreviousDetails(fileRequestId: string, previousDetails: DBTEAMLOGFileRequestDetails): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestCloseDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestCloseDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestCloseDetails;

	static new(): DBTEAMLOGFileRequestCloseDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestCloseDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestCloseType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestCloseType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestCloseType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestCloseTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestCloseTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestCloseType;

	static new(): DBTEAMLOGFileRequestCloseTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestCloseType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestCreateDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestCreateDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestCreateDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fileRequestId: string;

	readonly requestDetails: DBTEAMLOGFileRequestDetails;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { fileRequestId: string; requestDetails: DBTEAMLOGFileRequestDetails; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithFileRequestIdRequestDetails(fileRequestId: string, requestDetails: DBTEAMLOGFileRequestDetails): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestCreateDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestCreateDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestCreateDetails;

	static new(): DBTEAMLOGFileRequestCreateDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestCreateDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestCreateType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestCreateType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestCreateType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestCreateTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestCreateTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestCreateType;

	static new(): DBTEAMLOGFileRequestCreateTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestCreateType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestDeadline extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestDeadline; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestDeadline; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly allowLateUploads: string;

	readonly deadline: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { deadline: Date; allowLateUploads: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDeadlineAllowLateUploads(deadline: Date, allowLateUploads: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestDeadlineSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestDeadlineSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestDeadline;

	static new(): DBTEAMLOGFileRequestDeadlineSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestDeadline): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly assetIndex: number;

	readonly deadline: DBTEAMLOGFileRequestDeadline;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { assetIndex: number; });

	constructor(o: { assetIndex: number; deadline: DBTEAMLOGFileRequestDeadline; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAssetIndex(assetIndex: number): this;

	initWithAssetIndexDeadline(assetIndex: number, deadline: DBTEAMLOGFileRequestDeadline): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestDetails;

	static new(): DBTEAMLOGFileRequestDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestReceiveFileDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestReceiveFileDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestReceiveFileDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly fileRequestDetails: DBTEAMLOGFileRequestDetails;

	readonly fileRequestId: string;

	readonly submittedFileNames: NSArray<string>;

	readonly submitterEmail: string;

	readonly submitterName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { submittedFileNames: NSArray<string> | string[]; });

	constructor(o: { submittedFileNames: NSArray<string> | string[]; fileRequestId: string; fileRequestDetails: DBTEAMLOGFileRequestDetails; submitterName: string; submitterEmail: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSubmittedFileNames(submittedFileNames: NSArray<string> | string[]): this;

	initWithSubmittedFileNamesFileRequestIdFileRequestDetailsSubmitterNameSubmitterEmail(submittedFileNames: NSArray<string> | string[], fileRequestId: string, fileRequestDetails: DBTEAMLOGFileRequestDetails, submitterName: string, submitterEmail: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestReceiveFileDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestReceiveFileDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestReceiveFileDetails;

	static new(): DBTEAMLOGFileRequestReceiveFileDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestReceiveFileDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestReceiveFileType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestReceiveFileType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestReceiveFileType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestReceiveFileTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestReceiveFileTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestReceiveFileType;

	static new(): DBTEAMLOGFileRequestReceiveFileTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestReceiveFileType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestsChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestsChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestsChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGFileRequestsPolicy;

	readonly previousValue: DBTEAMLOGFileRequestsPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGFileRequestsPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGFileRequestsPolicy; previousValue: DBTEAMLOGFileRequestsPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGFileRequestsPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGFileRequestsPolicy, previousValue: DBTEAMLOGFileRequestsPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestsChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestsChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestsChangePolicyDetails;

	static new(): DBTEAMLOGFileRequestsChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestsChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestsChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestsChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestsChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestsChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestsChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestsChangePolicyType;

	static new(): DBTEAMLOGFileRequestsChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestsChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestsEmailsEnabledDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestsEmailsEnabledDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestsEmailsEnabledDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestsEmailsEnabledDetails;

	static new(): DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestsEmailsEnabledDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestsEmailsEnabledType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestsEmailsEnabledType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestsEmailsEnabledType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestsEmailsEnabledType;

	static new(): DBTEAMLOGFileRequestsEmailsEnabledTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestsEmailsEnabledType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails;

	static new(): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType;

	static new(): DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRequestsPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRequestsPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRequestsPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGFileRequestsPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGFileRequestsPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRequestsPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRequestsPolicy;

	static new(): DBTEAMLOGFileRequestsPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRequestsPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGFileRequestsPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGFileResolveCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileResolveCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileResolveCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCommentText(commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileResolveCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileResolveCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileResolveCommentDetails;

	static new(): DBTEAMLOGFileResolveCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileResolveCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileResolveCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileResolveCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileResolveCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileResolveCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileResolveCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileResolveCommentType;

	static new(): DBTEAMLOGFileResolveCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileResolveCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRestoreDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRestoreDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRestoreDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRestoreDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRestoreDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRestoreDetails;

	static new(): DBTEAMLOGFileRestoreDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRestoreDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRestoreType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRestoreType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRestoreType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRestoreTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRestoreTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRestoreType;

	static new(): DBTEAMLOGFileRestoreTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRestoreType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRevertDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRevertDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRevertDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRevertDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRevertDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRevertDetails;

	static new(): DBTEAMLOGFileRevertDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRevertDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRevertType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRevertType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRevertType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRevertTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRevertTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRevertType;

	static new(): DBTEAMLOGFileRevertTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRevertType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRollbackChangesDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRollbackChangesDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRollbackChangesDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRollbackChangesDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRollbackChangesDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRollbackChangesDetails;

	static new(): DBTEAMLOGFileRollbackChangesDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRollbackChangesDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileRollbackChangesType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileRollbackChangesType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileRollbackChangesType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileRollbackChangesTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileRollbackChangesTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileRollbackChangesType;

	static new(): DBTEAMLOGFileRollbackChangesTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileRollbackChangesType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileSaveCopyReferenceDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileSaveCopyReferenceDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileSaveCopyReferenceDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo> | DBTEAMLOGRelocateAssetReferencesLogInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRelocateActionDetails(relocateActionDetails: NSArray<DBTEAMLOGRelocateAssetReferencesLogInfo> | DBTEAMLOGRelocateAssetReferencesLogInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileSaveCopyReferenceDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileSaveCopyReferenceDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileSaveCopyReferenceDetails;

	static new(): DBTEAMLOGFileSaveCopyReferenceDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileSaveCopyReferenceDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileSaveCopyReferenceType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileSaveCopyReferenceType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileSaveCopyReferenceType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileSaveCopyReferenceTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileSaveCopyReferenceTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileSaveCopyReferenceType;

	static new(): DBTEAMLOGFileSaveCopyReferenceTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileSaveCopyReferenceType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileUnlikeCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileUnlikeCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileUnlikeCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCommentText(commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileUnlikeCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileUnlikeCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileUnlikeCommentDetails;

	static new(): DBTEAMLOGFileUnlikeCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileUnlikeCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileUnlikeCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileUnlikeCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileUnlikeCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileUnlikeCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileUnlikeCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileUnlikeCommentType;

	static new(): DBTEAMLOGFileUnlikeCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileUnlikeCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileUnresolveCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileUnresolveCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileUnresolveCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCommentText(commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileUnresolveCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileUnresolveCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileUnresolveCommentDetails;

	static new(): DBTEAMLOGFileUnresolveCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileUnresolveCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGFileUnresolveCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFileUnresolveCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFileUnresolveCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFileUnresolveCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGFileUnresolveCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFileUnresolveCommentType;

	static new(): DBTEAMLOGFileUnresolveCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFileUnresolveCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGFolderLogInfo extends DBTEAMLOGFileOrFolderLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGFolderLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGFolderLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGFolderLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGFolderLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGFolderLogInfo;

	static new(): DBTEAMLOGFolderLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGFolderLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGGeoLocationLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGeoLocationLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGeoLocationLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly city: string;

	readonly country: string;

	readonly ipAddress: string;

	readonly region: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { ipAddress: string; });

	constructor(o: { ipAddress: string; city: string; region: string; country: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIpAddress(ipAddress: string): this;

	initWithIpAddressCityRegionCountry(ipAddress: string, city: string, region: string, country: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGeoLocationLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGGeoLocationLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGeoLocationLogInfo;

	static new(): DBTEAMLOGGeoLocationLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGeoLocationLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGGetTeamEventsArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGetTeamEventsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGetTeamEventsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountId: string;

	readonly category: DBTEAMLOGEventCategory;

	readonly limit: number;

	readonly time: DBTEAMCOMMONTimeRange;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { limit: number; accountId: string; time: DBTEAMCOMMONTimeRange; category: DBTEAMLOGEventCategory; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithLimitAccountIdTimeCategory(limit: number, accountId: string, time: DBTEAMCOMMONTimeRange, category: DBTEAMLOGEventCategory): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGetTeamEventsArgSerializer extends NSObject {

	static alloc(): DBTEAMLOGGetTeamEventsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGetTeamEventsArg;

	static new(): DBTEAMLOGGetTeamEventsArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGetTeamEventsArg): NSDictionary<string, any>;
}

declare class DBTEAMLOGGetTeamEventsContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGetTeamEventsContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGetTeamEventsContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGetTeamEventsContinueArgSerializer extends NSObject {

	static alloc(): DBTEAMLOGGetTeamEventsContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGetTeamEventsContinueArg;

	static new(): DBTEAMLOGGetTeamEventsContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGetTeamEventsContinueArg): NSDictionary<string, any>;
}

declare class DBTEAMLOGGetTeamEventsContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGetTeamEventsContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGetTeamEventsContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly reset: Date;

	readonly tag: DBTEAMLOGGetTeamEventsContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { badCursor: void; });

	constructor(o: { other: void; });

	constructor(o: { reset: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithBadCursor(): this;

	initWithOther(): this;

	initWithReset(reset: Date): this;

	isBadCursor(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGGetTeamEventsContinueErrorSerializer extends NSObject {

	static alloc(): DBTEAMLOGGetTeamEventsContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGetTeamEventsContinueError;

	static new(): DBTEAMLOGGetTeamEventsContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGetTeamEventsContinueError): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGGetTeamEventsContinueErrorTag {

	BadCursor = 0,

	Reset = 1,

	Other = 2
}

declare class DBTEAMLOGGetTeamEventsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGetTeamEventsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGetTeamEventsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGGetTeamEventsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountIdNotFound: void; });

	constructor(o: { invalidTimeRange: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountIdNotFound(): this;

	initWithInvalidTimeRange(): this;

	initWithOther(): this;

	isAccountIdNotFound(): boolean;

	isEqual(object: any): boolean;

	isInvalidTimeRange(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGGetTeamEventsErrorSerializer extends NSObject {

	static alloc(): DBTEAMLOGGetTeamEventsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGetTeamEventsError;

	static new(): DBTEAMLOGGetTeamEventsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGetTeamEventsError): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGGetTeamEventsErrorTag {

	AccountIdNotFound = 0,

	InvalidTimeRange = 1,

	Other = 2
}

declare class DBTEAMLOGGetTeamEventsResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGetTeamEventsResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGetTeamEventsResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly events: NSArray<DBTEAMLOGTeamEvent>;

	readonly hasMore: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { events: NSArray<DBTEAMLOGTeamEvent> | DBTEAMLOGTeamEvent[]; cursor: string; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventsCursorHasMore(events: NSArray<DBTEAMLOGTeamEvent> | DBTEAMLOGTeamEvent[], cursor: string, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGetTeamEventsResultSerializer extends NSObject {

	static alloc(): DBTEAMLOGGetTeamEventsResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGetTeamEventsResult;

	static new(): DBTEAMLOGGetTeamEventsResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGetTeamEventsResult): NSDictionary<string, any>;
}

declare class DBTEAMLOGGoogleSsoChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGoogleSsoChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGoogleSsoChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGGoogleSsoPolicy;

	readonly previousValue: DBTEAMLOGGoogleSsoPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGGoogleSsoPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGGoogleSsoPolicy; previousValue: DBTEAMLOGGoogleSsoPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGGoogleSsoPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGGoogleSsoPolicy, previousValue: DBTEAMLOGGoogleSsoPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGoogleSsoChangePolicyDetails;

	static new(): DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGoogleSsoChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGoogleSsoChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGoogleSsoChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGoogleSsoChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGoogleSsoChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGoogleSsoChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGoogleSsoChangePolicyType;

	static new(): DBTEAMLOGGoogleSsoChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGoogleSsoChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGoogleSsoPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGoogleSsoPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGoogleSsoPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGGoogleSsoPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGGoogleSsoPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGGoogleSsoPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGoogleSsoPolicy;

	static new(): DBTEAMLOGGoogleSsoPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGoogleSsoPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGGoogleSsoPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGGroupAddExternalIdDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupAddExternalIdDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupAddExternalIdDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupAddExternalIdDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupAddExternalIdDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupAddExternalIdDetails;

	static new(): DBTEAMLOGGroupAddExternalIdDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupAddExternalIdDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupAddExternalIdType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupAddExternalIdType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupAddExternalIdType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupAddExternalIdTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupAddExternalIdTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupAddExternalIdType;

	static new(): DBTEAMLOGGroupAddExternalIdTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupAddExternalIdType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupAddMemberDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupAddMemberDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupAddMemberDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isGroupOwner: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { isGroupOwner: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIsGroupOwner(isGroupOwner: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupAddMemberDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupAddMemberDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupAddMemberDetails;

	static new(): DBTEAMLOGGroupAddMemberDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupAddMemberDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupAddMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupAddMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupAddMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupAddMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupAddMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupAddMemberType;

	static new(): DBTEAMLOGGroupAddMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupAddMemberType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupChangeExternalIdDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupChangeExternalIdDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupChangeExternalIdDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: string; previousValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValuePreviousValue(dNewValue: string, previousValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupChangeExternalIdDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupChangeExternalIdDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupChangeExternalIdDetails;

	static new(): DBTEAMLOGGroupChangeExternalIdDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupChangeExternalIdDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupChangeExternalIdType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupChangeExternalIdType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupChangeExternalIdType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupChangeExternalIdTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupChangeExternalIdTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupChangeExternalIdType;

	static new(): DBTEAMLOGGroupChangeExternalIdTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupChangeExternalIdType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupChangeManagementTypeDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupChangeManagementTypeDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupChangeManagementTypeDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMCOMMONGroupManagementType;

	readonly previousValue: DBTEAMCOMMONGroupManagementType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMCOMMONGroupManagementType; });

	constructor(o: { DNewValue: DBTEAMCOMMONGroupManagementType; previousValue: DBTEAMCOMMONGroupManagementType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMCOMMONGroupManagementType): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMCOMMONGroupManagementType, previousValue: DBTEAMCOMMONGroupManagementType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupChangeManagementTypeDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupChangeManagementTypeDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupChangeManagementTypeDetails;

	static new(): DBTEAMLOGGroupChangeManagementTypeDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupChangeManagementTypeDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupChangeManagementTypeType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupChangeManagementTypeType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupChangeManagementTypeType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupChangeManagementTypeTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupChangeManagementTypeTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupChangeManagementTypeType;

	static new(): DBTEAMLOGGroupChangeManagementTypeTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupChangeManagementTypeType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupChangeMemberRoleDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupChangeMemberRoleDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupChangeMemberRoleDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isGroupOwner: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { isGroupOwner: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIsGroupOwner(isGroupOwner: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupChangeMemberRoleDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupChangeMemberRoleDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupChangeMemberRoleDetails;

	static new(): DBTEAMLOGGroupChangeMemberRoleDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupChangeMemberRoleDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupChangeMemberRoleType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupChangeMemberRoleType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupChangeMemberRoleType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupChangeMemberRoleTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupChangeMemberRoleTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupChangeMemberRoleType;

	static new(): DBTEAMLOGGroupChangeMemberRoleTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupChangeMemberRoleType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupCreateDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupCreateDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupCreateDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isCompanyManaged: number;

	readonly joinPolicy: DBTEAMLOGGroupJoinPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { isCompanyManaged: number; joinPolicy: DBTEAMLOGGroupJoinPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithIsCompanyManagedJoinPolicy(isCompanyManaged: number, joinPolicy: DBTEAMLOGGroupJoinPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupCreateDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupCreateDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupCreateDetails;

	static new(): DBTEAMLOGGroupCreateDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupCreateDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupCreateType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupCreateType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupCreateType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupCreateTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupCreateTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupCreateType;

	static new(): DBTEAMLOGGroupCreateTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupCreateType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupDeleteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupDeleteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupDeleteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isCompanyManaged: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { isCompanyManaged: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithIsCompanyManaged(isCompanyManaged: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupDeleteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupDeleteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupDeleteDetails;

	static new(): DBTEAMLOGGroupDeleteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupDeleteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupDeleteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupDeleteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupDeleteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupDeleteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupDeleteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupDeleteType;

	static new(): DBTEAMLOGGroupDeleteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupDeleteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupDescriptionUpdatedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupDescriptionUpdatedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupDescriptionUpdatedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupDescriptionUpdatedDetails;

	static new(): DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupDescriptionUpdatedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupDescriptionUpdatedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupDescriptionUpdatedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupDescriptionUpdatedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupDescriptionUpdatedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupDescriptionUpdatedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupDescriptionUpdatedType;

	static new(): DBTEAMLOGGroupDescriptionUpdatedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupDescriptionUpdatedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupJoinPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupJoinPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupJoinPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGGroupJoinPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { open: void; });

	constructor(o: { other: void; });

	constructor(o: { requestToJoin: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOpen(): this;

	initWithOther(): this;

	initWithRequestToJoin(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOpen(): boolean;

	isOther(): boolean;

	isRequestToJoin(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGGroupJoinPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupJoinPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupJoinPolicy;

	static new(): DBTEAMLOGGroupJoinPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupJoinPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGGroupJoinPolicyTag {

	Open = 0,

	RequestToJoin = 1,

	Other = 2
}

declare class DBTEAMLOGGroupJoinPolicyUpdatedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupJoinPolicyUpdatedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupJoinPolicyUpdatedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isCompanyManaged: number;

	readonly joinPolicy: DBTEAMLOGGroupJoinPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { isCompanyManaged: number; joinPolicy: DBTEAMLOGGroupJoinPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithIsCompanyManagedJoinPolicy(isCompanyManaged: number, joinPolicy: DBTEAMLOGGroupJoinPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupJoinPolicyUpdatedDetails;

	static new(): DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupJoinPolicyUpdatedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupJoinPolicyUpdatedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupJoinPolicyUpdatedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupJoinPolicyUpdatedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupJoinPolicyUpdatedType;

	static new(): DBTEAMLOGGroupJoinPolicyUpdatedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupJoinPolicyUpdatedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly displayName: string;

	readonly externalId: string;

	readonly groupId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { displayName: string; });

	constructor(o: { displayName: string; groupId: string; externalId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisplayName(displayName: string): this;

	initWithDisplayNameGroupIdExternalId(displayName: string, groupId: string, externalId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupLogInfo;

	static new(): DBTEAMLOGGroupLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupMovedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupMovedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupMovedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupMovedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupMovedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupMovedDetails;

	static new(): DBTEAMLOGGroupMovedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupMovedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupMovedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupMovedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupMovedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupMovedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupMovedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupMovedType;

	static new(): DBTEAMLOGGroupMovedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupMovedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupRemoveExternalIdDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupRemoveExternalIdDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupRemoveExternalIdDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValue(previousValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupRemoveExternalIdDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupRemoveExternalIdDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupRemoveExternalIdDetails;

	static new(): DBTEAMLOGGroupRemoveExternalIdDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupRemoveExternalIdDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupRemoveExternalIdType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupRemoveExternalIdType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupRemoveExternalIdType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupRemoveExternalIdTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupRemoveExternalIdTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupRemoveExternalIdType;

	static new(): DBTEAMLOGGroupRemoveExternalIdTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupRemoveExternalIdType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupRemoveMemberDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupRemoveMemberDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupRemoveMemberDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupRemoveMemberDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupRemoveMemberDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupRemoveMemberDetails;

	static new(): DBTEAMLOGGroupRemoveMemberDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupRemoveMemberDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupRemoveMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupRemoveMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupRemoveMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupRemoveMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupRemoveMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupRemoveMemberType;

	static new(): DBTEAMLOGGroupRemoveMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupRemoveMemberType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupRenameDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupRenameDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupRenameDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: string; dNewValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: string, dNewValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupRenameDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupRenameDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupRenameDetails;

	static new(): DBTEAMLOGGroupRenameDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupRenameDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupRenameType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupRenameType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupRenameType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupRenameTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupRenameTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupRenameType;

	static new(): DBTEAMLOGGroupRenameTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupRenameType): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupUserManagementChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupUserManagementChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupUserManagementChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMPOLICIESGroupCreation;

	readonly previousValue: DBTEAMPOLICIESGroupCreation;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMPOLICIESGroupCreation; });

	constructor(o: { DNewValue: DBTEAMPOLICIESGroupCreation; previousValue: DBTEAMPOLICIESGroupCreation; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMPOLICIESGroupCreation): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMPOLICIESGroupCreation, previousValue: DBTEAMPOLICIESGroupCreation): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupUserManagementChangePolicyDetails;

	static new(): DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupUserManagementChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGGroupUserManagementChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGGroupUserManagementChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGGroupUserManagementChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGGroupUserManagementChangePolicyType;

	static new(): DBTEAMLOGGroupUserManagementChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGGroupUserManagementChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGIdentifierType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGIdentifierType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGIdentifierType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGIdentifierTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { email: void; });

	constructor(o: { facebookProfileName: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmail(): this;

	initWithFacebookProfileName(): this;

	initWithOther(): this;

	isEmail(): boolean;

	isEqual(object: any): boolean;

	isFacebookProfileName(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGIdentifierTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGIdentifierTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGIdentifierType;

	static new(): DBTEAMLOGIdentifierTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGIdentifierType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGIdentifierTypeTag {

	Email = 0,

	FacebookProfileName = 1,

	Other = 2
}

declare class DBTEAMLOGJoinTeamDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGJoinTeamDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGJoinTeamDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly linkedApps: NSArray<DBTEAMLOGUserLinkedAppLogInfo>;

	readonly linkedDevices: NSArray<DBTEAMLOGLinkedDeviceLogInfo>;

	readonly linkedSharedFolders: NSArray<DBTEAMLOGFolderLogInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { linkedApps: NSArray<DBTEAMLOGUserLinkedAppLogInfo> | DBTEAMLOGUserLinkedAppLogInfo[]; linkedDevices: NSArray<DBTEAMLOGLinkedDeviceLogInfo> | DBTEAMLOGLinkedDeviceLogInfo[]; linkedSharedFolders: NSArray<DBTEAMLOGFolderLogInfo> | DBTEAMLOGFolderLogInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLinkedAppsLinkedDevicesLinkedSharedFolders(linkedApps: NSArray<DBTEAMLOGUserLinkedAppLogInfo> | DBTEAMLOGUserLinkedAppLogInfo[], linkedDevices: NSArray<DBTEAMLOGLinkedDeviceLogInfo> | DBTEAMLOGLinkedDeviceLogInfo[], linkedSharedFolders: NSArray<DBTEAMLOGFolderLogInfo> | DBTEAMLOGFolderLogInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGJoinTeamDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGJoinTeamDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGJoinTeamDetails;

	static new(): DBTEAMLOGJoinTeamDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGJoinTeamDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGLegacyDeviceSessionLogInfo extends DBTEAMLOGDeviceSessionLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLegacyDeviceSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLegacyDeviceSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly clientVersion: string;

	readonly deviceType: string;

	readonly displayName: string;

	readonly isEmmManaged: number;

	readonly legacyUniqId: string;

	readonly macAddress: string;

	readonly osVersion: string;

	readonly platform: string;

	readonly sessionInfo: DBTEAMLOGSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { ipAddress: string; created: Date; updated: Date; sessionInfo: DBTEAMLOGSessionLogInfo; displayName: string; isEmmManaged: number; platform: string; macAddress: string; osVersion: string; deviceType: string; clientVersion: string; legacyUniqId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIpAddressCreatedUpdatedSessionInfoDisplayNameIsEmmManagedPlatformMacAddressOsVersionDeviceTypeClientVersionLegacyUniqId(ipAddress: string, created: Date, updated: Date, sessionInfo: DBTEAMLOGSessionLogInfo, displayName: string, isEmmManaged: number, platform: string, macAddress: string, osVersion: string, deviceType: string, clientVersion: string, legacyUniqId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGLegacyDeviceSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGLegacyDeviceSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLegacyDeviceSessionLogInfo;

	static new(): DBTEAMLOGLegacyDeviceSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLegacyDeviceSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGLinkedDeviceLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLinkedDeviceLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLinkedDeviceLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly desktopDeviceSession: DBTEAMLOGDesktopDeviceSessionLogInfo;

	readonly legacyDeviceSession: DBTEAMLOGLegacyDeviceSessionLogInfo;

	readonly mobileDeviceSession: DBTEAMLOGMobileDeviceSessionLogInfo;

	readonly tag: DBTEAMLOGLinkedDeviceLogInfoTag;

	readonly webDeviceSession: DBTEAMLOGWebDeviceSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { desktopDeviceSession: DBTEAMLOGDesktopDeviceSessionLogInfo; });

	constructor(o: { legacyDeviceSession: DBTEAMLOGLegacyDeviceSessionLogInfo; });

	constructor(o: { mobileDeviceSession: DBTEAMLOGMobileDeviceSessionLogInfo; });

	constructor(o: { other: void; });

	constructor(o: { webDeviceSession: DBTEAMLOGWebDeviceSessionLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDesktopDeviceSession(desktopDeviceSession: DBTEAMLOGDesktopDeviceSessionLogInfo): this;

	initWithLegacyDeviceSession(legacyDeviceSession: DBTEAMLOGLegacyDeviceSessionLogInfo): this;

	initWithMobileDeviceSession(mobileDeviceSession: DBTEAMLOGMobileDeviceSessionLogInfo): this;

	initWithOther(): this;

	initWithWebDeviceSession(webDeviceSession: DBTEAMLOGWebDeviceSessionLogInfo): this;

	isDesktopDeviceSession(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLegacyDeviceSession(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMobileDeviceSession(): boolean;

	isOther(): boolean;

	isWebDeviceSession(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGLinkedDeviceLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGLinkedDeviceLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLinkedDeviceLogInfo;

	static new(): DBTEAMLOGLinkedDeviceLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLinkedDeviceLogInfo): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGLinkedDeviceLogInfoTag {

	MobileDeviceSession = 0,

	DesktopDeviceSession = 1,

	WebDeviceSession = 2,

	LegacyDeviceSession = 3,

	Other = 4
}

declare class DBTEAMLOGLoginFailDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLoginFailDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLoginFailDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly errorDetails: DBTEAMLOGFailureDetailsLogInfo;

	readonly isEmmManaged: number;

	readonly loginMethod: DBTEAMLOGLoginMethod;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { loginMethod: DBTEAMLOGLoginMethod; errorDetails: DBTEAMLOGFailureDetailsLogInfo; });

	constructor(o: { loginMethod: DBTEAMLOGLoginMethod; errorDetails: DBTEAMLOGFailureDetailsLogInfo; isEmmManaged: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLoginMethodErrorDetails(loginMethod: DBTEAMLOGLoginMethod, errorDetails: DBTEAMLOGFailureDetailsLogInfo): this;

	initWithLoginMethodErrorDetailsIsEmmManaged(loginMethod: DBTEAMLOGLoginMethod, errorDetails: DBTEAMLOGFailureDetailsLogInfo, isEmmManaged: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGLoginFailDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGLoginFailDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLoginFailDetails;

	static new(): DBTEAMLOGLoginFailDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLoginFailDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGLoginFailType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLoginFailType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLoginFailType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGLoginFailTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGLoginFailTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLoginFailType;

	static new(): DBTEAMLOGLoginFailTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLoginFailType): NSDictionary<string, any>;
}

declare class DBTEAMLOGLoginMethod extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLoginMethod; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLoginMethod; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGLoginMethodTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { password: void; });

	constructor(o: { saml: void; });

	constructor(o: { twoFactorAuthentication: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPassword(): this;

	initWithSaml(): this;

	initWithTwoFactorAuthentication(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPassword(): boolean;

	isSaml(): boolean;

	isTwoFactorAuthentication(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGLoginMethodSerializer extends NSObject {

	static alloc(): DBTEAMLOGLoginMethodSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLoginMethod;

	static new(): DBTEAMLOGLoginMethodSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLoginMethod): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGLoginMethodTag {

	Password = 0,

	TwoFactorAuthentication = 1,

	Saml = 2,

	Other = 3
}

declare class DBTEAMLOGLoginSuccessDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLoginSuccessDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLoginSuccessDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isEmmManaged: number;

	readonly loginMethod: DBTEAMLOGLoginMethod;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { loginMethod: DBTEAMLOGLoginMethod; });

	constructor(o: { loginMethod: DBTEAMLOGLoginMethod; isEmmManaged: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLoginMethod(loginMethod: DBTEAMLOGLoginMethod): this;

	initWithLoginMethodIsEmmManaged(loginMethod: DBTEAMLOGLoginMethod, isEmmManaged: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGLoginSuccessDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGLoginSuccessDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLoginSuccessDetails;

	static new(): DBTEAMLOGLoginSuccessDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLoginSuccessDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGLoginSuccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLoginSuccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLoginSuccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGLoginSuccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGLoginSuccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLoginSuccessType;

	static new(): DBTEAMLOGLoginSuccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLoginSuccessType): NSDictionary<string, any>;
}

declare class DBTEAMLOGLogoutDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLogoutDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLogoutDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGLogoutDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGLogoutDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLogoutDetails;

	static new(): DBTEAMLOGLogoutDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLogoutDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGLogoutType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGLogoutType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGLogoutType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGLogoutTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGLogoutTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGLogoutType;

	static new(): DBTEAMLOGLogoutTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGLogoutType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberAddNameDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberAddNameDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberAddNameDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGUserNameLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGUserNameLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGUserNameLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberAddNameDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberAddNameDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberAddNameDetails;

	static new(): DBTEAMLOGMemberAddNameDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberAddNameDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberAddNameType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberAddNameType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberAddNameType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberAddNameTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberAddNameTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberAddNameType;

	static new(): DBTEAMLOGMemberAddNameTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberAddNameType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeAdminRoleDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeAdminRoleDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeAdminRoleDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGAdminRole;

	readonly previousValue: DBTEAMLOGAdminRole;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: DBTEAMLOGAdminRole; previousValue: DBTEAMLOGAdminRole; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGAdminRole, previousValue: DBTEAMLOGAdminRole): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeAdminRoleDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeAdminRoleDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeAdminRoleDetails;

	static new(): DBTEAMLOGMemberChangeAdminRoleDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeAdminRoleDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeAdminRoleType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeAdminRoleType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeAdminRoleType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeAdminRoleTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeAdminRoleTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeAdminRoleType;

	static new(): DBTEAMLOGMemberChangeAdminRoleTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeAdminRoleType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeEmailDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeEmailDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeEmailDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: string; });

	constructor(o: { DNewValue: string; previousValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: string): this;

	initWithDNewValuePreviousValue(dNewValue: string, previousValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeEmailDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeEmailDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeEmailDetails;

	static new(): DBTEAMLOGMemberChangeEmailDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeEmailDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeEmailType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeEmailType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeEmailType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeEmailTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeEmailTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeEmailType;

	static new(): DBTEAMLOGMemberChangeEmailTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeEmailType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeMembershipTypeDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeMembershipTypeDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeMembershipTypeDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGTeamMembershipType;

	readonly prevValue: DBTEAMLOGTeamMembershipType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { prevValue: DBTEAMLOGTeamMembershipType; dNewValue: DBTEAMLOGTeamMembershipType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPrevValueDNewValue(prevValue: DBTEAMLOGTeamMembershipType, dNewValue: DBTEAMLOGTeamMembershipType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeMembershipTypeDetails;

	static new(): DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeMembershipTypeDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeMembershipTypeType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeMembershipTypeType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeMembershipTypeType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeMembershipTypeTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeMembershipTypeTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeMembershipTypeType;

	static new(): DBTEAMLOGMemberChangeMembershipTypeTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeMembershipTypeType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeNameDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeNameDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeNameDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGUserNameLogInfo;

	readonly previousValue: DBTEAMLOGUserNameLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGUserNameLogInfo; });

	constructor(o: { DNewValue: DBTEAMLOGUserNameLogInfo; previousValue: DBTEAMLOGUserNameLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGUserNameLogInfo): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGUserNameLogInfo, previousValue: DBTEAMLOGUserNameLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeNameDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeNameDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeNameDetails;

	static new(): DBTEAMLOGMemberChangeNameDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeNameDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeNameType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeNameType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeNameType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeNameTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeNameTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeNameType;

	static new(): DBTEAMLOGMemberChangeNameTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeNameType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeStatusDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeStatusDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeStatusDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly action: DBTEAMLOGActionDetails;

	readonly dNewValue: DBTEAMLOGMemberStatus;

	readonly previousValue: DBTEAMLOGMemberStatus;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGMemberStatus; });

	constructor(o: { DNewValue: DBTEAMLOGMemberStatus; previousValue: DBTEAMLOGMemberStatus; action: DBTEAMLOGActionDetails; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGMemberStatus): this;

	initWithDNewValuePreviousValueAction(dNewValue: DBTEAMLOGMemberStatus, previousValue: DBTEAMLOGMemberStatus, action: DBTEAMLOGActionDetails): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeStatusDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeStatusDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeStatusDetails;

	static new(): DBTEAMLOGMemberChangeStatusDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeStatusDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberChangeStatusType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberChangeStatusType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberChangeStatusType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberChangeStatusTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberChangeStatusTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberChangeStatusType;

	static new(): DBTEAMLOGMemberChangeStatusTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberChangeStatusType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberDeleteManualContactsDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberDeleteManualContactsDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberDeleteManualContactsDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberDeleteManualContactsDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberDeleteManualContactsDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberDeleteManualContactsDetails;

	static new(): DBTEAMLOGMemberDeleteManualContactsDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberDeleteManualContactsDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberDeleteManualContactsType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberDeleteManualContactsType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberDeleteManualContactsType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberDeleteManualContactsTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberDeleteManualContactsTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberDeleteManualContactsType;

	static new(): DBTEAMLOGMemberDeleteManualContactsTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberDeleteManualContactsType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails;

	static new(): DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberPermanentlyDeleteAccountContentsType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberPermanentlyDeleteAccountContentsType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberPermanentlyDeleteAccountContentsType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberPermanentlyDeleteAccountContentsType;

	static new(): DBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberPermanentlyDeleteAccountContentsType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberRemoveActionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberRemoveActionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberRemoveActionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGMemberRemoveActionTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { delete_: void; });

	constructor(o: { leave: void; });

	constructor(o: { offboard: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDelete_(): this;

	initWithLeave(): this;

	initWithOffboard(): this;

	initWithOther(): this;

	isDelete_(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLeave(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOffboard(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGMemberRemoveActionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberRemoveActionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberRemoveActionType;

	static new(): DBTEAMLOGMemberRemoveActionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberRemoveActionType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGMemberRemoveActionTypeTag {

	Delete_ = 0,

	Offboard = 1,

	Leave = 2,

	Other = 3
}

declare class DBTEAMLOGMemberRequestsChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberRequestsChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberRequestsChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGMemberRequestsPolicy;

	readonly previousValue: DBTEAMLOGMemberRequestsPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGMemberRequestsPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGMemberRequestsPolicy; previousValue: DBTEAMLOGMemberRequestsPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGMemberRequestsPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGMemberRequestsPolicy, previousValue: DBTEAMLOGMemberRequestsPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberRequestsChangePolicyDetails;

	static new(): DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberRequestsChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberRequestsChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberRequestsChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberRequestsChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberRequestsChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberRequestsChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberRequestsChangePolicyType;

	static new(): DBTEAMLOGMemberRequestsChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberRequestsChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberRequestsPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberRequestsPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberRequestsPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGMemberRequestsPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { autoAccept: void; });

	constructor(o: { disabled: void; });

	constructor(o: { other: void; });

	constructor(o: { requireApproval: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAutoAccept(): this;

	initWithDisabled(): this;

	initWithOther(): this;

	initWithRequireApproval(): this;

	isAutoAccept(): boolean;

	isDisabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRequireApproval(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGMemberRequestsPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberRequestsPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberRequestsPolicy;

	static new(): DBTEAMLOGMemberRequestsPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberRequestsPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGMemberRequestsPolicyTag {

	AutoAccept = 0,

	Disabled = 1,

	RequireApproval = 2,

	Other = 3
}

declare class DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails;

	static new(): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType;

	static new(): DBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsAddExceptionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsAddExceptionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsAddExceptionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsAddExceptionDetails;

	static new(): DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsAddExceptionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsAddExceptionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsAddExceptionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsAddExceptionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsAddExceptionType;

	static new(): DBTEAMLOGMemberSpaceLimitsAddExceptionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsAddExceptionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSpaceCapsType;

	readonly previousValue: DBTEAMLOGSpaceCapsType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: DBTEAMLOGSpaceCapsType; dNewValue: DBTEAMLOGSpaceCapsType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: DBTEAMLOGSpaceCapsType, dNewValue: DBTEAMLOGSpaceCapsType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: number;

	readonly previousValue: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: number; dNewValue: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: number, dNewValue: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: number;

	readonly previousValue: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { previousValue: number; dNewValue: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithPreviousValueDNewValue(previousValue: number, dNewValue: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsChangePolicyDetails;

	static new(): DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsChangePolicyType;

	static new(): DBTEAMLOGMemberSpaceLimitsChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeStatusDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeStatusDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeStatusDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSpaceLimitsStatus;

	readonly previousValue: DBTEAMLOGSpaceLimitsStatus;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: DBTEAMLOGSpaceLimitsStatus; dNewValue: DBTEAMLOGSpaceLimitsStatus; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: DBTEAMLOGSpaceLimitsStatus, dNewValue: DBTEAMLOGSpaceLimitsStatus): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsChangeStatusDetails;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsChangeStatusDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeStatusType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeStatusType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeStatusType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsChangeStatusType;

	static new(): DBTEAMLOGMemberSpaceLimitsChangeStatusTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsChangeStatusType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails;

	static new(): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType;

	static new(): DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails;

	static new(): DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSpaceLimitsRemoveExceptionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSpaceLimitsRemoveExceptionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSpaceLimitsRemoveExceptionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSpaceLimitsRemoveExceptionType;

	static new(): DBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSpaceLimitsRemoveExceptionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGMemberStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { active: void; });

	constructor(o: { invited: void; });

	constructor(o: { notJoined: void; });

	constructor(o: { other: void; });

	constructor(o: { removed: void; });

	constructor(o: { suspended: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActive(): this;

	initWithInvited(): this;

	initWithNotJoined(): this;

	initWithOther(): this;

	initWithRemoved(): this;

	initWithSuspended(): this;

	isActive(): boolean;

	isEqual(object: any): boolean;

	isInvited(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNotJoined(): boolean;

	isOther(): boolean;

	isRemoved(): boolean;

	isSuspended(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGMemberStatusSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberStatus;

	static new(): DBTEAMLOGMemberStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberStatus): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGMemberStatusTag {

	NotJoined = 0,

	Invited = 1,

	Active = 2,

	Suspended = 3,

	Removed = 4,

	Other = 5
}

declare class DBTEAMLOGMemberSuggestDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSuggestDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSuggestDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly suggestedMembers: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { suggestedMembers: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSuggestedMembers(suggestedMembers: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSuggestDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSuggestDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSuggestDetails;

	static new(): DBTEAMLOGMemberSuggestDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSuggestDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSuggestType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSuggestType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSuggestType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSuggestTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSuggestTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSuggestType;

	static new(): DBTEAMLOGMemberSuggestTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSuggestType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSuggestionsChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSuggestionsChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSuggestionsChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGMemberSuggestionsPolicy;

	readonly previousValue: DBTEAMLOGMemberSuggestionsPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGMemberSuggestionsPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGMemberSuggestionsPolicy; previousValue: DBTEAMLOGMemberSuggestionsPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGMemberSuggestionsPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGMemberSuggestionsPolicy, previousValue: DBTEAMLOGMemberSuggestionsPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSuggestionsChangePolicyDetails;

	static new(): DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSuggestionsChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSuggestionsChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSuggestionsChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSuggestionsChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSuggestionsChangePolicyType;

	static new(): DBTEAMLOGMemberSuggestionsChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSuggestionsChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberSuggestionsPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberSuggestionsPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberSuggestionsPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGMemberSuggestionsPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGMemberSuggestionsPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberSuggestionsPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberSuggestionsPolicy;

	static new(): DBTEAMLOGMemberSuggestionsPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberSuggestionsPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGMemberSuggestionsPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGMemberTransferAccountContentsDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberTransferAccountContentsDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberTransferAccountContentsDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberTransferAccountContentsDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberTransferAccountContentsDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberTransferAccountContentsDetails;

	static new(): DBTEAMLOGMemberTransferAccountContentsDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberTransferAccountContentsDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMemberTransferAccountContentsType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMemberTransferAccountContentsType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMemberTransferAccountContentsType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMemberTransferAccountContentsTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMemberTransferAccountContentsTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMemberTransferAccountContentsType;

	static new(): DBTEAMLOGMemberTransferAccountContentsTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMemberTransferAccountContentsType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGMicrosoftOfficeAddinPolicy;

	readonly previousValue: DBTEAMLOGMicrosoftOfficeAddinPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGMicrosoftOfficeAddinPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGMicrosoftOfficeAddinPolicy; previousValue: DBTEAMLOGMicrosoftOfficeAddinPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGMicrosoftOfficeAddinPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGMicrosoftOfficeAddinPolicy, previousValue: DBTEAMLOGMicrosoftOfficeAddinPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails;

	static new(): DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMicrosoftOfficeAddinChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMicrosoftOfficeAddinChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMicrosoftOfficeAddinChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMicrosoftOfficeAddinChangePolicyType;

	static new(): DBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMicrosoftOfficeAddinChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGMicrosoftOfficeAddinPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMicrosoftOfficeAddinPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMicrosoftOfficeAddinPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGMicrosoftOfficeAddinPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGMicrosoftOfficeAddinPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGMicrosoftOfficeAddinPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMicrosoftOfficeAddinPolicy;

	static new(): DBTEAMLOGMicrosoftOfficeAddinPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMicrosoftOfficeAddinPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGMicrosoftOfficeAddinPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGMissingDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMissingDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMissingDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sourceEventFields: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sourceEventFields: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSourceEventFields(sourceEventFields: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMissingDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGMissingDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMissingDetails;

	static new(): DBTEAMLOGMissingDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMissingDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGMobileDeviceSessionLogInfo extends DBTEAMLOGDeviceSessionLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMobileDeviceSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMobileDeviceSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly clientType: DBTEAMMobileClientPlatform;

	readonly clientVersion: string;

	readonly deviceName: string;

	readonly lastCarrier: string;

	readonly osVersion: string;

	readonly sessionInfo: DBTEAMLOGMobileSessionLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { deviceName: string; clientType: DBTEAMMobileClientPlatform; });

	constructor(o: { deviceName: string; clientType: DBTEAMMobileClientPlatform; ipAddress: string; created: Date; updated: Date; sessionInfo: DBTEAMLOGMobileSessionLogInfo; clientVersion: string; osVersion: string; lastCarrier: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDeviceNameClientType(deviceName: string, clientType: DBTEAMMobileClientPlatform): this;

	initWithDeviceNameClientTypeIpAddressCreatedUpdatedSessionInfoClientVersionOsVersionLastCarrier(deviceName: string, clientType: DBTEAMMobileClientPlatform, ipAddress: string, created: Date, updated: Date, sessionInfo: DBTEAMLOGMobileSessionLogInfo, clientVersion: string, osVersion: string, lastCarrier: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMobileDeviceSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGMobileDeviceSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMobileDeviceSessionLogInfo;

	static new(): DBTEAMLOGMobileDeviceSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMobileDeviceSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGMobileSessionLogInfo extends DBTEAMLOGSessionLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGMobileSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGMobileSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGMobileSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGMobileSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGMobileSessionLogInfo;

	static new(): DBTEAMLOGMobileSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGMobileSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGNamespaceRelativePathLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNamespaceRelativePathLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNamespaceRelativePathLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly nsId: string;

	readonly relativePath: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { nsId: string; relativePath: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithNsIdRelativePath(nsId: string, relativePath: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNamespaceRelativePathLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGNamespaceRelativePathLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNamespaceRelativePathLogInfo;

	static new(): DBTEAMLOGNamespaceRelativePathLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNamespaceRelativePathLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGNetworkControlChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNetworkControlChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNetworkControlChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGNetworkControlPolicy;

	readonly previousValue: DBTEAMLOGNetworkControlPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGNetworkControlPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGNetworkControlPolicy; previousValue: DBTEAMLOGNetworkControlPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGNetworkControlPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGNetworkControlPolicy, previousValue: DBTEAMLOGNetworkControlPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNetworkControlChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGNetworkControlChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNetworkControlChangePolicyDetails;

	static new(): DBTEAMLOGNetworkControlChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNetworkControlChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGNetworkControlChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNetworkControlChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNetworkControlChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNetworkControlChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGNetworkControlChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNetworkControlChangePolicyType;

	static new(): DBTEAMLOGNetworkControlChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNetworkControlChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGNetworkControlPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNetworkControlPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNetworkControlPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGNetworkControlPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGNetworkControlPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGNetworkControlPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNetworkControlPolicy;

	static new(): DBTEAMLOGNetworkControlPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNetworkControlPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGNetworkControlPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGNonTeamMemberLogInfo extends DBTEAMLOGUserLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNonTeamMemberLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNonTeamMemberLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNonTeamMemberLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGNonTeamMemberLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNonTeamMemberLogInfo;

	static new(): DBTEAMLOGNonTeamMemberLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNonTeamMemberLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteAclInviteOnlyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteAclInviteOnlyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteAclInviteOnlyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteAclInviteOnlyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteAclInviteOnlyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteAclInviteOnlyDetails;

	static new(): DBTEAMLOGNoteAclInviteOnlyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteAclInviteOnlyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteAclInviteOnlyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteAclInviteOnlyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteAclInviteOnlyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteAclInviteOnlyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteAclInviteOnlyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteAclInviteOnlyType;

	static new(): DBTEAMLOGNoteAclInviteOnlyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteAclInviteOnlyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteAclLinkDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteAclLinkDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteAclLinkDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteAclLinkDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteAclLinkDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteAclLinkDetails;

	static new(): DBTEAMLOGNoteAclLinkDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteAclLinkDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteAclLinkType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteAclLinkType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteAclLinkType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteAclLinkTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteAclLinkTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteAclLinkType;

	static new(): DBTEAMLOGNoteAclLinkTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteAclLinkType): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteAclTeamLinkDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteAclTeamLinkDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteAclTeamLinkDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteAclTeamLinkDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteAclTeamLinkDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteAclTeamLinkDetails;

	static new(): DBTEAMLOGNoteAclTeamLinkDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteAclTeamLinkDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteAclTeamLinkType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteAclTeamLinkType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteAclTeamLinkType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteAclTeamLinkTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteAclTeamLinkTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteAclTeamLinkType;

	static new(): DBTEAMLOGNoteAclTeamLinkTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteAclTeamLinkType): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteShareReceiveDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteShareReceiveDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteShareReceiveDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteShareReceiveDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteShareReceiveDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteShareReceiveDetails;

	static new(): DBTEAMLOGNoteShareReceiveDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteShareReceiveDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteShareReceiveType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteShareReceiveType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteShareReceiveType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteShareReceiveTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteShareReceiveTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteShareReceiveType;

	static new(): DBTEAMLOGNoteShareReceiveTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteShareReceiveType): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteSharedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteSharedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteSharedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteSharedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteSharedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteSharedDetails;

	static new(): DBTEAMLOGNoteSharedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteSharedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGNoteSharedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGNoteSharedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGNoteSharedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGNoteSharedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGNoteSharedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGNoteSharedType;

	static new(): DBTEAMLOGNoteSharedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGNoteSharedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGOpenNoteSharedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGOpenNoteSharedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGOpenNoteSharedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGOpenNoteSharedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGOpenNoteSharedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGOpenNoteSharedDetails;

	static new(): DBTEAMLOGOpenNoteSharedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGOpenNoteSharedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGOpenNoteSharedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGOpenNoteSharedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGOpenNoteSharedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGOpenNoteSharedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGOpenNoteSharedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGOpenNoteSharedType;

	static new(): DBTEAMLOGOpenNoteSharedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGOpenNoteSharedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGOriginLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGOriginLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGOriginLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessMethod: DBTEAMLOGAccessMethodLogInfo;

	readonly geoLocation: DBTEAMLOGGeoLocationLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessMethod: DBTEAMLOGAccessMethodLogInfo; });

	constructor(o: { accessMethod: DBTEAMLOGAccessMethodLogInfo; geoLocation: DBTEAMLOGGeoLocationLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessMethod(accessMethod: DBTEAMLOGAccessMethodLogInfo): this;

	initWithAccessMethodGeoLocation(accessMethod: DBTEAMLOGAccessMethodLogInfo, geoLocation: DBTEAMLOGGeoLocationLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGOriginLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGOriginLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGOriginLogInfo;

	static new(): DBTEAMLOGOriginLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGOriginLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperAccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperAccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperAccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGPaperAccessTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { commenter: void; });

	constructor(o: { editor: void; });

	constructor(o: { other: void; });

	constructor(o: { viewer: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCommenter(): this;

	initWithEditor(): this;

	initWithOther(): this;

	initWithViewer(): this;

	isCommenter(): boolean;

	isEditor(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isViewer(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGPaperAccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperAccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperAccessType;

	static new(): DBTEAMLOGPaperAccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperAccessType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGPaperAccessTypeTag {

	Viewer = 0,

	Commenter = 1,

	Editor = 2,

	Other = 3
}

declare class DBTEAMLOGPaperAdminExportStartDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperAdminExportStartDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperAdminExportStartDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperAdminExportStartDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperAdminExportStartDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperAdminExportStartDetails;

	static new(): DBTEAMLOGPaperAdminExportStartDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperAdminExportStartDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperAdminExportStartType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperAdminExportStartType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperAdminExportStartType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperAdminExportStartTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperAdminExportStartTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperAdminExportStartType;

	static new(): DBTEAMLOGPaperAdminExportStartTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperAdminExportStartType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperChangeDeploymentPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperChangeDeploymentPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperChangeDeploymentPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMPOLICIESPaperDeploymentPolicy;

	readonly previousValue: DBTEAMPOLICIESPaperDeploymentPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMPOLICIESPaperDeploymentPolicy; });

	constructor(o: { DNewValue: DBTEAMPOLICIESPaperDeploymentPolicy; previousValue: DBTEAMPOLICIESPaperDeploymentPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMPOLICIESPaperDeploymentPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMPOLICIESPaperDeploymentPolicy, previousValue: DBTEAMPOLICIESPaperDeploymentPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperChangeDeploymentPolicyDetails;

	static new(): DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperChangeDeploymentPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperChangeDeploymentPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperChangeDeploymentPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperChangeDeploymentPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperChangeDeploymentPolicyType;

	static new(): DBTEAMLOGPaperChangeDeploymentPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperChangeDeploymentPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperChangeMemberLinkPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperChangeMemberLinkPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperChangeMemberLinkPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGPaperMemberPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGPaperMemberPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGPaperMemberPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperChangeMemberLinkPolicyDetails;

	static new(): DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperChangeMemberLinkPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperChangeMemberLinkPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperChangeMemberLinkPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperChangeMemberLinkPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperChangeMemberLinkPolicyType;

	static new(): DBTEAMLOGPaperChangeMemberLinkPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperChangeMemberLinkPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperChangeMemberPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperChangeMemberPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperChangeMemberPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGPaperMemberPolicy;

	readonly previousValue: DBTEAMLOGPaperMemberPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGPaperMemberPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGPaperMemberPolicy; previousValue: DBTEAMLOGPaperMemberPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGPaperMemberPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGPaperMemberPolicy, previousValue: DBTEAMLOGPaperMemberPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperChangeMemberPolicyDetails;

	static new(): DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperChangeMemberPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperChangeMemberPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperChangeMemberPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperChangeMemberPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperChangeMemberPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperChangeMemberPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperChangeMemberPolicyType;

	static new(): DBTEAMLOGPaperChangeMemberPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperChangeMemberPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMPOLICIESPaperEnabledPolicy;

	readonly previousValue: DBTEAMPOLICIESPaperEnabledPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMPOLICIESPaperEnabledPolicy; });

	constructor(o: { DNewValue: DBTEAMPOLICIESPaperEnabledPolicy; previousValue: DBTEAMPOLICIESPaperEnabledPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMPOLICIESPaperEnabledPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMPOLICIESPaperEnabledPolicy, previousValue: DBTEAMPOLICIESPaperEnabledPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperChangePolicyDetails;

	static new(): DBTEAMLOGPaperChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperChangePolicyType;

	static new(): DBTEAMLOGPaperChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentAddMemberDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentAddMemberDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentAddMemberDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentAddMemberDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentAddMemberDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentAddMemberDetails;

	static new(): DBTEAMLOGPaperContentAddMemberDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentAddMemberDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentAddMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentAddMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentAddMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentAddMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentAddMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentAddMemberType;

	static new(): DBTEAMLOGPaperContentAddMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentAddMemberType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentAddToFolderDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentAddToFolderDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentAddToFolderDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly parentAssetIndex: number;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; targetAssetIndex: number; parentAssetIndex: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuidTargetAssetIndexParentAssetIndex(eventUuid: string, targetAssetIndex: number, parentAssetIndex: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentAddToFolderDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentAddToFolderDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentAddToFolderDetails;

	static new(): DBTEAMLOGPaperContentAddToFolderDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentAddToFolderDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentAddToFolderType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentAddToFolderType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentAddToFolderType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentAddToFolderTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentAddToFolderTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentAddToFolderType;

	static new(): DBTEAMLOGPaperContentAddToFolderTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentAddToFolderType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentArchiveDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentArchiveDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentArchiveDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentArchiveDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentArchiveDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentArchiveDetails;

	static new(): DBTEAMLOGPaperContentArchiveDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentArchiveDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentArchiveType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentArchiveType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentArchiveType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentArchiveTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentArchiveTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentArchiveType;

	static new(): DBTEAMLOGPaperContentArchiveTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentArchiveType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentCreateDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentCreateDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentCreateDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentCreateDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentCreateDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentCreateDetails;

	static new(): DBTEAMLOGPaperContentCreateDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentCreateDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentCreateType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentCreateType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentCreateType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentCreateTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentCreateTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentCreateType;

	static new(): DBTEAMLOGPaperContentCreateTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentCreateType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentPermanentlyDeleteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentPermanentlyDeleteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentPermanentlyDeleteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentPermanentlyDeleteDetails;

	static new(): DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentPermanentlyDeleteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentPermanentlyDeleteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentPermanentlyDeleteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentPermanentlyDeleteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentPermanentlyDeleteType;

	static new(): DBTEAMLOGPaperContentPermanentlyDeleteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentPermanentlyDeleteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentRemoveFromFolderDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentRemoveFromFolderDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentRemoveFromFolderDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly parentAssetIndex: number;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; targetAssetIndex: number; parentAssetIndex: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuidTargetAssetIndexParentAssetIndex(eventUuid: string, targetAssetIndex: number, parentAssetIndex: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentRemoveFromFolderDetails;

	static new(): DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentRemoveFromFolderDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentRemoveFromFolderType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentRemoveFromFolderType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentRemoveFromFolderType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentRemoveFromFolderType;

	static new(): DBTEAMLOGPaperContentRemoveFromFolderTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentRemoveFromFolderType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentRemoveMemberDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentRemoveMemberDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentRemoveMemberDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentRemoveMemberDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentRemoveMemberDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentRemoveMemberDetails;

	static new(): DBTEAMLOGPaperContentRemoveMemberDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentRemoveMemberDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentRemoveMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentRemoveMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentRemoveMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentRemoveMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentRemoveMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentRemoveMemberType;

	static new(): DBTEAMLOGPaperContentRemoveMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentRemoveMemberType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentRenameDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentRenameDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentRenameDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentRenameDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentRenameDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentRenameDetails;

	static new(): DBTEAMLOGPaperContentRenameDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentRenameDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentRenameType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentRenameType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentRenameType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentRenameTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentRenameTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentRenameType;

	static new(): DBTEAMLOGPaperContentRenameTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentRenameType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentRestoreDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentRestoreDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentRestoreDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentRestoreDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentRestoreDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentRestoreDetails;

	static new(): DBTEAMLOGPaperContentRestoreDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentRestoreDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperContentRestoreType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperContentRestoreType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperContentRestoreType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperContentRestoreTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperContentRestoreTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperContentRestoreType;

	static new(): DBTEAMLOGPaperContentRestoreTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperContentRestoreType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocAddCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocAddCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocAddCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocAddCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocAddCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocAddCommentDetails;

	static new(): DBTEAMLOGPaperDocAddCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocAddCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocAddCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocAddCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocAddCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocAddCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocAddCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocAddCommentType;

	static new(): DBTEAMLOGPaperDocAddCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocAddCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocChangeMemberRoleDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocChangeMemberRoleDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocChangeMemberRoleDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessType: DBTEAMLOGPaperAccessType;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; accessType: DBTEAMLOGPaperAccessType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuidAccessType(eventUuid: string, accessType: DBTEAMLOGPaperAccessType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocChangeMemberRoleDetails;

	static new(): DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocChangeMemberRoleDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocChangeMemberRoleType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocChangeMemberRoleType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocChangeMemberRoleType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocChangeMemberRoleType;

	static new(): DBTEAMLOGPaperDocChangeMemberRoleTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocChangeMemberRoleType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocChangeSharingPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocChangeSharingPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocChangeSharingPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly publicSharingPolicy: string;

	readonly teamSharingPolicy: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; publicSharingPolicy: string; teamSharingPolicy: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidPublicSharingPolicyTeamSharingPolicy(eventUuid: string, publicSharingPolicy: string, teamSharingPolicy: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocChangeSharingPolicyDetails;

	static new(): DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocChangeSharingPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocChangeSharingPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocChangeSharingPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocChangeSharingPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocChangeSharingPolicyType;

	static new(): DBTEAMLOGPaperDocChangeSharingPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocChangeSharingPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocChangeSubscriptionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocChangeSubscriptionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocChangeSubscriptionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewSubscriptionLevel: string;

	readonly eventUuid: string;

	readonly previousSubscriptionLevel: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; dNewSubscriptionLevel: string; });

	constructor(o: { eventUuid: string; dNewSubscriptionLevel: string; previousSubscriptionLevel: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuidDNewSubscriptionLevel(eventUuid: string, dNewSubscriptionLevel: string): this;

	initWithEventUuidDNewSubscriptionLevelPreviousSubscriptionLevel(eventUuid: string, dNewSubscriptionLevel: string, previousSubscriptionLevel: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocChangeSubscriptionDetails;

	static new(): DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocChangeSubscriptionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocChangeSubscriptionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocChangeSubscriptionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocChangeSubscriptionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocChangeSubscriptionType;

	static new(): DBTEAMLOGPaperDocChangeSubscriptionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocChangeSubscriptionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocDeleteCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocDeleteCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocDeleteCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocDeleteCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocDeleteCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocDeleteCommentDetails;

	static new(): DBTEAMLOGPaperDocDeleteCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocDeleteCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocDeleteCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocDeleteCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocDeleteCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocDeleteCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocDeleteCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocDeleteCommentType;

	static new(): DBTEAMLOGPaperDocDeleteCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocDeleteCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocDeletedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocDeletedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocDeletedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocDeletedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocDeletedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocDeletedDetails;

	static new(): DBTEAMLOGPaperDocDeletedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocDeletedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocDeletedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocDeletedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocDeletedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocDeletedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocDeletedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocDeletedType;

	static new(): DBTEAMLOGPaperDocDeletedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocDeletedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocDownloadDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocDownloadDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocDownloadDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly exportFileFormat: DBTEAMLOGPaperDownloadFormat;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; exportFileFormat: DBTEAMLOGPaperDownloadFormat; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuidExportFileFormat(eventUuid: string, exportFileFormat: DBTEAMLOGPaperDownloadFormat): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocDownloadDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocDownloadDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocDownloadDetails;

	static new(): DBTEAMLOGPaperDocDownloadDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocDownloadDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocDownloadType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocDownloadType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocDownloadType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocDownloadTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocDownloadTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocDownloadType;

	static new(): DBTEAMLOGPaperDocDownloadTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocDownloadType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocEditCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocEditCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocEditCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocEditCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocEditCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocEditCommentDetails;

	static new(): DBTEAMLOGPaperDocEditCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocEditCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocEditCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocEditCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocEditCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocEditCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocEditCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocEditCommentType;

	static new(): DBTEAMLOGPaperDocEditCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocEditCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocEditDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocEditDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocEditDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocEditDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocEditDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocEditDetails;

	static new(): DBTEAMLOGPaperDocEditDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocEditDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocEditType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocEditType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocEditType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocEditTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocEditTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocEditType;

	static new(): DBTEAMLOGPaperDocEditTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocEditType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocFollowedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocFollowedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocFollowedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocFollowedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocFollowedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocFollowedDetails;

	static new(): DBTEAMLOGPaperDocFollowedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocFollowedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocFollowedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocFollowedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocFollowedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocFollowedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocFollowedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocFollowedType;

	static new(): DBTEAMLOGPaperDocFollowedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocFollowedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocMentionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocMentionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocMentionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocMentionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocMentionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocMentionDetails;

	static new(): DBTEAMLOGPaperDocMentionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocMentionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocMentionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocMentionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocMentionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocMentionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocMentionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocMentionType;

	static new(): DBTEAMLOGPaperDocMentionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocMentionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocOwnershipChangedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocOwnershipChangedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocOwnershipChangedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewOwnerUserId: string;

	readonly eventUuid: string;

	readonly oldOwnerUserId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; dNewOwnerUserId: string; });

	constructor(o: { eventUuid: string; dNewOwnerUserId: string; oldOwnerUserId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuidDNewOwnerUserId(eventUuid: string, dNewOwnerUserId: string): this;

	initWithEventUuidDNewOwnerUserIdOldOwnerUserId(eventUuid: string, dNewOwnerUserId: string, oldOwnerUserId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocOwnershipChangedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocOwnershipChangedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocOwnershipChangedDetails;

	static new(): DBTEAMLOGPaperDocOwnershipChangedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocOwnershipChangedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocOwnershipChangedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocOwnershipChangedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocOwnershipChangedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocOwnershipChangedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocOwnershipChangedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocOwnershipChangedType;

	static new(): DBTEAMLOGPaperDocOwnershipChangedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocOwnershipChangedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocRequestAccessDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocRequestAccessDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocRequestAccessDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocRequestAccessDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocRequestAccessDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocRequestAccessDetails;

	static new(): DBTEAMLOGPaperDocRequestAccessDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocRequestAccessDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocRequestAccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocRequestAccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocRequestAccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocRequestAccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocRequestAccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocRequestAccessType;

	static new(): DBTEAMLOGPaperDocRequestAccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocRequestAccessType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocResolveCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocResolveCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocResolveCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocResolveCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocResolveCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocResolveCommentDetails;

	static new(): DBTEAMLOGPaperDocResolveCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocResolveCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocResolveCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocResolveCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocResolveCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocResolveCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocResolveCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocResolveCommentType;

	static new(): DBTEAMLOGPaperDocResolveCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocResolveCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocRevertDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocRevertDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocRevertDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocRevertDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocRevertDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocRevertDetails;

	static new(): DBTEAMLOGPaperDocRevertDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocRevertDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocRevertType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocRevertType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocRevertType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocRevertTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocRevertTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocRevertType;

	static new(): DBTEAMLOGPaperDocRevertTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocRevertType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocSlackShareDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocSlackShareDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocSlackShareDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocSlackShareDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocSlackShareDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocSlackShareDetails;

	static new(): DBTEAMLOGPaperDocSlackShareDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocSlackShareDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocSlackShareType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocSlackShareType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocSlackShareType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocSlackShareTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocSlackShareTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocSlackShareType;

	static new(): DBTEAMLOGPaperDocSlackShareTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocSlackShareType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocTeamInviteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocTeamInviteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocTeamInviteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocTeamInviteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocTeamInviteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocTeamInviteDetails;

	static new(): DBTEAMLOGPaperDocTeamInviteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocTeamInviteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocTeamInviteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocTeamInviteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocTeamInviteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocTeamInviteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocTeamInviteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocTeamInviteType;

	static new(): DBTEAMLOGPaperDocTeamInviteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocTeamInviteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocTrashedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocTrashedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocTrashedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocTrashedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocTrashedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocTrashedDetails;

	static new(): DBTEAMLOGPaperDocTrashedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocTrashedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocTrashedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocTrashedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocTrashedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocTrashedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocTrashedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocTrashedType;

	static new(): DBTEAMLOGPaperDocTrashedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocTrashedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocUnresolveCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocUnresolveCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocUnresolveCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocUnresolveCommentDetails;

	static new(): DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocUnresolveCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocUnresolveCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocUnresolveCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocUnresolveCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocUnresolveCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocUnresolveCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocUnresolveCommentType;

	static new(): DBTEAMLOGPaperDocUnresolveCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocUnresolveCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocUntrashedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocUntrashedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocUntrashedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocUntrashedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocUntrashedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocUntrashedDetails;

	static new(): DBTEAMLOGPaperDocUntrashedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocUntrashedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocUntrashedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocUntrashedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocUntrashedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocUntrashedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocUntrashedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocUntrashedType;

	static new(): DBTEAMLOGPaperDocUntrashedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocUntrashedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocViewDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocViewDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocViewDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocViewDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocViewDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocViewDetails;

	static new(): DBTEAMLOGPaperDocViewDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocViewDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocViewType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocViewType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocViewType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocViewTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocViewTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocViewType;

	static new(): DBTEAMLOGPaperDocViewTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocViewType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDocumentLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDocumentLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDocumentLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly docId: string;

	readonly docTitle: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docId: string; docTitle: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocIdDocTitle(docId: string, docTitle: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperDocumentLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDocumentLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDocumentLogInfo;

	static new(): DBTEAMLOGPaperDocumentLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDocumentLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperDownloadFormat extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperDownloadFormat; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperDownloadFormat; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGPaperDownloadFormatTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { docx: void; });

	constructor(o: { html: void; });

	constructor(o: { markdown: void; });

	constructor(o: { other: void; });

	constructor(o: { pdf: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDocx(): this;

	initWithHtml(): this;

	initWithMarkdown(): this;

	initWithOther(): this;

	initWithPdf(): this;

	isDocx(): boolean;

	isEqual(object: any): boolean;

	isHtml(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMarkdown(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPdf(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGPaperDownloadFormatSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperDownloadFormatSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperDownloadFormat;

	static new(): DBTEAMLOGPaperDownloadFormatSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperDownloadFormat): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGPaperDownloadFormatTag {

	Docx = 0,

	Html = 1,

	Markdown = 2,

	Pdf = 3,

	Other = 4
}

declare class DBTEAMLOGPaperEnabledUsersGroupAdditionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperEnabledUsersGroupAdditionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperEnabledUsersGroupAdditionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperEnabledUsersGroupAdditionDetails;

	static new(): DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperEnabledUsersGroupAdditionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperEnabledUsersGroupAdditionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperEnabledUsersGroupAdditionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperEnabledUsersGroupAdditionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperEnabledUsersGroupAdditionType;

	static new(): DBTEAMLOGPaperEnabledUsersGroupAdditionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperEnabledUsersGroupAdditionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperEnabledUsersGroupRemovalDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperEnabledUsersGroupRemovalDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperEnabledUsersGroupRemovalDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperEnabledUsersGroupRemovalDetails;

	static new(): DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperEnabledUsersGroupRemovalDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperEnabledUsersGroupRemovalType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperEnabledUsersGroupRemovalType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperEnabledUsersGroupRemovalType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperEnabledUsersGroupRemovalType;

	static new(): DBTEAMLOGPaperEnabledUsersGroupRemovalTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperEnabledUsersGroupRemovalType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperExternalViewAllowDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperExternalViewAllowDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperExternalViewAllowDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperExternalViewAllowDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperExternalViewAllowDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperExternalViewAllowDetails;

	static new(): DBTEAMLOGPaperExternalViewAllowDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperExternalViewAllowDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperExternalViewAllowType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperExternalViewAllowType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperExternalViewAllowType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperExternalViewAllowTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperExternalViewAllowTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperExternalViewAllowType;

	static new(): DBTEAMLOGPaperExternalViewAllowTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperExternalViewAllowType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperExternalViewDefaultTeamDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperExternalViewDefaultTeamDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperExternalViewDefaultTeamDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperExternalViewDefaultTeamDetails;

	static new(): DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperExternalViewDefaultTeamDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperExternalViewDefaultTeamType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperExternalViewDefaultTeamType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperExternalViewDefaultTeamType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperExternalViewDefaultTeamType;

	static new(): DBTEAMLOGPaperExternalViewDefaultTeamTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperExternalViewDefaultTeamType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperExternalViewForbidDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperExternalViewForbidDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperExternalViewForbidDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperExternalViewForbidDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperExternalViewForbidDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperExternalViewForbidDetails;

	static new(): DBTEAMLOGPaperExternalViewForbidDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperExternalViewForbidDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperExternalViewForbidType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperExternalViewForbidType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperExternalViewForbidType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperExternalViewForbidTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperExternalViewForbidTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperExternalViewForbidType;

	static new(): DBTEAMLOGPaperExternalViewForbidTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperExternalViewForbidType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderChangeSubscriptionDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderChangeSubscriptionDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderChangeSubscriptionDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewSubscriptionLevel: string;

	readonly eventUuid: string;

	readonly previousSubscriptionLevel: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; dNewSubscriptionLevel: string; });

	constructor(o: { eventUuid: string; dNewSubscriptionLevel: string; previousSubscriptionLevel: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuidDNewSubscriptionLevel(eventUuid: string, dNewSubscriptionLevel: string): this;

	initWithEventUuidDNewSubscriptionLevelPreviousSubscriptionLevel(eventUuid: string, dNewSubscriptionLevel: string, previousSubscriptionLevel: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderChangeSubscriptionDetails;

	static new(): DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderChangeSubscriptionDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderChangeSubscriptionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderChangeSubscriptionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderChangeSubscriptionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderChangeSubscriptionType;

	static new(): DBTEAMLOGPaperFolderChangeSubscriptionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderChangeSubscriptionType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderDeletedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderDeletedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderDeletedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderDeletedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderDeletedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderDeletedDetails;

	static new(): DBTEAMLOGPaperFolderDeletedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderDeletedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderDeletedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderDeletedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderDeletedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderDeletedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderDeletedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderDeletedType;

	static new(): DBTEAMLOGPaperFolderDeletedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderDeletedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderFollowedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderFollowedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderFollowedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderFollowedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderFollowedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderFollowedDetails;

	static new(): DBTEAMLOGPaperFolderFollowedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderFollowedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderFollowedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderFollowedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderFollowedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderFollowedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderFollowedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderFollowedType;

	static new(): DBTEAMLOGPaperFolderFollowedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderFollowedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly folderId: string;

	readonly folderName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { folderId: string; folderName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFolderIdFolderName(folderId: string, folderName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderLogInfo;

	static new(): DBTEAMLOGPaperFolderLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderTeamInviteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderTeamInviteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderTeamInviteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderTeamInviteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderTeamInviteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderTeamInviteDetails;

	static new(): DBTEAMLOGPaperFolderTeamInviteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderTeamInviteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperFolderTeamInviteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperFolderTeamInviteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperFolderTeamInviteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPaperFolderTeamInviteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperFolderTeamInviteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperFolderTeamInviteType;

	static new(): DBTEAMLOGPaperFolderTeamInviteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperFolderTeamInviteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPaperMemberPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPaperMemberPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPaperMemberPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGPaperMemberPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { anyoneWithLink: void; });

	constructor(o: { onlyTeam: void; });

	constructor(o: { other: void; });

	constructor(o: { teamAndExplicitlyShared: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAnyoneWithLink(): this;

	initWithOnlyTeam(): this;

	initWithOther(): this;

	initWithTeamAndExplicitlyShared(): this;

	isAnyoneWithLink(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOnlyTeam(): boolean;

	isOther(): boolean;

	isTeamAndExplicitlyShared(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGPaperMemberPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGPaperMemberPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPaperMemberPolicy;

	static new(): DBTEAMLOGPaperMemberPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPaperMemberPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGPaperMemberPolicyTag {

	AnyoneWithLink = 0,

	OnlyTeam = 1,

	TeamAndExplicitlyShared = 2,

	Other = 3
}

declare class DBTEAMLOGParticipantLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGParticipantLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGParticipantLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly group: DBTEAMLOGGroupLogInfo;

	readonly tag: DBTEAMLOGParticipantLogInfoTag;

	readonly user: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { group: DBTEAMLOGGroupLogInfo; });

	constructor(o: { other: void; });

	constructor(o: { user: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGroup(group: DBTEAMLOGGroupLogInfo): this;

	initWithOther(): this;

	initWithUser(user: DBTEAMLOGUserLogInfo): this;

	isEqual(object: any): boolean;

	isGroup(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUser(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGParticipantLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGParticipantLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGParticipantLogInfo;

	static new(): DBTEAMLOGParticipantLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGParticipantLogInfo): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGParticipantLogInfoTag {

	User = 0,

	Group = 1,

	Other = 2
}

declare class DBTEAMLOGPassPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPassPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPassPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGPassPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { allow: void; });

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAllow(): this;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isAllow(): boolean;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGPassPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGPassPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPassPolicy;

	static new(): DBTEAMLOGPassPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPassPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGPassPolicyTag {

	Enabled = 0,

	Allow = 1,

	Disabled = 2,

	Other = 3
}

declare class DBTEAMLOGPasswordChangeDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPasswordChangeDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPasswordChangeDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPasswordChangeDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPasswordChangeDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPasswordChangeDetails;

	static new(): DBTEAMLOGPasswordChangeDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPasswordChangeDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPasswordChangeType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPasswordChangeType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPasswordChangeType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPasswordChangeTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPasswordChangeTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPasswordChangeType;

	static new(): DBTEAMLOGPasswordChangeTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPasswordChangeType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPasswordResetAllDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPasswordResetAllDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPasswordResetAllDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPasswordResetAllDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPasswordResetAllDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPasswordResetAllDetails;

	static new(): DBTEAMLOGPasswordResetAllDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPasswordResetAllDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPasswordResetAllType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPasswordResetAllType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPasswordResetAllType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPasswordResetAllTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPasswordResetAllTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPasswordResetAllType;

	static new(): DBTEAMLOGPasswordResetAllTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPasswordResetAllType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPasswordResetDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPasswordResetDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPasswordResetDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPasswordResetDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPasswordResetDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPasswordResetDetails;

	static new(): DBTEAMLOGPasswordResetDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPasswordResetDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPasswordResetType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPasswordResetType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPasswordResetType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPasswordResetTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPasswordResetTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPasswordResetType;

	static new(): DBTEAMLOGPasswordResetTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPasswordResetType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPathLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPathLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPathLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly contextual: string;

	readonly namespaceRelative: DBTEAMLOGNamespaceRelativePathLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { namespaceRelative: DBTEAMLOGNamespaceRelativePathLogInfo; });

	constructor(o: { namespaceRelative: DBTEAMLOGNamespaceRelativePathLogInfo; contextual: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNamespaceRelative(namespaceRelative: DBTEAMLOGNamespaceRelativePathLogInfo): this;

	initWithNamespaceRelativeContextual(namespaceRelative: DBTEAMLOGNamespaceRelativePathLogInfo, contextual: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPathLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGPathLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPathLogInfo;

	static new(): DBTEAMLOGPathLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPathLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGPermanentDeleteChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPermanentDeleteChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPermanentDeleteChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGContentPermanentDeletePolicy;

	readonly previousValue: DBTEAMLOGContentPermanentDeletePolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGContentPermanentDeletePolicy; });

	constructor(o: { DNewValue: DBTEAMLOGContentPermanentDeletePolicy; previousValue: DBTEAMLOGContentPermanentDeletePolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGContentPermanentDeletePolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGContentPermanentDeletePolicy, previousValue: DBTEAMLOGContentPermanentDeletePolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPermanentDeleteChangePolicyDetails;

	static new(): DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPermanentDeleteChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGPermanentDeleteChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPermanentDeleteChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPermanentDeleteChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPermanentDeleteChangePolicyType;

	static new(): DBTEAMLOGPermanentDeleteChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPermanentDeleteChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGPlacementRestriction extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGPlacementRestriction; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGPlacementRestriction; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGPlacementRestrictionTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { europeOnly: void; });

	constructor(o: { none: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEuropeOnly(): this;

	initWithNone(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isEuropeOnly(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNone(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGPlacementRestrictionSerializer extends NSObject {

	static alloc(): DBTEAMLOGPlacementRestrictionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGPlacementRestriction;

	static new(): DBTEAMLOGPlacementRestrictionSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGPlacementRestriction): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGPlacementRestrictionTag {

	EuropeOnly = 0,

	None = 1,

	Other = 2
}

declare class DBTEAMLOGQuickActionType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGQuickActionType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGQuickActionType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGQuickActionTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { deleteSharedLink: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDeleteSharedLink(): this;

	initWithOther(): this;

	isDeleteSharedLink(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGQuickActionTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGQuickActionTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGQuickActionType;

	static new(): DBTEAMLOGQuickActionTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGQuickActionType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGQuickActionTypeTag {

	DeleteSharedLink = 0,

	Other = 1
}

declare class DBTEAMLOGRelocateAssetReferencesLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGRelocateAssetReferencesLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGRelocateAssetReferencesLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly destAssetIndex: number;

	readonly srcAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { srcAssetIndex: number; destAssetIndex: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSrcAssetIndexDestAssetIndex(srcAssetIndex: number, destAssetIndex: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGRelocateAssetReferencesLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGRelocateAssetReferencesLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGRelocateAssetReferencesLogInfo;

	static new(): DBTEAMLOGRelocateAssetReferencesLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGRelocateAssetReferencesLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGResellerLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGResellerLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGResellerLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly resellerEmail: string;

	readonly resellerName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { resellerName: string; resellerEmail: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithResellerNameResellerEmail(resellerName: string, resellerEmail: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGResellerLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGResellerLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGResellerLogInfo;

	static new(): DBTEAMLOGResellerLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGResellerLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGResellerSupportSessionEndDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGResellerSupportSessionEndDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGResellerSupportSessionEndDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGResellerSupportSessionEndDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGResellerSupportSessionEndDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGResellerSupportSessionEndDetails;

	static new(): DBTEAMLOGResellerSupportSessionEndDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGResellerSupportSessionEndDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGResellerSupportSessionEndType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGResellerSupportSessionEndType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGResellerSupportSessionEndType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGResellerSupportSessionEndTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGResellerSupportSessionEndTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGResellerSupportSessionEndType;

	static new(): DBTEAMLOGResellerSupportSessionEndTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGResellerSupportSessionEndType): NSDictionary<string, any>;
}

declare class DBTEAMLOGResellerSupportSessionStartDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGResellerSupportSessionStartDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGResellerSupportSessionStartDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGResellerSupportSessionStartDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGResellerSupportSessionStartDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGResellerSupportSessionStartDetails;

	static new(): DBTEAMLOGResellerSupportSessionStartDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGResellerSupportSessionStartDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGResellerSupportSessionStartType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGResellerSupportSessionStartType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGResellerSupportSessionStartType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGResellerSupportSessionStartTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGResellerSupportSessionStartTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGResellerSupportSessionStartType;

	static new(): DBTEAMLOGResellerSupportSessionStartTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGResellerSupportSessionStartType): NSDictionary<string, any>;
}

declare class DBTEAMLOGRouteObjects extends NSObject {

	static DBTEAMLOGGetEvents(): DBRoute;

	static DBTEAMLOGGetEventsContinue(): DBRoute;

	static alloc(): DBTEAMLOGRouteObjects; // inherited from NSObject

	static new(): DBTEAMLOGRouteObjects; // inherited from NSObject
}

declare class DBTEAMLOGSecondaryMailsPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSecondaryMailsPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSecondaryMailsPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSecondaryMailsPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSecondaryMailsPolicyChangedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSecondaryMailsPolicyChangedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSecondaryMailsPolicyChangedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSecondaryMailsPolicy;

	readonly previousValue: DBTEAMLOGSecondaryMailsPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: DBTEAMLOGSecondaryMailsPolicy; dNewValue: DBTEAMLOGSecondaryMailsPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: DBTEAMLOGSecondaryMailsPolicy, dNewValue: DBTEAMLOGSecondaryMailsPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSecondaryMailsPolicyChangedDetails;

	static new(): DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSecondaryMailsPolicyChangedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSecondaryMailsPolicyChangedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSecondaryMailsPolicyChangedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSecondaryMailsPolicyChangedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSecondaryMailsPolicyChangedType;

	static new(): DBTEAMLOGSecondaryMailsPolicyChangedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSecondaryMailsPolicyChangedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSecondaryMailsPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGSecondaryMailsPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSecondaryMailsPolicy;

	static new(): DBTEAMLOGSecondaryMailsPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSecondaryMailsPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSecondaryMailsPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGSessionLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sessionId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sessionId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSessionId(sessionId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSessionLogInfo;

	static new(): DBTEAMLOGSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfAddGroupDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfAddGroupDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfAddGroupDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly sharingPermission: string;

	readonly targetAssetIndex: number;

	readonly teamName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; teamName: string; });

	constructor(o: { targetAssetIndex: number; originalFolderName: string; teamName: string; sharingPermission: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderNameTeamName(targetAssetIndex: number, originalFolderName: string, teamName: string): this;

	initWithTargetAssetIndexOriginalFolderNameTeamNameSharingPermission(targetAssetIndex: number, originalFolderName: string, teamName: string, sharingPermission: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfAddGroupDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfAddGroupDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfAddGroupDetails;

	static new(): DBTEAMLOGSfAddGroupDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfAddGroupDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfAddGroupType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfAddGroupType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfAddGroupType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfAddGroupTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfAddGroupTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfAddGroupType;

	static new(): DBTEAMLOGSfAddGroupTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfAddGroupType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly sharedFolderType: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	constructor(o: { targetAssetIndex: number; originalFolderName: string; sharedFolderType: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	initWithTargetAssetIndexOriginalFolderNameSharedFolderType(targetAssetIndex: number, originalFolderName: string, sharedFolderType: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails;

	static new(): DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfAllowNonMembersToViewSharedLinksType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfAllowNonMembersToViewSharedLinksType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfAllowNonMembersToViewSharedLinksType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfAllowNonMembersToViewSharedLinksType;

	static new(): DBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfAllowNonMembersToViewSharedLinksType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfExternalInviteWarnDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfExternalInviteWarnDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfExternalInviteWarnDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewSharingPermission: string;

	readonly originalFolderName: string;

	readonly previousSharingPermission: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	constructor(o: { targetAssetIndex: number; originalFolderName: string; dNewSharingPermission: string; previousSharingPermission: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	initWithTargetAssetIndexOriginalFolderNameDNewSharingPermissionPreviousSharingPermission(targetAssetIndex: number, originalFolderName: string, dNewSharingPermission: string, previousSharingPermission: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfExternalInviteWarnDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfExternalInviteWarnDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfExternalInviteWarnDetails;

	static new(): DBTEAMLOGSfExternalInviteWarnDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfExternalInviteWarnDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfExternalInviteWarnType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfExternalInviteWarnType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfExternalInviteWarnType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfExternalInviteWarnTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfExternalInviteWarnTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfExternalInviteWarnType;

	static new(): DBTEAMLOGSfExternalInviteWarnTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfExternalInviteWarnType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfFbInviteChangeRoleDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfFbInviteChangeRoleDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfFbInviteChangeRoleDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewSharingPermission: string;

	readonly originalFolderName: string;

	readonly previousSharingPermission: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	constructor(o: { targetAssetIndex: number; originalFolderName: string; previousSharingPermission: string; dNewSharingPermission: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	initWithTargetAssetIndexOriginalFolderNamePreviousSharingPermissionDNewSharingPermission(targetAssetIndex: number, originalFolderName: string, previousSharingPermission: string, dNewSharingPermission: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfFbInviteChangeRoleDetails;

	static new(): DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfFbInviteChangeRoleDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfFbInviteChangeRoleType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfFbInviteChangeRoleType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfFbInviteChangeRoleType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfFbInviteChangeRoleTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfFbInviteChangeRoleTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfFbInviteChangeRoleType;

	static new(): DBTEAMLOGSfFbInviteChangeRoleTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfFbInviteChangeRoleType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfFbInviteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfFbInviteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfFbInviteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly sharingPermission: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	constructor(o: { targetAssetIndex: number; originalFolderName: string; sharingPermission: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	initWithTargetAssetIndexOriginalFolderNameSharingPermission(targetAssetIndex: number, originalFolderName: string, sharingPermission: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfFbInviteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfFbInviteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfFbInviteDetails;

	static new(): DBTEAMLOGSfFbInviteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfFbInviteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfFbInviteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfFbInviteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfFbInviteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfFbInviteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfFbInviteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfFbInviteType;

	static new(): DBTEAMLOGSfFbInviteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfFbInviteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfFbUninviteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfFbUninviteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfFbUninviteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfFbUninviteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfFbUninviteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfFbUninviteDetails;

	static new(): DBTEAMLOGSfFbUninviteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfFbUninviteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfFbUninviteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfFbUninviteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfFbUninviteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfFbUninviteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfFbUninviteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfFbUninviteType;

	static new(): DBTEAMLOGSfFbUninviteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfFbUninviteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfInviteGroupDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfInviteGroupDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfInviteGroupDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndex(targetAssetIndex: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfInviteGroupDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfInviteGroupDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfInviteGroupDetails;

	static new(): DBTEAMLOGSfInviteGroupDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfInviteGroupDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfInviteGroupType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfInviteGroupType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfInviteGroupType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfInviteGroupTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfInviteGroupTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfInviteGroupType;

	static new(): DBTEAMLOGSfInviteGroupTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfInviteGroupType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamGrantAccessDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamGrantAccessDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamGrantAccessDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamGrantAccessDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamGrantAccessDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamGrantAccessDetails;

	static new(): DBTEAMLOGSfTeamGrantAccessDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamGrantAccessDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamGrantAccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamGrantAccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamGrantAccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamGrantAccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamGrantAccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamGrantAccessType;

	static new(): DBTEAMLOGSfTeamGrantAccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamGrantAccessType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamInviteChangeRoleDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamInviteChangeRoleDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamInviteChangeRoleDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewSharingPermission: string;

	readonly originalFolderName: string;

	readonly previousSharingPermission: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	constructor(o: { targetAssetIndex: number; originalFolderName: string; dNewSharingPermission: string; previousSharingPermission: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	initWithTargetAssetIndexOriginalFolderNameDNewSharingPermissionPreviousSharingPermission(targetAssetIndex: number, originalFolderName: string, dNewSharingPermission: string, previousSharingPermission: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamInviteChangeRoleDetails;

	static new(): DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamInviteChangeRoleDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamInviteChangeRoleType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamInviteChangeRoleType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamInviteChangeRoleType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamInviteChangeRoleType;

	static new(): DBTEAMLOGSfTeamInviteChangeRoleTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamInviteChangeRoleType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamInviteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamInviteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamInviteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly sharingPermission: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	constructor(o: { targetAssetIndex: number; originalFolderName: string; sharingPermission: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	initWithTargetAssetIndexOriginalFolderNameSharingPermission(targetAssetIndex: number, originalFolderName: string, sharingPermission: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamInviteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamInviteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamInviteDetails;

	static new(): DBTEAMLOGSfTeamInviteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamInviteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamInviteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamInviteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamInviteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamInviteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamInviteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamInviteType;

	static new(): DBTEAMLOGSfTeamInviteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamInviteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamJoinDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamJoinDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamJoinDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamJoinDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamJoinDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamJoinDetails;

	static new(): DBTEAMLOGSfTeamJoinDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamJoinDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamJoinFromOobLinkDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamJoinFromOobLinkDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamJoinFromOobLinkDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly sharingPermission: string;

	readonly targetAssetIndex: number;

	readonly tokenKey: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	constructor(o: { targetAssetIndex: number; originalFolderName: string; tokenKey: string; sharingPermission: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	initWithTargetAssetIndexOriginalFolderNameTokenKeySharingPermission(targetAssetIndex: number, originalFolderName: string, tokenKey: string, sharingPermission: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamJoinFromOobLinkDetails;

	static new(): DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamJoinFromOobLinkDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamJoinFromOobLinkType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamJoinFromOobLinkType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamJoinFromOobLinkType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamJoinFromOobLinkType;

	static new(): DBTEAMLOGSfTeamJoinFromOobLinkTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamJoinFromOobLinkType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamJoinType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamJoinType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamJoinType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamJoinTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamJoinTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamJoinType;

	static new(): DBTEAMLOGSfTeamJoinTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamJoinType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamUninviteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamUninviteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamUninviteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly originalFolderName: string;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; originalFolderName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndexOriginalFolderName(targetAssetIndex: number, originalFolderName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamUninviteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamUninviteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamUninviteDetails;

	static new(): DBTEAMLOGSfTeamUninviteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamUninviteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSfTeamUninviteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSfTeamUninviteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSfTeamUninviteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSfTeamUninviteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSfTeamUninviteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSfTeamUninviteType;

	static new(): DBTEAMLOGSfTeamUninviteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSfTeamUninviteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentAddInviteesDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentAddInviteesDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentAddInviteesDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invitees: NSArray<string>;

	readonly sharedContentAccessLevel: DBSHARINGAccessLevel;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedContentAccessLevel: DBSHARINGAccessLevel; invitees: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedContentAccessLevelInvitees(sharedContentAccessLevel: DBSHARINGAccessLevel, invitees: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentAddInviteesDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentAddInviteesDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentAddInviteesDetails;

	static new(): DBTEAMLOGSharedContentAddInviteesDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentAddInviteesDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentAddInviteesType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentAddInviteesType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentAddInviteesType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentAddInviteesTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentAddInviteesTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentAddInviteesType;

	static new(): DBTEAMLOGSharedContentAddInviteesTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentAddInviteesType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentAddLinkExpiryDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentAddLinkExpiryDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentAddLinkExpiryDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValue(dNewValue: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentAddLinkExpiryDetails;

	static new(): DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentAddLinkExpiryDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentAddLinkExpiryType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentAddLinkExpiryType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentAddLinkExpiryType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentAddLinkExpiryType;

	static new(): DBTEAMLOGSharedContentAddLinkExpiryTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentAddLinkExpiryType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentAddLinkPasswordDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentAddLinkPasswordDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentAddLinkPasswordDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentAddLinkPasswordDetails;

	static new(): DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentAddLinkPasswordDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentAddLinkPasswordType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentAddLinkPasswordType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentAddLinkPasswordType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentAddLinkPasswordType;

	static new(): DBTEAMLOGSharedContentAddLinkPasswordTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentAddLinkPasswordType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentAddMemberDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentAddMemberDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentAddMemberDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedContentAccessLevel: DBSHARINGAccessLevel;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedContentAccessLevel: DBSHARINGAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedContentAccessLevel(sharedContentAccessLevel: DBSHARINGAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentAddMemberDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentAddMemberDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentAddMemberDetails;

	static new(): DBTEAMLOGSharedContentAddMemberDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentAddMemberDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentAddMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentAddMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentAddMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentAddMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentAddMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentAddMemberType;

	static new(): DBTEAMLOGSharedContentAddMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentAddMemberType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeDownloadsPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeDownloadsPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeDownloadsPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGDownloadPolicyType;

	readonly previousValue: DBTEAMLOGDownloadPolicyType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGDownloadPolicyType; });

	constructor(o: { DNewValue: DBTEAMLOGDownloadPolicyType; previousValue: DBTEAMLOGDownloadPolicyType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGDownloadPolicyType): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGDownloadPolicyType, previousValue: DBTEAMLOGDownloadPolicyType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeDownloadsPolicyDetails;

	static new(): DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeDownloadsPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeDownloadsPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeDownloadsPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeDownloadsPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeDownloadsPolicyType;

	static new(): DBTEAMLOGSharedContentChangeDownloadsPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeDownloadsPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeInviteeRoleDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeInviteeRoleDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeInviteeRoleDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewAccessLevel: DBSHARINGAccessLevel;

	readonly invitee: string;

	readonly previousAccessLevel: DBSHARINGAccessLevel;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewAccessLevel: DBSHARINGAccessLevel; invitee: string; });

	constructor(o: { DNewAccessLevel: DBSHARINGAccessLevel; invitee: string; previousAccessLevel: DBSHARINGAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewAccessLevelInvitee(dNewAccessLevel: DBSHARINGAccessLevel, invitee: string): this;

	initWithDNewAccessLevelInviteePreviousAccessLevel(dNewAccessLevel: DBSHARINGAccessLevel, invitee: string, previousAccessLevel: DBSHARINGAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeInviteeRoleDetails;

	static new(): DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeInviteeRoleDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeInviteeRoleType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeInviteeRoleType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeInviteeRoleType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeInviteeRoleType;

	static new(): DBTEAMLOGSharedContentChangeInviteeRoleTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeInviteeRoleType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeLinkAudienceDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeLinkAudienceDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeLinkAudienceDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBSHARINGLinkAudience;

	readonly previousValue: DBSHARINGLinkAudience;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBSHARINGLinkAudience; });

	constructor(o: { DNewValue: DBSHARINGLinkAudience; previousValue: DBSHARINGLinkAudience; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBSHARINGLinkAudience): this;

	initWithDNewValuePreviousValue(dNewValue: DBSHARINGLinkAudience, previousValue: DBSHARINGLinkAudience): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeLinkAudienceDetails;

	static new(): DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeLinkAudienceDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeLinkAudienceType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeLinkAudienceType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeLinkAudienceType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeLinkAudienceType;

	static new(): DBTEAMLOGSharedContentChangeLinkAudienceTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeLinkAudienceType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeLinkExpiryDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeLinkExpiryDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeLinkExpiryDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: Date;

	readonly previousValue: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: Date; previousValue: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: Date, previousValue: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeLinkExpiryDetails;

	static new(): DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeLinkExpiryDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeLinkExpiryType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeLinkExpiryType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeLinkExpiryType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeLinkExpiryType;

	static new(): DBTEAMLOGSharedContentChangeLinkExpiryTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeLinkExpiryType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeLinkPasswordDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeLinkPasswordDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeLinkPasswordDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeLinkPasswordDetails;

	static new(): DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeLinkPasswordDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeLinkPasswordType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeLinkPasswordType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeLinkPasswordType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeLinkPasswordType;

	static new(): DBTEAMLOGSharedContentChangeLinkPasswordTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeLinkPasswordType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeMemberRoleDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeMemberRoleDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeMemberRoleDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewAccessLevel: DBSHARINGAccessLevel;

	readonly previousAccessLevel: DBSHARINGAccessLevel;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewAccessLevel: DBSHARINGAccessLevel; });

	constructor(o: { DNewAccessLevel: DBSHARINGAccessLevel; previousAccessLevel: DBSHARINGAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewAccessLevel(dNewAccessLevel: DBSHARINGAccessLevel): this;

	initWithDNewAccessLevelPreviousAccessLevel(dNewAccessLevel: DBSHARINGAccessLevel, previousAccessLevel: DBSHARINGAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeMemberRoleDetails;

	static new(): DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeMemberRoleDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeMemberRoleType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeMemberRoleType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeMemberRoleType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeMemberRoleType;

	static new(): DBTEAMLOGSharedContentChangeMemberRoleTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeMemberRoleType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBSHARINGViewerInfoPolicy;

	readonly previousValue: DBSHARINGViewerInfoPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBSHARINGViewerInfoPolicy; });

	constructor(o: { DNewValue: DBSHARINGViewerInfoPolicy; previousValue: DBSHARINGViewerInfoPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBSHARINGViewerInfoPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBSHARINGViewerInfoPolicy, previousValue: DBSHARINGViewerInfoPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails;

	static new(): DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentChangeViewerInfoPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentChangeViewerInfoPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentChangeViewerInfoPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentChangeViewerInfoPolicyType;

	static new(): DBTEAMLOGSharedContentChangeViewerInfoPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentChangeViewerInfoPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentClaimInvitationDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentClaimInvitationDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentClaimInvitationDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedContentLink: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedContentLink: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedContentLink(sharedContentLink: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentClaimInvitationDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentClaimInvitationDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentClaimInvitationDetails;

	static new(): DBTEAMLOGSharedContentClaimInvitationDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentClaimInvitationDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentClaimInvitationType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentClaimInvitationType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentClaimInvitationType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentClaimInvitationTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentClaimInvitationTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentClaimInvitationType;

	static new(): DBTEAMLOGSharedContentClaimInvitationTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentClaimInvitationType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentCopyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentCopyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentCopyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly destinationPath: string;

	readonly sharedContentAccessLevel: DBSHARINGAccessLevel;

	readonly sharedContentLink: string;

	readonly sharedContentOwner: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedContentLink: string; sharedContentAccessLevel: DBSHARINGAccessLevel; destinationPath: string; });

	constructor(o: { sharedContentLink: string; sharedContentAccessLevel: DBSHARINGAccessLevel; destinationPath: string; sharedContentOwner: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedContentLinkSharedContentAccessLevelDestinationPath(sharedContentLink: string, sharedContentAccessLevel: DBSHARINGAccessLevel, destinationPath: string): this;

	initWithSharedContentLinkSharedContentAccessLevelDestinationPathSharedContentOwner(sharedContentLink: string, sharedContentAccessLevel: DBSHARINGAccessLevel, destinationPath: string, sharedContentOwner: DBTEAMLOGUserLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentCopyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentCopyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentCopyDetails;

	static new(): DBTEAMLOGSharedContentCopyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentCopyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentCopyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentCopyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentCopyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentCopyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentCopyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentCopyType;

	static new(): DBTEAMLOGSharedContentCopyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentCopyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentDownloadDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentDownloadDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentDownloadDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedContentAccessLevel: DBSHARINGAccessLevel;

	readonly sharedContentLink: string;

	readonly sharedContentOwner: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedContentLink: string; sharedContentAccessLevel: DBSHARINGAccessLevel; });

	constructor(o: { sharedContentLink: string; sharedContentAccessLevel: DBSHARINGAccessLevel; sharedContentOwner: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedContentLinkSharedContentAccessLevel(sharedContentLink: string, sharedContentAccessLevel: DBSHARINGAccessLevel): this;

	initWithSharedContentLinkSharedContentAccessLevelSharedContentOwner(sharedContentLink: string, sharedContentAccessLevel: DBSHARINGAccessLevel, sharedContentOwner: DBTEAMLOGUserLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentDownloadDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentDownloadDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentDownloadDetails;

	static new(): DBTEAMLOGSharedContentDownloadDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentDownloadDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentDownloadType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentDownloadType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentDownloadType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentDownloadTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentDownloadTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentDownloadType;

	static new(): DBTEAMLOGSharedContentDownloadTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentDownloadType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRelinquishMembershipDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRelinquishMembershipDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRelinquishMembershipDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRelinquishMembershipDetails;

	static new(): DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRelinquishMembershipDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRelinquishMembershipType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRelinquishMembershipType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRelinquishMembershipType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRelinquishMembershipType;

	static new(): DBTEAMLOGSharedContentRelinquishMembershipTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRelinquishMembershipType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRemoveInviteesDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRemoveInviteesDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRemoveInviteesDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invitees: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invitees: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvitees(invitees: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRemoveInviteesDetails;

	static new(): DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRemoveInviteesDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRemoveInviteesType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRemoveInviteesType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRemoveInviteesType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRemoveInviteesTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRemoveInviteesTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRemoveInviteesType;

	static new(): DBTEAMLOGSharedContentRemoveInviteesTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRemoveInviteesType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRemoveLinkExpiryDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRemoveLinkExpiryDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRemoveLinkExpiryDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly previousValue: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { previousValue: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithPreviousValue(previousValue: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRemoveLinkExpiryDetails;

	static new(): DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRemoveLinkExpiryDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRemoveLinkExpiryType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRemoveLinkExpiryType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRemoveLinkExpiryType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRemoveLinkExpiryType;

	static new(): DBTEAMLOGSharedContentRemoveLinkExpiryTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRemoveLinkExpiryType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRemoveLinkPasswordDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRemoveLinkPasswordDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRemoveLinkPasswordDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRemoveLinkPasswordDetails;

	static new(): DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRemoveLinkPasswordDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRemoveLinkPasswordType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRemoveLinkPasswordType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRemoveLinkPasswordType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRemoveLinkPasswordType;

	static new(): DBTEAMLOGSharedContentRemoveLinkPasswordTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRemoveLinkPasswordType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRemoveMemberDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRemoveMemberDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRemoveMemberDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedContentAccessLevel: DBSHARINGAccessLevel;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedContentAccessLevel: DBSHARINGAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedContentAccessLevel(sharedContentAccessLevel: DBSHARINGAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRemoveMemberDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRemoveMemberDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRemoveMemberDetails;

	static new(): DBTEAMLOGSharedContentRemoveMemberDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRemoveMemberDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRemoveMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRemoveMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRemoveMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRemoveMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRemoveMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRemoveMemberType;

	static new(): DBTEAMLOGSharedContentRemoveMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRemoveMemberType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRequestAccessDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRequestAccessDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRequestAccessDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedContentLink: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedContentLink: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedContentLink(sharedContentLink: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRequestAccessDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRequestAccessDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRequestAccessDetails;

	static new(): DBTEAMLOGSharedContentRequestAccessDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRequestAccessDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentRequestAccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentRequestAccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentRequestAccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentRequestAccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentRequestAccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentRequestAccessType;

	static new(): DBTEAMLOGSharedContentRequestAccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentRequestAccessType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentUnshareDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentUnshareDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentUnshareDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentUnshareDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentUnshareDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentUnshareDetails;

	static new(): DBTEAMLOGSharedContentUnshareDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentUnshareDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentUnshareType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentUnshareType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentUnshareType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentUnshareTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentUnshareTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentUnshareType;

	static new(): DBTEAMLOGSharedContentUnshareTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentUnshareType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentViewDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentViewDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentViewDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedContentAccessLevel: DBSHARINGAccessLevel;

	readonly sharedContentLink: string;

	readonly sharedContentOwner: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedContentLink: string; sharedContentAccessLevel: DBSHARINGAccessLevel; });

	constructor(o: { sharedContentLink: string; sharedContentAccessLevel: DBSHARINGAccessLevel; sharedContentOwner: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedContentLinkSharedContentAccessLevel(sharedContentLink: string, sharedContentAccessLevel: DBSHARINGAccessLevel): this;

	initWithSharedContentLinkSharedContentAccessLevelSharedContentOwner(sharedContentLink: string, sharedContentAccessLevel: DBSHARINGAccessLevel, sharedContentOwner: DBTEAMLOGUserLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentViewDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentViewDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentViewDetails;

	static new(): DBTEAMLOGSharedContentViewDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentViewDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedContentViewType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedContentViewType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedContentViewType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedContentViewTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedContentViewTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedContentViewType;

	static new(): DBTEAMLOGSharedContentViewTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedContentViewType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderChangeLinkPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderChangeLinkPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderChangeLinkPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBSHARINGSharedLinkPolicy;

	readonly previousValue: DBSHARINGSharedLinkPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBSHARINGSharedLinkPolicy; });

	constructor(o: { DNewValue: DBSHARINGSharedLinkPolicy; previousValue: DBSHARINGSharedLinkPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBSHARINGSharedLinkPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBSHARINGSharedLinkPolicy, previousValue: DBSHARINGSharedLinkPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderChangeLinkPolicyDetails;

	static new(): DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderChangeLinkPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderChangeLinkPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderChangeLinkPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderChangeLinkPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderChangeLinkPolicyType;

	static new(): DBTEAMLOGSharedFolderChangeLinkPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderChangeLinkPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSharedFolderMembersInheritancePolicy;

	readonly previousValue: DBTEAMLOGSharedFolderMembersInheritancePolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGSharedFolderMembersInheritancePolicy; });

	constructor(o: { DNewValue: DBTEAMLOGSharedFolderMembersInheritancePolicy; previousValue: DBTEAMLOGSharedFolderMembersInheritancePolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGSharedFolderMembersInheritancePolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGSharedFolderMembersInheritancePolicy, previousValue: DBTEAMLOGSharedFolderMembersInheritancePolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails;

	static new(): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType;

	static new(): DBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBSHARINGAclUpdatePolicy;

	readonly previousValue: DBSHARINGAclUpdatePolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBSHARINGAclUpdatePolicy; });

	constructor(o: { DNewValue: DBSHARINGAclUpdatePolicy; previousValue: DBSHARINGAclUpdatePolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBSHARINGAclUpdatePolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBSHARINGAclUpdatePolicy, previousValue: DBSHARINGAclUpdatePolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails;

	static new(): DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderChangeMembersManagementPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersManagementPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderChangeMembersManagementPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderChangeMembersManagementPolicyType;

	static new(): DBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderChangeMembersManagementPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderChangeMembersPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderChangeMembersPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBSHARINGMemberPolicy;

	readonly previousValue: DBSHARINGMemberPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBSHARINGMemberPolicy; });

	constructor(o: { DNewValue: DBSHARINGMemberPolicy; previousValue: DBSHARINGMemberPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBSHARINGMemberPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBSHARINGMemberPolicy, previousValue: DBSHARINGMemberPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderChangeMembersPolicyDetails;

	static new(): DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderChangeMembersPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderChangeMembersPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderChangeMembersPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderChangeMembersPolicyType;

	static new(): DBTEAMLOGSharedFolderChangeMembersPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderChangeMembersPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderCreateDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderCreateDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderCreateDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly targetNsId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { targetNsId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithTargetNsId(targetNsId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderCreateDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderCreateDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderCreateDetails;

	static new(): DBTEAMLOGSharedFolderCreateDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderCreateDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderCreateType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderCreateType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderCreateType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderCreateTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderCreateTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderCreateType;

	static new(): DBTEAMLOGSharedFolderCreateTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderCreateType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderDeclineInvitationDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderDeclineInvitationDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderDeclineInvitationDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderDeclineInvitationDetails;

	static new(): DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderDeclineInvitationDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderDeclineInvitationType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderDeclineInvitationType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderDeclineInvitationType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderDeclineInvitationType;

	static new(): DBTEAMLOGSharedFolderDeclineInvitationTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderDeclineInvitationType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderMembersInheritancePolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderMembersInheritancePolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderMembersInheritancePolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSharedFolderMembersInheritancePolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { dontInheritMembers: void; });

	constructor(o: { inheritMembers: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDontInheritMembers(): this;

	initWithInheritMembers(): this;

	initWithOther(): this;

	isDontInheritMembers(): boolean;

	isEqual(object: any): boolean;

	isInheritMembers(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSharedFolderMembersInheritancePolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderMembersInheritancePolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderMembersInheritancePolicy;

	static new(): DBTEAMLOGSharedFolderMembersInheritancePolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderMembersInheritancePolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSharedFolderMembersInheritancePolicyTag {

	InheritMembers = 0,

	DontInheritMembers = 1,

	Other = 2
}

declare class DBTEAMLOGSharedFolderMountDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderMountDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderMountDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderMountDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderMountDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderMountDetails;

	static new(): DBTEAMLOGSharedFolderMountDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderMountDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderMountType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderMountType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderMountType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderMountTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderMountTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderMountType;

	static new(): DBTEAMLOGSharedFolderMountTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderMountType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderNestDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderNestDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderNestDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewNsPath: string;

	readonly dNewParentNsId: string;

	readonly previousNsPath: string;

	readonly previousParentNsId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { previousParentNsId: string; dNewParentNsId: string; previousNsPath: string; dNewNsPath: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithPreviousParentNsIdDNewParentNsIdPreviousNsPathDNewNsPath(previousParentNsId: string, dNewParentNsId: string, previousNsPath: string, dNewNsPath: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderNestDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderNestDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderNestDetails;

	static new(): DBTEAMLOGSharedFolderNestDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderNestDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderNestType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderNestType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderNestType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderNestTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderNestTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderNestType;

	static new(): DBTEAMLOGSharedFolderNestTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderNestType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderTransferOwnershipDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderTransferOwnershipDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderTransferOwnershipDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewOwnerEmail: string;

	readonly previousOwnerEmail: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewOwnerEmail: string; });

	constructor(o: { DNewOwnerEmail: string; previousOwnerEmail: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewOwnerEmail(dNewOwnerEmail: string): this;

	initWithDNewOwnerEmailPreviousOwnerEmail(dNewOwnerEmail: string, previousOwnerEmail: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderTransferOwnershipDetails;

	static new(): DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderTransferOwnershipDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderTransferOwnershipType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderTransferOwnershipType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderTransferOwnershipType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderTransferOwnershipType;

	static new(): DBTEAMLOGSharedFolderTransferOwnershipTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderTransferOwnershipType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderUnmountDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderUnmountDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderUnmountDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderUnmountDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderUnmountDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderUnmountDetails;

	static new(): DBTEAMLOGSharedFolderUnmountDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderUnmountDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedFolderUnmountType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedFolderUnmountType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedFolderUnmountType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedFolderUnmountTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedFolderUnmountTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedFolderUnmountType;

	static new(): DBTEAMLOGSharedFolderUnmountTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedFolderUnmountType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkAccessLevel extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkAccessLevel; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkAccessLevel; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSharedLinkAccessLevelTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { none: void; });

	constructor(o: { other: void; });

	constructor(o: { reader: void; });

	constructor(o: { writer: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNone(): this;

	initWithOther(): this;

	initWithReader(): this;

	initWithWriter(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNone(): boolean;

	isOther(): boolean;

	isReader(): boolean;

	isWriter(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSharedLinkAccessLevelSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkAccessLevelSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkAccessLevel;

	static new(): DBTEAMLOGSharedLinkAccessLevelSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkAccessLevel): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSharedLinkAccessLevelTag {

	None = 0,

	Reader = 1,

	Writer = 2,

	Other = 3
}

declare class DBTEAMLOGSharedLinkAddExpiryDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkAddExpiryDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkAddExpiryDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkAddExpiryDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkAddExpiryDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkAddExpiryDetails;

	static new(): DBTEAMLOGSharedLinkAddExpiryDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkAddExpiryDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkAddExpiryType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkAddExpiryType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkAddExpiryType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkAddExpiryTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkAddExpiryTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkAddExpiryType;

	static new(): DBTEAMLOGSharedLinkAddExpiryTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkAddExpiryType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkChangeExpiryDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkChangeExpiryDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkChangeExpiryDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: Date;

	readonly previousValue: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: Date; previousValue: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: Date, previousValue: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkChangeExpiryDetails;

	static new(): DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkChangeExpiryDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkChangeExpiryType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkChangeExpiryType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkChangeExpiryType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkChangeExpiryTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkChangeExpiryTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkChangeExpiryType;

	static new(): DBTEAMLOGSharedLinkChangeExpiryTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkChangeExpiryType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkChangeVisibilityDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkChangeVisibilityDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkChangeVisibilityDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSharedLinkVisibility;

	readonly previousValue: DBTEAMLOGSharedLinkVisibility;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGSharedLinkVisibility; });

	constructor(o: { DNewValue: DBTEAMLOGSharedLinkVisibility; previousValue: DBTEAMLOGSharedLinkVisibility; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGSharedLinkVisibility): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGSharedLinkVisibility, previousValue: DBTEAMLOGSharedLinkVisibility): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkChangeVisibilityDetails;

	static new(): DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkChangeVisibilityDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkChangeVisibilityType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkChangeVisibilityType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkChangeVisibilityType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkChangeVisibilityType;

	static new(): DBTEAMLOGSharedLinkChangeVisibilityTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkChangeVisibilityType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkCopyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkCopyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkCopyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedLinkOwner: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedLinkOwner: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedLinkOwner(sharedLinkOwner: DBTEAMLOGUserLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkCopyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkCopyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkCopyDetails;

	static new(): DBTEAMLOGSharedLinkCopyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkCopyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkCopyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkCopyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkCopyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkCopyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkCopyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkCopyType;

	static new(): DBTEAMLOGSharedLinkCopyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkCopyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkCreateDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkCreateDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkCreateDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedLinkAccessLevel: DBTEAMLOGSharedLinkAccessLevel;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedLinkAccessLevel: DBTEAMLOGSharedLinkAccessLevel; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedLinkAccessLevel(sharedLinkAccessLevel: DBTEAMLOGSharedLinkAccessLevel): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkCreateDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkCreateDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkCreateDetails;

	static new(): DBTEAMLOGSharedLinkCreateDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkCreateDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkCreateType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkCreateType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkCreateType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkCreateTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkCreateTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkCreateType;

	static new(): DBTEAMLOGSharedLinkCreateTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkCreateType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkDisableDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkDisableDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkDisableDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedLinkOwner: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedLinkOwner: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedLinkOwner(sharedLinkOwner: DBTEAMLOGUserLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkDisableDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkDisableDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkDisableDetails;

	static new(): DBTEAMLOGSharedLinkDisableDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkDisableDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkDisableType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkDisableType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkDisableType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkDisableTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkDisableTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkDisableType;

	static new(): DBTEAMLOGSharedLinkDisableTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkDisableType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkDownloadDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkDownloadDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkDownloadDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedLinkOwner: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedLinkOwner: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedLinkOwner(sharedLinkOwner: DBTEAMLOGUserLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkDownloadDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkDownloadDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkDownloadDetails;

	static new(): DBTEAMLOGSharedLinkDownloadDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkDownloadDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkDownloadType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkDownloadType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkDownloadType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkDownloadTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkDownloadTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkDownloadType;

	static new(): DBTEAMLOGSharedLinkDownloadTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkDownloadType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkRemoveExpiryDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkRemoveExpiryDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkRemoveExpiryDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly previousValue: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { previousValue: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithPreviousValue(previousValue: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkRemoveExpiryDetails;

	static new(): DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkRemoveExpiryDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkRemoveExpiryType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkRemoveExpiryType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkRemoveExpiryType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkRemoveExpiryType;

	static new(): DBTEAMLOGSharedLinkRemoveExpiryTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkRemoveExpiryType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkShareDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkShareDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkShareDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly externalUsers: NSArray<DBTEAMLOGExternalUserLogInfo>;

	readonly sharedLinkOwner: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedLinkOwner: DBTEAMLOGUserLogInfo; externalUsers: NSArray<DBTEAMLOGExternalUserLogInfo> | DBTEAMLOGExternalUserLogInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedLinkOwnerExternalUsers(sharedLinkOwner: DBTEAMLOGUserLogInfo, externalUsers: NSArray<DBTEAMLOGExternalUserLogInfo> | DBTEAMLOGExternalUserLogInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkShareDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkShareDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkShareDetails;

	static new(): DBTEAMLOGSharedLinkShareDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkShareDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkShareType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkShareType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkShareType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkShareTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkShareTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkShareType;

	static new(): DBTEAMLOGSharedLinkShareTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkShareType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkViewDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkViewDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkViewDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedLinkOwner: DBTEAMLOGUserLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { sharedLinkOwner: DBTEAMLOGUserLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithSharedLinkOwner(sharedLinkOwner: DBTEAMLOGUserLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkViewDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkViewDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkViewDetails;

	static new(): DBTEAMLOGSharedLinkViewDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkViewDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkViewType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkViewType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkViewType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedLinkViewTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkViewTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkViewType;

	static new(): DBTEAMLOGSharedLinkViewTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkViewType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedLinkVisibility extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedLinkVisibility; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedLinkVisibility; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSharedLinkVisibilityTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { password: void; });

	constructor(o: { public: void; });

	constructor(o: { teamOnly: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithPassword(): this;

	initWithPublic(): this;

	initWithTeamOnly(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPassword(): boolean;

	isPublic(): boolean;

	isTeamOnly(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSharedLinkVisibilitySerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedLinkVisibilitySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedLinkVisibility;

	static new(): DBTEAMLOGSharedLinkVisibilitySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedLinkVisibility): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSharedLinkVisibilityTag {

	Password = 0,

	Public = 1,

	TeamOnly = 2,

	Other = 3
}

declare class DBTEAMLOGSharedNoteOpenedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedNoteOpenedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedNoteOpenedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedNoteOpenedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedNoteOpenedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedNoteOpenedDetails;

	static new(): DBTEAMLOGSharedNoteOpenedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedNoteOpenedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharedNoteOpenedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharedNoteOpenedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharedNoteOpenedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharedNoteOpenedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharedNoteOpenedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharedNoteOpenedType;

	static new(): DBTEAMLOGSharedNoteOpenedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharedNoteOpenedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharingChangeFolderJoinPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingChangeFolderJoinPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingChangeFolderJoinPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSharingFolderJoinPolicy;

	readonly previousValue: DBTEAMLOGSharingFolderJoinPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGSharingFolderJoinPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGSharingFolderJoinPolicy; previousValue: DBTEAMLOGSharingFolderJoinPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGSharingFolderJoinPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGSharingFolderJoinPolicy, previousValue: DBTEAMLOGSharingFolderJoinPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingChangeFolderJoinPolicyDetails;

	static new(): DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingChangeFolderJoinPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharingChangeFolderJoinPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingChangeFolderJoinPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingChangeFolderJoinPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingChangeFolderJoinPolicyType;

	static new(): DBTEAMLOGSharingChangeFolderJoinPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingChangeFolderJoinPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharingChangeLinkPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingChangeLinkPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingChangeLinkPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSharingLinkPolicy;

	readonly previousValue: DBTEAMLOGSharingLinkPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGSharingLinkPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGSharingLinkPolicy; previousValue: DBTEAMLOGSharingLinkPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGSharingLinkPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGSharingLinkPolicy, previousValue: DBTEAMLOGSharingLinkPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingChangeLinkPolicyDetails;

	static new(): DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingChangeLinkPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharingChangeLinkPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingChangeLinkPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingChangeLinkPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharingChangeLinkPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingChangeLinkPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingChangeLinkPolicyType;

	static new(): DBTEAMLOGSharingChangeLinkPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingChangeLinkPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharingChangeMemberPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingChangeMemberPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingChangeMemberPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSharingMemberPolicy;

	readonly previousValue: DBTEAMLOGSharingMemberPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGSharingMemberPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGSharingMemberPolicy; previousValue: DBTEAMLOGSharingMemberPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGSharingMemberPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGSharingMemberPolicy, previousValue: DBTEAMLOGSharingMemberPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingChangeMemberPolicyDetails;

	static new(): DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingChangeMemberPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharingChangeMemberPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingChangeMemberPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingChangeMemberPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSharingChangeMemberPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingChangeMemberPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingChangeMemberPolicyType;

	static new(): DBTEAMLOGSharingChangeMemberPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingChangeMemberPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSharingFolderJoinPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingFolderJoinPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingFolderJoinPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSharingFolderJoinPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { fromAnyone: void; });

	constructor(o: { fromTeamOnly: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFromAnyone(): this;

	initWithFromTeamOnly(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isFromAnyone(): boolean;

	isFromTeamOnly(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSharingFolderJoinPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingFolderJoinPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingFolderJoinPolicy;

	static new(): DBTEAMLOGSharingFolderJoinPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingFolderJoinPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSharingFolderJoinPolicyTag {

	FromAnyone = 0,

	FromTeamOnly = 1,

	Other = 2
}

declare class DBTEAMLOGSharingLinkPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingLinkPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingLinkPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSharingLinkPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { defaultPrivate: void; });

	constructor(o: { defaultPublic: void; });

	constructor(o: { onlyPrivate: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDefaultPrivate(): this;

	initWithDefaultPublic(): this;

	initWithOnlyPrivate(): this;

	initWithOther(): this;

	isDefaultPrivate(): boolean;

	isDefaultPublic(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOnlyPrivate(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSharingLinkPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingLinkPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingLinkPolicy;

	static new(): DBTEAMLOGSharingLinkPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingLinkPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSharingLinkPolicyTag {

	DefaultPrivate = 0,

	DefaultPublic = 1,

	OnlyPrivate = 2,

	Other = 3
}

declare class DBTEAMLOGSharingMemberPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSharingMemberPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSharingMemberPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSharingMemberPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { allow: void; });

	constructor(o: { forbid: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAllow(): this;

	initWithForbid(): this;

	initWithOther(): this;

	isAllow(): boolean;

	isEqual(object: any): boolean;

	isForbid(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSharingMemberPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGSharingMemberPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSharingMemberPolicy;

	static new(): DBTEAMLOGSharingMemberPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSharingMemberPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSharingMemberPolicyTag {

	Allow = 0,

	Forbid = 1,

	Other = 2
}

declare class DBTEAMLOGShmodelGroupShareDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShmodelGroupShareDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShmodelGroupShareDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShmodelGroupShareDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShmodelGroupShareDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShmodelGroupShareDetails;

	static new(): DBTEAMLOGShmodelGroupShareDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShmodelGroupShareDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShmodelGroupShareType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShmodelGroupShareType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShmodelGroupShareType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShmodelGroupShareTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShmodelGroupShareTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShmodelGroupShareType;

	static new(): DBTEAMLOGShmodelGroupShareTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShmodelGroupShareType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseAccessGrantedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseAccessGrantedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseAccessGrantedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseAccessGrantedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseAccessGrantedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseAccessGrantedDetails;

	static new(): DBTEAMLOGShowcaseAccessGrantedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseAccessGrantedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseAccessGrantedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseAccessGrantedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseAccessGrantedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseAccessGrantedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseAccessGrantedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseAccessGrantedType;

	static new(): DBTEAMLOGShowcaseAccessGrantedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseAccessGrantedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseAddMemberDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseAddMemberDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseAddMemberDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseAddMemberDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseAddMemberDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseAddMemberDetails;

	static new(): DBTEAMLOGShowcaseAddMemberDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseAddMemberDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseAddMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseAddMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseAddMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseAddMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseAddMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseAddMemberType;

	static new(): DBTEAMLOGShowcaseAddMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseAddMemberType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseArchivedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseArchivedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseArchivedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseArchivedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseArchivedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseArchivedDetails;

	static new(): DBTEAMLOGShowcaseArchivedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseArchivedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseArchivedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseArchivedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseArchivedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseArchivedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseArchivedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseArchivedType;

	static new(): DBTEAMLOGShowcaseArchivedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseArchivedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseChangeDownloadPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseChangeDownloadPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseChangeDownloadPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGShowcaseDownloadPolicy;

	readonly previousValue: DBTEAMLOGShowcaseDownloadPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGShowcaseDownloadPolicy; previousValue: DBTEAMLOGShowcaseDownloadPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGShowcaseDownloadPolicy, previousValue: DBTEAMLOGShowcaseDownloadPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseChangeDownloadPolicyDetails;

	static new(): DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseChangeDownloadPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseChangeDownloadPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseChangeDownloadPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseChangeDownloadPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseChangeDownloadPolicyType;

	static new(): DBTEAMLOGShowcaseChangeDownloadPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseChangeDownloadPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseChangeEnabledPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseChangeEnabledPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseChangeEnabledPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGShowcaseEnabledPolicy;

	readonly previousValue: DBTEAMLOGShowcaseEnabledPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGShowcaseEnabledPolicy; previousValue: DBTEAMLOGShowcaseEnabledPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGShowcaseEnabledPolicy, previousValue: DBTEAMLOGShowcaseEnabledPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseChangeEnabledPolicyDetails;

	static new(): DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseChangeEnabledPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseChangeEnabledPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseChangeEnabledPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseChangeEnabledPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseChangeEnabledPolicyType;

	static new(): DBTEAMLOGShowcaseChangeEnabledPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseChangeEnabledPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGShowcaseExternalSharingPolicy;

	readonly previousValue: DBTEAMLOGShowcaseExternalSharingPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGShowcaseExternalSharingPolicy; previousValue: DBTEAMLOGShowcaseExternalSharingPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGShowcaseExternalSharingPolicy, previousValue: DBTEAMLOGShowcaseExternalSharingPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails;

	static new(): DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseChangeExternalSharingPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseChangeExternalSharingPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseChangeExternalSharingPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseChangeExternalSharingPolicyType;

	static new(): DBTEAMLOGShowcaseChangeExternalSharingPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseChangeExternalSharingPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseCreatedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseCreatedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseCreatedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseCreatedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseCreatedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseCreatedDetails;

	static new(): DBTEAMLOGShowcaseCreatedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseCreatedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseCreatedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseCreatedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseCreatedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseCreatedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseCreatedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseCreatedType;

	static new(): DBTEAMLOGShowcaseCreatedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseCreatedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseDeleteCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseDeleteCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseDeleteCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseDeleteCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseDeleteCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseDeleteCommentDetails;

	static new(): DBTEAMLOGShowcaseDeleteCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseDeleteCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseDeleteCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseDeleteCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseDeleteCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseDeleteCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseDeleteCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseDeleteCommentType;

	static new(): DBTEAMLOGShowcaseDeleteCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseDeleteCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseDocumentLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseDocumentLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseDocumentLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly showcaseId: string;

	readonly showcaseTitle: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { showcaseId: string; showcaseTitle: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithShowcaseIdShowcaseTitle(showcaseId: string, showcaseTitle: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseDocumentLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseDocumentLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseDocumentLogInfo;

	static new(): DBTEAMLOGShowcaseDocumentLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseDocumentLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseDownloadPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseDownloadPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseDownloadPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGShowcaseDownloadPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGShowcaseDownloadPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseDownloadPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseDownloadPolicy;

	static new(): DBTEAMLOGShowcaseDownloadPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseDownloadPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGShowcaseDownloadPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGShowcaseEditCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseEditCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseEditCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseEditCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseEditCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseEditCommentDetails;

	static new(): DBTEAMLOGShowcaseEditCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseEditCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseEditCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseEditCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseEditCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseEditCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseEditCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseEditCommentType;

	static new(): DBTEAMLOGShowcaseEditCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseEditCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseEditedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseEditedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseEditedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseEditedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseEditedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseEditedDetails;

	static new(): DBTEAMLOGShowcaseEditedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseEditedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseEditedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseEditedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseEditedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseEditedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseEditedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseEditedType;

	static new(): DBTEAMLOGShowcaseEditedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseEditedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseEnabledPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseEnabledPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseEnabledPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGShowcaseEnabledPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGShowcaseEnabledPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseEnabledPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseEnabledPolicy;

	static new(): DBTEAMLOGShowcaseEnabledPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseEnabledPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGShowcaseEnabledPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGShowcaseExternalSharingPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseExternalSharingPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseExternalSharingPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGShowcaseExternalSharingPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGShowcaseExternalSharingPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseExternalSharingPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseExternalSharingPolicy;

	static new(): DBTEAMLOGShowcaseExternalSharingPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseExternalSharingPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGShowcaseExternalSharingPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGShowcaseFileAddedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseFileAddedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseFileAddedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseFileAddedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseFileAddedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseFileAddedDetails;

	static new(): DBTEAMLOGShowcaseFileAddedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseFileAddedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseFileAddedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseFileAddedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseFileAddedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseFileAddedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseFileAddedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseFileAddedType;

	static new(): DBTEAMLOGShowcaseFileAddedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseFileAddedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseFileDownloadDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseFileDownloadDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseFileDownloadDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly downloadType: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; downloadType: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuidDownloadType(eventUuid: string, downloadType: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseFileDownloadDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseFileDownloadDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseFileDownloadDetails;

	static new(): DBTEAMLOGShowcaseFileDownloadDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseFileDownloadDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseFileDownloadType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseFileDownloadType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseFileDownloadType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseFileDownloadTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseFileDownloadTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseFileDownloadType;

	static new(): DBTEAMLOGShowcaseFileDownloadTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseFileDownloadType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseFileRemovedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseFileRemovedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseFileRemovedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseFileRemovedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseFileRemovedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseFileRemovedDetails;

	static new(): DBTEAMLOGShowcaseFileRemovedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseFileRemovedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseFileRemovedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseFileRemovedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseFileRemovedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseFileRemovedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseFileRemovedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseFileRemovedType;

	static new(): DBTEAMLOGShowcaseFileRemovedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseFileRemovedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseFileViewDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseFileViewDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseFileViewDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseFileViewDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseFileViewDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseFileViewDetails;

	static new(): DBTEAMLOGShowcaseFileViewDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseFileViewDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseFileViewType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseFileViewType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseFileViewType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseFileViewTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseFileViewTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseFileViewType;

	static new(): DBTEAMLOGShowcaseFileViewTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseFileViewType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcasePermanentlyDeletedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcasePermanentlyDeletedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcasePermanentlyDeletedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcasePermanentlyDeletedDetails;

	static new(): DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcasePermanentlyDeletedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcasePermanentlyDeletedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcasePermanentlyDeletedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcasePermanentlyDeletedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcasePermanentlyDeletedType;

	static new(): DBTEAMLOGShowcasePermanentlyDeletedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcasePermanentlyDeletedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcasePostCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcasePostCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcasePostCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcasePostCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcasePostCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcasePostCommentDetails;

	static new(): DBTEAMLOGShowcasePostCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcasePostCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcasePostCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcasePostCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcasePostCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcasePostCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcasePostCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcasePostCommentType;

	static new(): DBTEAMLOGShowcasePostCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcasePostCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseRemoveMemberDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseRemoveMemberDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseRemoveMemberDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseRemoveMemberDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseRemoveMemberDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseRemoveMemberDetails;

	static new(): DBTEAMLOGShowcaseRemoveMemberDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseRemoveMemberDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseRemoveMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseRemoveMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseRemoveMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseRemoveMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseRemoveMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseRemoveMemberType;

	static new(): DBTEAMLOGShowcaseRemoveMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseRemoveMemberType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseRenamedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseRenamedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseRenamedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseRenamedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseRenamedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseRenamedDetails;

	static new(): DBTEAMLOGShowcaseRenamedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseRenamedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseRenamedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseRenamedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseRenamedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseRenamedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseRenamedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseRenamedType;

	static new(): DBTEAMLOGShowcaseRenamedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseRenamedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseRequestAccessDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseRequestAccessDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseRequestAccessDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseRequestAccessDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseRequestAccessDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseRequestAccessDetails;

	static new(): DBTEAMLOGShowcaseRequestAccessDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseRequestAccessDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseRequestAccessType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseRequestAccessType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseRequestAccessType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseRequestAccessTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseRequestAccessTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseRequestAccessType;

	static new(): DBTEAMLOGShowcaseRequestAccessTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseRequestAccessType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseResolveCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseResolveCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseResolveCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseResolveCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseResolveCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseResolveCommentDetails;

	static new(): DBTEAMLOGShowcaseResolveCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseResolveCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseResolveCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseResolveCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseResolveCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseResolveCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseResolveCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseResolveCommentType;

	static new(): DBTEAMLOGShowcaseResolveCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseResolveCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseRestoredDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseRestoredDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseRestoredDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseRestoredDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseRestoredDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseRestoredDetails;

	static new(): DBTEAMLOGShowcaseRestoredDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseRestoredDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseRestoredType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseRestoredType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseRestoredType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseRestoredTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseRestoredTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseRestoredType;

	static new(): DBTEAMLOGShowcaseRestoredTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseRestoredType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseTrashedDeprecatedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseTrashedDeprecatedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseTrashedDeprecatedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseTrashedDeprecatedDetails;

	static new(): DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseTrashedDeprecatedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseTrashedDeprecatedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseTrashedDeprecatedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseTrashedDeprecatedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseTrashedDeprecatedType;

	static new(): DBTEAMLOGShowcaseTrashedDeprecatedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseTrashedDeprecatedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseTrashedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseTrashedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseTrashedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseTrashedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseTrashedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseTrashedDetails;

	static new(): DBTEAMLOGShowcaseTrashedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseTrashedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseTrashedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseTrashedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseTrashedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseTrashedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseTrashedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseTrashedType;

	static new(): DBTEAMLOGShowcaseTrashedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseTrashedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseUnresolveCommentDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseUnresolveCommentDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseUnresolveCommentDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly commentText: string;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	constructor(o: { eventUuid: string; commentText: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	initWithEventUuidCommentText(eventUuid: string, commentText: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseUnresolveCommentDetails;

	static new(): DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseUnresolveCommentDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseUnresolveCommentType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseUnresolveCommentType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseUnresolveCommentType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseUnresolveCommentTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseUnresolveCommentTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseUnresolveCommentType;

	static new(): DBTEAMLOGShowcaseUnresolveCommentTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseUnresolveCommentType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseUntrashedDeprecatedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseUntrashedDeprecatedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseUntrashedDeprecatedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseUntrashedDeprecatedDetails;

	static new(): DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseUntrashedDeprecatedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseUntrashedDeprecatedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseUntrashedDeprecatedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseUntrashedDeprecatedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseUntrashedDeprecatedType;

	static new(): DBTEAMLOGShowcaseUntrashedDeprecatedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseUntrashedDeprecatedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseUntrashedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseUntrashedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseUntrashedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseUntrashedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseUntrashedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseUntrashedDetails;

	static new(): DBTEAMLOGShowcaseUntrashedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseUntrashedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseUntrashedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseUntrashedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseUntrashedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseUntrashedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseUntrashedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseUntrashedType;

	static new(): DBTEAMLOGShowcaseUntrashedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseUntrashedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseViewDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseViewDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseViewDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly eventUuid: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { eventUuid: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEventUuid(eventUuid: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseViewDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseViewDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseViewDetails;

	static new(): DBTEAMLOGShowcaseViewDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseViewDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGShowcaseViewType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGShowcaseViewType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGShowcaseViewType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGShowcaseViewTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGShowcaseViewTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGShowcaseViewType;

	static new(): DBTEAMLOGShowcaseViewTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGShowcaseViewType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSignInAsSessionEndDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSignInAsSessionEndDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSignInAsSessionEndDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSignInAsSessionEndDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSignInAsSessionEndDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSignInAsSessionEndDetails;

	static new(): DBTEAMLOGSignInAsSessionEndDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSignInAsSessionEndDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSignInAsSessionEndType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSignInAsSessionEndType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSignInAsSessionEndType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSignInAsSessionEndTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSignInAsSessionEndTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSignInAsSessionEndType;

	static new(): DBTEAMLOGSignInAsSessionEndTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSignInAsSessionEndType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSignInAsSessionStartDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSignInAsSessionStartDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSignInAsSessionStartDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSignInAsSessionStartDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSignInAsSessionStartDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSignInAsSessionStartDetails;

	static new(): DBTEAMLOGSignInAsSessionStartDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSignInAsSessionStartDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSignInAsSessionStartType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSignInAsSessionStartType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSignInAsSessionStartType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSignInAsSessionStartTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSignInAsSessionStartTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSignInAsSessionStartType;

	static new(): DBTEAMLOGSignInAsSessionStartTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSignInAsSessionStartType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSmartSyncChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMPOLICIESSmartSyncPolicy;

	readonly previousValue: DBTEAMPOLICIESSmartSyncPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: DBTEAMPOLICIESSmartSyncPolicy; previousValue: DBTEAMPOLICIESSmartSyncPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMPOLICIESSmartSyncPolicy, previousValue: DBTEAMPOLICIESSmartSyncPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSmartSyncChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncChangePolicyDetails;

	static new(): DBTEAMLOGSmartSyncChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSmartSyncChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSmartSyncChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncChangePolicyType;

	static new(): DBTEAMLOGSmartSyncChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails;

	static new(): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType;

	static new(): DBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSmartSyncNotOptOutDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncNotOptOutDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncNotOptOutDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSmartSyncOptOutPolicy;

	readonly previousValue: DBTEAMLOGSmartSyncOptOutPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: DBTEAMLOGSmartSyncOptOutPolicy; dNewValue: DBTEAMLOGSmartSyncOptOutPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: DBTEAMLOGSmartSyncOptOutPolicy, dNewValue: DBTEAMLOGSmartSyncOptOutPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSmartSyncNotOptOutDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncNotOptOutDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncNotOptOutDetails;

	static new(): DBTEAMLOGSmartSyncNotOptOutDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncNotOptOutDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSmartSyncNotOptOutType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncNotOptOutType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncNotOptOutType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSmartSyncNotOptOutTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncNotOptOutTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncNotOptOutType;

	static new(): DBTEAMLOGSmartSyncNotOptOutTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncNotOptOutType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSmartSyncOptOutDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncOptOutDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncOptOutDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGSmartSyncOptOutPolicy;

	readonly previousValue: DBTEAMLOGSmartSyncOptOutPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: DBTEAMLOGSmartSyncOptOutPolicy; dNewValue: DBTEAMLOGSmartSyncOptOutPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: DBTEAMLOGSmartSyncOptOutPolicy, dNewValue: DBTEAMLOGSmartSyncOptOutPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSmartSyncOptOutDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncOptOutDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncOptOutDetails;

	static new(): DBTEAMLOGSmartSyncOptOutDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncOptOutDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSmartSyncOptOutPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncOptOutPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncOptOutPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSmartSyncOptOutPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default_: void; });

	constructor(o: { optedOut: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDefault_(): this;

	initWithOptedOut(): this;

	initWithOther(): this;

	isDefault_(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOptedOut(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSmartSyncOptOutPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncOptOutPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncOptOutPolicy;

	static new(): DBTEAMLOGSmartSyncOptOutPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncOptOutPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSmartSyncOptOutPolicyTag {

	Default_ = 0,

	OptedOut = 1,

	Other = 2
}

declare class DBTEAMLOGSmartSyncOptOutType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSmartSyncOptOutType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSmartSyncOptOutType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSmartSyncOptOutTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSmartSyncOptOutTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSmartSyncOptOutType;

	static new(): DBTEAMLOGSmartSyncOptOutTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSmartSyncOptOutType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSpaceCapsType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSpaceCapsType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSpaceCapsType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSpaceCapsTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { hard: void; });

	constructor(o: { off: void; });

	constructor(o: { other: void; });

	constructor(o: { soft: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithHard(): this;

	initWithOff(): this;

	initWithOther(): this;

	initWithSoft(): this;

	isEqual(object: any): boolean;

	isHard(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOff(): boolean;

	isOther(): boolean;

	isSoft(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSpaceCapsTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSpaceCapsTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSpaceCapsType;

	static new(): DBTEAMLOGSpaceCapsTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSpaceCapsType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSpaceCapsTypeTag {

	Hard = 0,

	Off = 1,

	Soft = 2,

	Other = 3
}

declare class DBTEAMLOGSpaceLimitsStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSpaceLimitsStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSpaceLimitsStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGSpaceLimitsStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { nearQuota: void; });

	constructor(o: { other: void; });

	constructor(o: { overQuota: void; });

	constructor(o: { withinQuota: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNearQuota(): this;

	initWithOther(): this;

	initWithOverQuota(): this;

	initWithWithinQuota(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNearQuota(): boolean;

	isOther(): boolean;

	isOverQuota(): boolean;

	isWithinQuota(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGSpaceLimitsStatusSerializer extends NSObject {

	static alloc(): DBTEAMLOGSpaceLimitsStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSpaceLimitsStatus;

	static new(): DBTEAMLOGSpaceLimitsStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSpaceLimitsStatus): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGSpaceLimitsStatusTag {

	WithinQuota = 0,

	NearQuota = 1,

	OverQuota = 2,

	Other = 3
}

declare class DBTEAMLOGSsoAddCertDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoAddCertDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoAddCertDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly certificateDetails: DBTEAMLOGCertificate;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { certificateDetails: DBTEAMLOGCertificate; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCertificateDetails(certificateDetails: DBTEAMLOGCertificate): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoAddCertDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoAddCertDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoAddCertDetails;

	static new(): DBTEAMLOGSsoAddCertDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoAddCertDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoAddCertType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoAddCertType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoAddCertType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoAddCertTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoAddCertTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoAddCertType;

	static new(): DBTEAMLOGSsoAddCertTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoAddCertType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoAddLoginUrlDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoAddLoginUrlDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoAddLoginUrlDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoAddLoginUrlDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoAddLoginUrlDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoAddLoginUrlDetails;

	static new(): DBTEAMLOGSsoAddLoginUrlDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoAddLoginUrlDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoAddLoginUrlType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoAddLoginUrlType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoAddLoginUrlType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoAddLoginUrlTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoAddLoginUrlTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoAddLoginUrlType;

	static new(): DBTEAMLOGSsoAddLoginUrlTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoAddLoginUrlType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoAddLogoutUrlDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoAddLogoutUrlDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoAddLogoutUrlDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValue(dNewValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoAddLogoutUrlDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoAddLogoutUrlDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoAddLogoutUrlDetails;

	static new(): DBTEAMLOGSsoAddLogoutUrlDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoAddLogoutUrlDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoAddLogoutUrlType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoAddLogoutUrlType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoAddLogoutUrlType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoAddLogoutUrlTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoAddLogoutUrlTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoAddLogoutUrlType;

	static new(): DBTEAMLOGSsoAddLogoutUrlTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoAddLogoutUrlType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangeCertDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangeCertDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangeCertDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewCertificateDetails: DBTEAMLOGCertificate;

	readonly previousCertificateDetails: DBTEAMLOGCertificate;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewCertificateDetails: DBTEAMLOGCertificate; });

	constructor(o: { DNewCertificateDetails: DBTEAMLOGCertificate; previousCertificateDetails: DBTEAMLOGCertificate; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewCertificateDetails(dNewCertificateDetails: DBTEAMLOGCertificate): this;

	initWithDNewCertificateDetailsPreviousCertificateDetails(dNewCertificateDetails: DBTEAMLOGCertificate, previousCertificateDetails: DBTEAMLOGCertificate): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangeCertDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangeCertDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangeCertDetails;

	static new(): DBTEAMLOGSsoChangeCertDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangeCertDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangeCertType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangeCertType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangeCertType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangeCertTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangeCertTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangeCertType;

	static new(): DBTEAMLOGSsoChangeCertTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangeCertType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangeLoginUrlDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangeLoginUrlDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangeLoginUrlDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: string; dNewValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: string, dNewValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangeLoginUrlDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangeLoginUrlDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangeLoginUrlDetails;

	static new(): DBTEAMLOGSsoChangeLoginUrlDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangeLoginUrlDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangeLoginUrlType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangeLoginUrlType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangeLoginUrlType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangeLoginUrlTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangeLoginUrlTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangeLoginUrlType;

	static new(): DBTEAMLOGSsoChangeLoginUrlTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangeLoginUrlType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangeLogoutUrlDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangeLogoutUrlDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangeLogoutUrlDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { previousValue: string; dNewValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithPreviousValueDNewValue(previousValue: string, dNewValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangeLogoutUrlDetails;

	static new(): DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangeLogoutUrlDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangeLogoutUrlType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangeLogoutUrlType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangeLogoutUrlType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangeLogoutUrlTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangeLogoutUrlTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangeLogoutUrlType;

	static new(): DBTEAMLOGSsoChangeLogoutUrlTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangeLogoutUrlType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMPOLICIESSsoPolicy;

	readonly previousValue: DBTEAMPOLICIESSsoPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMPOLICIESSsoPolicy; });

	constructor(o: { DNewValue: DBTEAMPOLICIESSsoPolicy; previousValue: DBTEAMPOLICIESSsoPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMPOLICIESSsoPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMPOLICIESSsoPolicy, previousValue: DBTEAMPOLICIESSsoPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangePolicyDetails;

	static new(): DBTEAMLOGSsoChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangePolicyType;

	static new(): DBTEAMLOGSsoChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangeSamlIdentityModeDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangeSamlIdentityModeDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangeSamlIdentityModeDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: number;

	readonly previousValue: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: number; dNewValue: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: number, dNewValue: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangeSamlIdentityModeDetails;

	static new(): DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangeSamlIdentityModeDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoChangeSamlIdentityModeType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoChangeSamlIdentityModeType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoChangeSamlIdentityModeType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoChangeSamlIdentityModeType;

	static new(): DBTEAMLOGSsoChangeSamlIdentityModeTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoChangeSamlIdentityModeType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoErrorDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoErrorDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoErrorDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly errorDetails: DBTEAMLOGFailureDetailsLogInfo;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { errorDetails: DBTEAMLOGFailureDetailsLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithErrorDetails(errorDetails: DBTEAMLOGFailureDetailsLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoErrorDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoErrorDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoErrorDetails;

	static new(): DBTEAMLOGSsoErrorDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoErrorDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoErrorType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoErrorType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoErrorType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoErrorTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoErrorTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoErrorType;

	static new(): DBTEAMLOGSsoErrorTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoErrorType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoRemoveCertDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoRemoveCertDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoRemoveCertDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoRemoveCertDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoRemoveCertDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoRemoveCertDetails;

	static new(): DBTEAMLOGSsoRemoveCertDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoRemoveCertDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoRemoveCertType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoRemoveCertType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoRemoveCertType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoRemoveCertTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoRemoveCertTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoRemoveCertType;

	static new(): DBTEAMLOGSsoRemoveCertTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoRemoveCertType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoRemoveLoginUrlDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoRemoveLoginUrlDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoRemoveLoginUrlDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValue(previousValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoRemoveLoginUrlDetails;

	static new(): DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoRemoveLoginUrlDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoRemoveLoginUrlType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoRemoveLoginUrlType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoRemoveLoginUrlType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoRemoveLoginUrlTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoRemoveLoginUrlTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoRemoveLoginUrlType;

	static new(): DBTEAMLOGSsoRemoveLoginUrlTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoRemoveLoginUrlType): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoRemoveLogoutUrlDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoRemoveLogoutUrlDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoRemoveLogoutUrlDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValue(previousValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoRemoveLogoutUrlDetails;

	static new(): DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoRemoveLogoutUrlDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGSsoRemoveLogoutUrlType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGSsoRemoveLogoutUrlType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGSsoRemoveLogoutUrlType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGSsoRemoveLogoutUrlType;

	static new(): DBTEAMLOGSsoRemoveLogoutUrlTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGSsoRemoveLogoutUrlType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamActivityCreateReportDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamActivityCreateReportDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamActivityCreateReportDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly endDate: Date;

	readonly startDate: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { startDate: Date; endDate: Date; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithStartDateEndDate(startDate: Date, endDate: Date): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamActivityCreateReportDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamActivityCreateReportDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamActivityCreateReportDetails;

	static new(): DBTEAMLOGTeamActivityCreateReportDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamActivityCreateReportDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamActivityCreateReportType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamActivityCreateReportType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamActivityCreateReportType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamActivityCreateReportTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamActivityCreateReportTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamActivityCreateReportType;

	static new(): DBTEAMLOGTeamActivityCreateReportTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamActivityCreateReportType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamAuthRoutes extends NSObject {

	static alloc(): DBTEAMLOGTeamAuthRoutes; // inherited from NSObject

	static new(): DBTEAMLOGTeamAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	getEvents(): DBRpcTask<DBTEAMLOGGetTeamEventsResult, DBTEAMLOGGetTeamEventsError>;

	getEventsAccountIdTimeCategory(limit: number, accountId: string, time: DBTEAMCOMMONTimeRange, category: DBTEAMLOGEventCategory): DBRpcTask<DBTEAMLOGGetTeamEventsResult, DBTEAMLOGGetTeamEventsError>;

	getEventsContinue(cursor: string): DBRpcTask<DBTEAMLOGGetTeamEventsResult, DBTEAMLOGGetTeamEventsContinueError>;

	init(client: DBTransportClient): this;
}

declare class DBTEAMLOGTeamEvent extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamEvent; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamEvent; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly actor: DBTEAMLOGActorLogInfo;

	readonly assets: NSArray<DBTEAMLOGAssetLogInfo>;

	readonly context: DBTEAMLOGContextLogInfo;

	readonly details: DBTEAMLOGEventDetails;

	readonly eventCategory: DBTEAMLOGEventCategory;

	readonly eventType: DBTEAMLOGEventType;

	readonly involveNonTeamMember: number;

	readonly origin: DBTEAMLOGOriginLogInfo;

	readonly participants: NSArray<DBTEAMLOGParticipantLogInfo>;

	readonly timestamp: Date;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { timestamp: Date; eventCategory: DBTEAMLOGEventCategory; eventType: DBTEAMLOGEventType; details: DBTEAMLOGEventDetails; });

	constructor(o: { timestamp: Date; eventCategory: DBTEAMLOGEventCategory; eventType: DBTEAMLOGEventType; details: DBTEAMLOGEventDetails; actor: DBTEAMLOGActorLogInfo; origin: DBTEAMLOGOriginLogInfo; involveNonTeamMember: number; context: DBTEAMLOGContextLogInfo; participants: NSArray<DBTEAMLOGParticipantLogInfo> | DBTEAMLOGParticipantLogInfo[]; assets: NSArray<DBTEAMLOGAssetLogInfo> | DBTEAMLOGAssetLogInfo[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTimestampEventCategoryEventTypeDetails(timestamp: Date, eventCategory: DBTEAMLOGEventCategory, eventType: DBTEAMLOGEventType, details: DBTEAMLOGEventDetails): this;

	initWithTimestampEventCategoryEventTypeDetailsActorOriginInvolveNonTeamMemberContextParticipantsAssets(timestamp: Date, eventCategory: DBTEAMLOGEventCategory, eventType: DBTEAMLOGEventType, details: DBTEAMLOGEventDetails, actor: DBTEAMLOGActorLogInfo, origin: DBTEAMLOGOriginLogInfo, involveNonTeamMember: number, context: DBTEAMLOGContextLogInfo, participants: NSArray<DBTEAMLOGParticipantLogInfo> | DBTEAMLOGParticipantLogInfo[], assets: NSArray<DBTEAMLOGAssetLogInfo> | DBTEAMLOGAssetLogInfo[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamEventSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamEventSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamEvent;

	static new(): DBTEAMLOGTeamEventSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamEvent): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderChangeStatusDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderChangeStatusDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderChangeStatusDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMTeamFolderStatus;

	readonly previousValue: DBTEAMTeamFolderStatus;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMTeamFolderStatus; });

	constructor(o: { DNewValue: DBTEAMTeamFolderStatus; previousValue: DBTEAMTeamFolderStatus; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMTeamFolderStatus): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMTeamFolderStatus, previousValue: DBTEAMTeamFolderStatus): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderChangeStatusDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderChangeStatusDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderChangeStatusDetails;

	static new(): DBTEAMLOGTeamFolderChangeStatusDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderChangeStatusDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderChangeStatusType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderChangeStatusType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderChangeStatusType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderChangeStatusTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderChangeStatusTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderChangeStatusType;

	static new(): DBTEAMLOGTeamFolderChangeStatusTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderChangeStatusType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderCreateDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderCreateDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderCreateDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderCreateDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderCreateDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderCreateDetails;

	static new(): DBTEAMLOGTeamFolderCreateDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderCreateDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderCreateType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderCreateType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderCreateType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderCreateTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderCreateTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderCreateType;

	static new(): DBTEAMLOGTeamFolderCreateTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderCreateType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderDowngradeDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderDowngradeDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderDowngradeDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly targetAssetIndex: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { targetAssetIndex: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTargetAssetIndex(targetAssetIndex: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderDowngradeDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderDowngradeDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderDowngradeDetails;

	static new(): DBTEAMLOGTeamFolderDowngradeDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderDowngradeDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderDowngradeType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderDowngradeType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderDowngradeType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderDowngradeTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderDowngradeTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderDowngradeType;

	static new(): DBTEAMLOGTeamFolderDowngradeTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderDowngradeType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderPermanentlyDeleteDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderPermanentlyDeleteDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderPermanentlyDeleteDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderPermanentlyDeleteDetails;

	static new(): DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderPermanentlyDeleteDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderPermanentlyDeleteType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderPermanentlyDeleteType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderPermanentlyDeleteType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderPermanentlyDeleteType;

	static new(): DBTEAMLOGTeamFolderPermanentlyDeleteTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderPermanentlyDeleteType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderRenameDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderRenameDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderRenameDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewFolderName: string;

	readonly previousFolderName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousFolderName: string; dNewFolderName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousFolderNameDNewFolderName(previousFolderName: string, dNewFolderName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderRenameDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderRenameDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderRenameDetails;

	static new(): DBTEAMLOGTeamFolderRenameDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderRenameDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamFolderRenameType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamFolderRenameType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamFolderRenameType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamFolderRenameTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamFolderRenameTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamFolderRenameType;

	static new(): DBTEAMLOGTeamFolderRenameTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamFolderRenameType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamLinkedAppLogInfo extends DBTEAMLOGAppLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamLinkedAppLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamLinkedAppLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamLinkedAppLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamLinkedAppLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamLinkedAppLogInfo;

	static new(): DBTEAMLOGTeamLinkedAppLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamLinkedAppLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamMemberLogInfo extends DBTEAMLOGUserLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamMemberLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamMemberLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly memberExternalId: string;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountId: string; displayName: string; email: string; teamMemberId: string; memberExternalId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountIdDisplayNameEmailTeamMemberIdMemberExternalId(accountId: string, displayName: string, email: string, teamMemberId: string, memberExternalId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamMemberLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamMemberLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamMemberLogInfo;

	static new(): DBTEAMLOGTeamMemberLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamMemberLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamMembershipType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamMembershipType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamMembershipType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGTeamMembershipTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { free: void; });

	constructor(o: { full: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFree(): this;

	initWithFull(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isFree(): boolean;

	isFull(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGTeamMembershipTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamMembershipTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamMembershipType;

	static new(): DBTEAMLOGTeamMembershipTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamMembershipType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGTeamMembershipTypeTag {

	Free = 0,

	Full = 1,

	Other = 2
}

declare class DBTEAMLOGTeamMergeFromDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamMergeFromDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamMergeFromDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly teamName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamName(teamName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamMergeFromDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamMergeFromDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamMergeFromDetails;

	static new(): DBTEAMLOGTeamMergeFromDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamMergeFromDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamMergeFromType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamMergeFromType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamMergeFromType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamMergeFromTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamMergeFromTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamMergeFromType;

	static new(): DBTEAMLOGTeamMergeFromTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamMergeFromType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamMergeToDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamMergeToDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamMergeToDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly teamName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamName(teamName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamMergeToDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamMergeToDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamMergeToDetails;

	static new(): DBTEAMLOGTeamMergeToDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamMergeToDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamMergeToType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamMergeToType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamMergeToType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamMergeToTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamMergeToTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamMergeToType;

	static new(): DBTEAMLOGTeamMergeToTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamMergeToType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamName extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamName; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamName; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly teamDisplayName: string;

	readonly teamLegalName: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamDisplayName: string; teamLegalName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamDisplayNameTeamLegalName(teamDisplayName: string, teamLegalName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamNameSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamNameSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamName;

	static new(): DBTEAMLOGTeamNameSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamName): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileAddLogoDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileAddLogoDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileAddLogoDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileAddLogoDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileAddLogoDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileAddLogoDetails;

	static new(): DBTEAMLOGTeamProfileAddLogoDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileAddLogoDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileAddLogoType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileAddLogoType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileAddLogoType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileAddLogoTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileAddLogoTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileAddLogoType;

	static new(): DBTEAMLOGTeamProfileAddLogoTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileAddLogoType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileChangeDefaultLanguageDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileChangeDefaultLanguageDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileChangeDefaultLanguageDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: string;

	readonly previousValue: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: string; previousValue: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValuePreviousValue(dNewValue: string, previousValue: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileChangeDefaultLanguageDetails;

	static new(): DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileChangeDefaultLanguageDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileChangeDefaultLanguageType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileChangeDefaultLanguageType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileChangeDefaultLanguageType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileChangeDefaultLanguageType;

	static new(): DBTEAMLOGTeamProfileChangeDefaultLanguageTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileChangeDefaultLanguageType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileChangeLogoDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileChangeLogoDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileChangeLogoDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileChangeLogoDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileChangeLogoDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileChangeLogoDetails;

	static new(): DBTEAMLOGTeamProfileChangeLogoDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileChangeLogoDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileChangeLogoType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileChangeLogoType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileChangeLogoType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileChangeLogoTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileChangeLogoTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileChangeLogoType;

	static new(): DBTEAMLOGTeamProfileChangeLogoTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileChangeLogoType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileChangeNameDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileChangeNameDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileChangeNameDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGTeamName;

	readonly previousValue: DBTEAMLOGTeamName;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGTeamName; });

	constructor(o: { DNewValue: DBTEAMLOGTeamName; previousValue: DBTEAMLOGTeamName; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGTeamName): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGTeamName, previousValue: DBTEAMLOGTeamName): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileChangeNameDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileChangeNameDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileChangeNameDetails;

	static new(): DBTEAMLOGTeamProfileChangeNameDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileChangeNameDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileChangeNameType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileChangeNameType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileChangeNameType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileChangeNameTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileChangeNameTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileChangeNameType;

	static new(): DBTEAMLOGTeamProfileChangeNameTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileChangeNameType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileRemoveLogoDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileRemoveLogoDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileRemoveLogoDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileRemoveLogoDetails;

	static new(): DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileRemoveLogoDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamProfileRemoveLogoType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamProfileRemoveLogoType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamProfileRemoveLogoType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamProfileRemoveLogoTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamProfileRemoveLogoTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamProfileRemoveLogoType;

	static new(): DBTEAMLOGTeamProfileRemoveLogoTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamProfileRemoveLogoType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamSelectiveSyncPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamSelectiveSyncPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamSelectiveSyncPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGTeamSelectiveSyncPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGTeamSelectiveSyncPolicy;

	readonly previousValue: DBTEAMLOGTeamSelectiveSyncPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGTeamSelectiveSyncPolicy; previousValue: DBTEAMLOGTeamSelectiveSyncPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGTeamSelectiveSyncPolicy, previousValue: DBTEAMLOGTeamSelectiveSyncPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails;

	static new(): DBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamSelectiveSyncPolicyChangedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamSelectiveSyncPolicyChangedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamSelectiveSyncPolicyChangedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamSelectiveSyncPolicyChangedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamSelectiveSyncPolicyChangedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamSelectiveSyncPolicyChangedType;

	static new(): DBTEAMLOGTeamSelectiveSyncPolicyChangedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamSelectiveSyncPolicyChangedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamSelectiveSyncPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamSelectiveSyncPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamSelectiveSyncPolicy;

	static new(): DBTEAMLOGTeamSelectiveSyncPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamSelectiveSyncPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGTeamSelectiveSyncPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBFILESSyncSetting;

	readonly previousValue: DBFILESSyncSetting;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: DBFILESSyncSetting; dNewValue: DBFILESSyncSetting; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: DBFILESSyncSetting, dNewValue: DBFILESSyncSetting): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails;

	static new(): DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTeamSelectiveSyncSettingsChangedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTeamSelectiveSyncSettingsChangedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTeamSelectiveSyncSettingsChangedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTeamSelectiveSyncSettingsChangedType;

	static new(): DBTEAMLOGTeamSelectiveSyncSettingsChangedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTeamSelectiveSyncSettingsChangedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaAddBackupPhoneDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaAddBackupPhoneDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaAddBackupPhoneDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaAddBackupPhoneDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaAddBackupPhoneDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaAddBackupPhoneDetails;

	static new(): DBTEAMLOGTfaAddBackupPhoneDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaAddBackupPhoneDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaAddBackupPhoneType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaAddBackupPhoneType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaAddBackupPhoneType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaAddBackupPhoneTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaAddBackupPhoneTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaAddBackupPhoneType;

	static new(): DBTEAMLOGTfaAddBackupPhoneTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaAddBackupPhoneType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaAddSecurityKeyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaAddSecurityKeyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaAddSecurityKeyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaAddSecurityKeyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaAddSecurityKeyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaAddSecurityKeyDetails;

	static new(): DBTEAMLOGTfaAddSecurityKeyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaAddSecurityKeyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaAddSecurityKeyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaAddSecurityKeyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaAddSecurityKeyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaAddSecurityKeyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaAddSecurityKeyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaAddSecurityKeyType;

	static new(): DBTEAMLOGTfaAddSecurityKeyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaAddSecurityKeyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaChangeBackupPhoneDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaChangeBackupPhoneDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaChangeBackupPhoneDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaChangeBackupPhoneDetails;

	static new(): DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaChangeBackupPhoneDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaChangeBackupPhoneType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaChangeBackupPhoneType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaChangeBackupPhoneType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaChangeBackupPhoneTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaChangeBackupPhoneTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaChangeBackupPhoneType;

	static new(): DBTEAMLOGTfaChangeBackupPhoneTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaChangeBackupPhoneType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMPOLICIESTwoStepVerificationPolicy;

	readonly previousValue: DBTEAMPOLICIESTwoStepVerificationPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMPOLICIESTwoStepVerificationPolicy; });

	constructor(o: { DNewValue: DBTEAMPOLICIESTwoStepVerificationPolicy; previousValue: DBTEAMPOLICIESTwoStepVerificationPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMPOLICIESTwoStepVerificationPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMPOLICIESTwoStepVerificationPolicy, previousValue: DBTEAMPOLICIESTwoStepVerificationPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaChangePolicyDetails;

	static new(): DBTEAMLOGTfaChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaChangePolicyType;

	static new(): DBTEAMLOGTfaChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaChangeStatusDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaChangeStatusDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaChangeStatusDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGTfaConfiguration;

	readonly previousValue: DBTEAMLOGTfaConfiguration;

	readonly usedRescueCode: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGTfaConfiguration; });

	constructor(o: { DNewValue: DBTEAMLOGTfaConfiguration; previousValue: DBTEAMLOGTfaConfiguration; usedRescueCode: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGTfaConfiguration): this;

	initWithDNewValuePreviousValueUsedRescueCode(dNewValue: DBTEAMLOGTfaConfiguration, previousValue: DBTEAMLOGTfaConfiguration, usedRescueCode: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaChangeStatusDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaChangeStatusDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaChangeStatusDetails;

	static new(): DBTEAMLOGTfaChangeStatusDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaChangeStatusDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaChangeStatusType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaChangeStatusType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaChangeStatusType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaChangeStatusTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaChangeStatusTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaChangeStatusType;

	static new(): DBTEAMLOGTfaChangeStatusTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaChangeStatusType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaConfiguration extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaConfiguration; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaConfiguration; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGTfaConfigurationTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { authenticator: void; });

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	constructor(o: { sms: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAuthenticator(): this;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	initWithSms(): this;

	isAuthenticator(): boolean;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSms(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGTfaConfigurationSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaConfigurationSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaConfiguration;

	static new(): DBTEAMLOGTfaConfigurationSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaConfiguration): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGTfaConfigurationTag {

	Disabled = 0,

	Enabled = 1,

	Sms = 2,

	Authenticator = 3,

	Other = 4
}

declare class DBTEAMLOGTfaRemoveBackupPhoneDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaRemoveBackupPhoneDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaRemoveBackupPhoneDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaRemoveBackupPhoneDetails;

	static new(): DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaRemoveBackupPhoneDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaRemoveBackupPhoneType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaRemoveBackupPhoneType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaRemoveBackupPhoneType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaRemoveBackupPhoneType;

	static new(): DBTEAMLOGTfaRemoveBackupPhoneTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaRemoveBackupPhoneType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaRemoveSecurityKeyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaRemoveSecurityKeyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaRemoveSecurityKeyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaRemoveSecurityKeyDetails;

	static new(): DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaRemoveSecurityKeyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaRemoveSecurityKeyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaRemoveSecurityKeyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaRemoveSecurityKeyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaRemoveSecurityKeyType;

	static new(): DBTEAMLOGTfaRemoveSecurityKeyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaRemoveSecurityKeyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaResetDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaResetDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaResetDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaResetDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaResetDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaResetDetails;

	static new(): DBTEAMLOGTfaResetDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaResetDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTfaResetType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTfaResetType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTfaResetType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTfaResetTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTfaResetTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTfaResetType;

	static new(): DBTEAMLOGTfaResetTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTfaResetType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTimeUnit extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTimeUnit; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTimeUnit; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGTimeUnitTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { days: void; });

	constructor(o: { hours: void; });

	constructor(o: { milliseconds: void; });

	constructor(o: { minutes: void; });

	constructor(o: { months: void; });

	constructor(o: { other: void; });

	constructor(o: { seconds: void; });

	constructor(o: { weeks: void; });

	constructor(o: { years: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDays(): this;

	initWithHours(): this;

	initWithMilliseconds(): this;

	initWithMinutes(): this;

	initWithMonths(): this;

	initWithOther(): this;

	initWithSeconds(): this;

	initWithWeeks(): this;

	initWithYears(): this;

	isDays(): boolean;

	isEqual(object: any): boolean;

	isHours(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMilliseconds(): boolean;

	isMinutes(): boolean;

	isMonths(): boolean;

	isOther(): boolean;

	isSeconds(): boolean;

	isWeeks(): boolean;

	isYears(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGTimeUnitSerializer extends NSObject {

	static alloc(): DBTEAMLOGTimeUnitSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTimeUnit;

	static new(): DBTEAMLOGTimeUnitSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTimeUnit): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGTimeUnitTag {

	Milliseconds = 0,

	Seconds = 1,

	Minutes = 2,

	Hours = 3,

	Days = 4,

	Weeks = 5,

	Months = 6,

	Years = 7,

	Other = 8
}

declare class DBTEAMLOGTrustedNonTeamMemberLogInfo extends DBTEAMLOGUserLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTrustedNonTeamMemberLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTrustedNonTeamMemberLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly trustedNonTeamMemberType: DBTEAMLOGTrustedNonTeamMemberType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { trustedNonTeamMemberType: DBTEAMLOGTrustedNonTeamMemberType; });

	constructor(o: { trustedNonTeamMemberType: DBTEAMLOGTrustedNonTeamMemberType; accountId: string; displayName: string; email: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTrustedNonTeamMemberType(trustedNonTeamMemberType: DBTEAMLOGTrustedNonTeamMemberType): this;

	initWithTrustedNonTeamMemberTypeAccountIdDisplayNameEmail(trustedNonTeamMemberType: DBTEAMLOGTrustedNonTeamMemberType, accountId: string, displayName: string, email: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTrustedNonTeamMemberLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGTrustedNonTeamMemberLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTrustedNonTeamMemberLogInfo;

	static new(): DBTEAMLOGTrustedNonTeamMemberLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTrustedNonTeamMemberLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGTrustedNonTeamMemberType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTrustedNonTeamMemberType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTrustedNonTeamMemberType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGTrustedNonTeamMemberTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { multiInstanceAdmin: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMultiInstanceAdmin(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMultiInstanceAdmin(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGTrustedNonTeamMemberTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTrustedNonTeamMemberTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTrustedNonTeamMemberType;

	static new(): DBTEAMLOGTrustedNonTeamMemberTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTrustedNonTeamMemberType): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGTrustedNonTeamMemberTypeTag {

	MultiInstanceAdmin = 0,

	Other = 1
}

declare class DBTEAMLOGTwoAccountChangePolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTwoAccountChangePolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTwoAccountChangePolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGTwoAccountPolicy;

	readonly previousValue: DBTEAMLOGTwoAccountPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewValue: DBTEAMLOGTwoAccountPolicy; });

	constructor(o: { DNewValue: DBTEAMLOGTwoAccountPolicy; previousValue: DBTEAMLOGTwoAccountPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewValue(dNewValue: DBTEAMLOGTwoAccountPolicy): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGTwoAccountPolicy, previousValue: DBTEAMLOGTwoAccountPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTwoAccountChangePolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGTwoAccountChangePolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTwoAccountChangePolicyDetails;

	static new(): DBTEAMLOGTwoAccountChangePolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTwoAccountChangePolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGTwoAccountChangePolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTwoAccountChangePolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTwoAccountChangePolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGTwoAccountChangePolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGTwoAccountChangePolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTwoAccountChangePolicyType;

	static new(): DBTEAMLOGTwoAccountChangePolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTwoAccountChangePolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGTwoAccountPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGTwoAccountPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGTwoAccountPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMLOGTwoAccountPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGTwoAccountPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGTwoAccountPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGTwoAccountPolicy;

	static new(): DBTEAMLOGTwoAccountPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGTwoAccountPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGTwoAccountPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMLOGUserLinkedAppLogInfo extends DBTEAMLOGAppLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGUserLinkedAppLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGUserLinkedAppLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGUserLinkedAppLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGUserLinkedAppLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGUserLinkedAppLogInfo;

	static new(): DBTEAMLOGUserLinkedAppLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGUserLinkedAppLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGUserLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGUserLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGUserLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountId: string;

	readonly displayName: string;

	readonly email: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { accountId: string; displayName: string; email: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithAccountIdDisplayNameEmail(accountId: string, displayName: string, email: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGUserLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGUserLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGUserLogInfo;

	static new(): DBTEAMLOGUserLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGUserLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGUserNameLogInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGUserNameLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGUserNameLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly givenName: string;

	readonly locale: string;

	readonly surname: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { givenName: string; surname: string; });

	constructor(o: { givenName: string; surname: string; locale: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGivenNameSurname(givenName: string, surname: string): this;

	initWithGivenNameSurnameLocale(givenName: string, surname: string, locale: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGUserNameLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGUserNameLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGUserNameLogInfo;

	static new(): DBTEAMLOGUserNameLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGUserNameLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGUserOrTeamLinkedAppLogInfo extends DBTEAMLOGAppLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGUserOrTeamLinkedAppLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGUserOrTeamLinkedAppLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGUserOrTeamLinkedAppLogInfo;

	static new(): DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGUserOrTeamLinkedAppLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGViewerInfoPolicyChangedDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGViewerInfoPolicyChangedDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGViewerInfoPolicyChangedDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGPassPolicy;

	readonly previousValue: DBTEAMLOGPassPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { previousValue: DBTEAMLOGPassPolicy; dNewValue: DBTEAMLOGPassPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithPreviousValueDNewValue(previousValue: DBTEAMLOGPassPolicy, dNewValue: DBTEAMLOGPassPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGViewerInfoPolicyChangedDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGViewerInfoPolicyChangedDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGViewerInfoPolicyChangedDetails;

	static new(): DBTEAMLOGViewerInfoPolicyChangedDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGViewerInfoPolicyChangedDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGViewerInfoPolicyChangedType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGViewerInfoPolicyChangedType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGViewerInfoPolicyChangedType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGViewerInfoPolicyChangedTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGViewerInfoPolicyChangedTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGViewerInfoPolicyChangedType;

	static new(): DBTEAMLOGViewerInfoPolicyChangedTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGViewerInfoPolicyChangedType): NSDictionary<string, any>;
}

declare class DBTEAMLOGWebDeviceSessionLogInfo extends DBTEAMLOGDeviceSessionLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGWebDeviceSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGWebDeviceSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly browser: string;

	readonly os: string;

	readonly sessionInfo: DBTEAMLOGWebSessionLogInfo;

	readonly userAgent: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { userAgent: string; os: string; browser: string; });

	constructor(o: { userAgent: string; os: string; browser: string; ipAddress: string; created: Date; updated: Date; sessionInfo: DBTEAMLOGWebSessionLogInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserAgentOsBrowser(userAgent: string, os: string, browser: string): this;

	initWithUserAgentOsBrowserIpAddressCreatedUpdatedSessionInfo(userAgent: string, os: string, browser: string, ipAddress: string, created: Date, updated: Date, sessionInfo: DBTEAMLOGWebSessionLogInfo): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGWebDeviceSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGWebDeviceSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGWebDeviceSessionLogInfo;

	static new(): DBTEAMLOGWebDeviceSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGWebDeviceSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGWebSessionLogInfo extends DBTEAMLOGSessionLogInfo implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGWebSessionLogInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGWebSessionLogInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGWebSessionLogInfoSerializer extends NSObject {

	static alloc(): DBTEAMLOGWebSessionLogInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGWebSessionLogInfo;

	static new(): DBTEAMLOGWebSessionLogInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGWebSessionLogInfo): NSDictionary<string, any>;
}

declare class DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGWebSessionsFixedLengthPolicy;

	readonly previousValue: DBTEAMLOGWebSessionsFixedLengthPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: DBTEAMLOGWebSessionsFixedLengthPolicy; previousValue: DBTEAMLOGWebSessionsFixedLengthPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGWebSessionsFixedLengthPolicy, previousValue: DBTEAMLOGWebSessionsFixedLengthPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails;

	static new(): DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGWebSessionsChangeFixedLengthPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGWebSessionsChangeFixedLengthPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGWebSessionsChangeFixedLengthPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGWebSessionsChangeFixedLengthPolicyType;

	static new(): DBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGWebSessionsChangeFixedLengthPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewValue: DBTEAMLOGWebSessionsIdleLengthPolicy;

	readonly previousValue: DBTEAMLOGWebSessionsIdleLengthPolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { DNewValue: DBTEAMLOGWebSessionsIdleLengthPolicy; previousValue: DBTEAMLOGWebSessionsIdleLengthPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithDNewValuePreviousValue(dNewValue: DBTEAMLOGWebSessionsIdleLengthPolicy, previousValue: DBTEAMLOGWebSessionsIdleLengthPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer extends NSObject {

	static alloc(): DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails;

	static new(): DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails): NSDictionary<string, any>;
}

declare class DBTEAMLOGWebSessionsChangeIdleLengthPolicyType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGWebSessionsChangeIdleLengthPolicyType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGWebSessionsChangeIdleLengthPolicyType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly description_: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { description_: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDescription_(description_: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer extends NSObject {

	static alloc(): DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGWebSessionsChangeIdleLengthPolicyType;

	static new(): DBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGWebSessionsChangeIdleLengthPolicyType): NSDictionary<string, any>;
}

declare class DBTEAMLOGWebSessionsFixedLengthPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGWebSessionsFixedLengthPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGWebSessionsFixedLengthPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly defined: DBTEAMLOGDurationLogInfo;

	readonly tag: DBTEAMLOGWebSessionsFixedLengthPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { defined: DBTEAMLOGDurationLogInfo; });

	constructor(o: { other: void; });

	constructor(o: { undefined: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDefined(defined: DBTEAMLOGDurationLogInfo): this;

	initWithOther(): this;

	initWithUndefined(): this;

	isDefined(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUndefined(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGWebSessionsFixedLengthPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGWebSessionsFixedLengthPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGWebSessionsFixedLengthPolicy;

	static new(): DBTEAMLOGWebSessionsFixedLengthPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGWebSessionsFixedLengthPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGWebSessionsFixedLengthPolicyTag {

	Defined = 0,

	Undefined = 1,

	Other = 2
}

declare class DBTEAMLOGWebSessionsIdleLengthPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMLOGWebSessionsIdleLengthPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMLOGWebSessionsIdleLengthPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly defined: DBTEAMLOGDurationLogInfo;

	readonly tag: DBTEAMLOGWebSessionsIdleLengthPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { defined: DBTEAMLOGDurationLogInfo; });

	constructor(o: { other: void; });

	constructor(o: { undefined: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDefined(defined: DBTEAMLOGDurationLogInfo): this;

	initWithOther(): this;

	initWithUndefined(): this;

	isDefined(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUndefined(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMLOGWebSessionsIdleLengthPolicySerializer extends NSObject {

	static alloc(): DBTEAMLOGWebSessionsIdleLengthPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMLOGWebSessionsIdleLengthPolicy;

	static new(): DBTEAMLOGWebSessionsIdleLengthPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMLOGWebSessionsIdleLengthPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMLOGWebSessionsIdleLengthPolicyTag {

	Defined = 0,

	Undefined = 1,

	Other = 2
}

declare class DBTEAMListMemberAppsArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMemberAppsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMemberAppsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamMemberId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamMemberId(teamMemberId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListMemberAppsArgSerializer extends NSObject {

	static alloc(): DBTEAMListMemberAppsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMemberAppsArg;

	static new(): DBTEAMListMemberAppsArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMemberAppsArg): NSDictionary<string, any>;
}

declare class DBTEAMListMemberAppsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMemberAppsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMemberAppsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMListMemberAppsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { memberNotFound: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMemberNotFound(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberNotFound(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMListMemberAppsErrorSerializer extends NSObject {

	static alloc(): DBTEAMListMemberAppsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMemberAppsError;

	static new(): DBTEAMListMemberAppsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMemberAppsError): NSDictionary<string, any>;
}

declare const enum DBTEAMListMemberAppsErrorTag {

	MemberNotFound = 0,

	Other = 1
}

declare class DBTEAMListMemberAppsResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMemberAppsResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMemberAppsResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly linkedApiApps: NSArray<DBTEAMApiApp>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { linkedApiApps: NSArray<DBTEAMApiApp> | DBTEAMApiApp[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLinkedApiApps(linkedApiApps: NSArray<DBTEAMApiApp> | DBTEAMApiApp[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListMemberAppsResultSerializer extends NSObject {

	static alloc(): DBTEAMListMemberAppsResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMemberAppsResult;

	static new(): DBTEAMListMemberAppsResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMemberAppsResult): NSDictionary<string, any>;
}

declare class DBTEAMListMemberDevicesArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMemberDevicesArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMemberDevicesArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly includeDesktopClients: number;

	readonly includeMobileClients: number;

	readonly includeWebSessions: number;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamMemberId: string; });

	constructor(o: { teamMemberId: string; includeWebSessions: number; includeDesktopClients: number; includeMobileClients: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamMemberId(teamMemberId: string): this;

	initWithTeamMemberIdIncludeWebSessionsIncludeDesktopClientsIncludeMobileClients(teamMemberId: string, includeWebSessions: number, includeDesktopClients: number, includeMobileClients: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListMemberDevicesArgSerializer extends NSObject {

	static alloc(): DBTEAMListMemberDevicesArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMemberDevicesArg;

	static new(): DBTEAMListMemberDevicesArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMemberDevicesArg): NSDictionary<string, any>;
}

declare class DBTEAMListMemberDevicesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMemberDevicesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMemberDevicesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMListMemberDevicesErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { memberNotFound: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMemberNotFound(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberNotFound(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMListMemberDevicesErrorSerializer extends NSObject {

	static alloc(): DBTEAMListMemberDevicesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMemberDevicesError;

	static new(): DBTEAMListMemberDevicesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMemberDevicesError): NSDictionary<string, any>;
}

declare const enum DBTEAMListMemberDevicesErrorTag {

	MemberNotFound = 0,

	Other = 1
}

declare class DBTEAMListMemberDevicesResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMemberDevicesResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMemberDevicesResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly activeWebSessions: NSArray<DBTEAMActiveWebSession>;

	readonly desktopClientSessions: NSArray<DBTEAMDesktopClientSession>;

	readonly mobileClientSessions: NSArray<DBTEAMMobileClientSession>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { activeWebSessions: NSArray<DBTEAMActiveWebSession> | DBTEAMActiveWebSession[]; desktopClientSessions: NSArray<DBTEAMDesktopClientSession> | DBTEAMDesktopClientSession[]; mobileClientSessions: NSArray<DBTEAMMobileClientSession> | DBTEAMMobileClientSession[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithActiveWebSessionsDesktopClientSessionsMobileClientSessions(activeWebSessions: NSArray<DBTEAMActiveWebSession> | DBTEAMActiveWebSession[], desktopClientSessions: NSArray<DBTEAMDesktopClientSession> | DBTEAMDesktopClientSession[], mobileClientSessions: NSArray<DBTEAMMobileClientSession> | DBTEAMMobileClientSession[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListMemberDevicesResultSerializer extends NSObject {

	static alloc(): DBTEAMListMemberDevicesResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMemberDevicesResult;

	static new(): DBTEAMListMemberDevicesResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMemberDevicesResult): NSDictionary<string, any>;
}

declare class DBTEAMListMembersAppsArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMembersAppsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMembersAppsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListMembersAppsArgSerializer extends NSObject {

	static alloc(): DBTEAMListMembersAppsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMembersAppsArg;

	static new(): DBTEAMListMembersAppsArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMembersAppsArg): NSDictionary<string, any>;
}

declare class DBTEAMListMembersAppsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMembersAppsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMembersAppsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMListMembersAppsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { reset: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithReset(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMListMembersAppsErrorSerializer extends NSObject {

	static alloc(): DBTEAMListMembersAppsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMembersAppsError;

	static new(): DBTEAMListMembersAppsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMembersAppsError): NSDictionary<string, any>;
}

declare const enum DBTEAMListMembersAppsErrorTag {

	Reset = 0,

	Other = 1
}

declare class DBTEAMListMembersAppsResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMembersAppsResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMembersAppsResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly apps: NSArray<DBTEAMMemberLinkedApps>;

	readonly cursor: string;

	readonly hasMore: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { apps: NSArray<DBTEAMMemberLinkedApps> | DBTEAMMemberLinkedApps[]; hasMore: number; });

	constructor(o: { apps: NSArray<DBTEAMMemberLinkedApps> | DBTEAMMemberLinkedApps[]; hasMore: number; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppsHasMore(apps: NSArray<DBTEAMMemberLinkedApps> | DBTEAMMemberLinkedApps[], hasMore: number): this;

	initWithAppsHasMoreCursor(apps: NSArray<DBTEAMMemberLinkedApps> | DBTEAMMemberLinkedApps[], hasMore: number, cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListMembersAppsResultSerializer extends NSObject {

	static alloc(): DBTEAMListMembersAppsResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMembersAppsResult;

	static new(): DBTEAMListMembersAppsResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMembersAppsResult): NSDictionary<string, any>;
}

declare class DBTEAMListMembersDevicesArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMembersDevicesArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMembersDevicesArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly includeDesktopClients: number;

	readonly includeMobileClients: number;

	readonly includeWebSessions: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { cursor: string; includeWebSessions: number; includeDesktopClients: number; includeMobileClients: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCursorIncludeWebSessionsIncludeDesktopClientsIncludeMobileClients(cursor: string, includeWebSessions: number, includeDesktopClients: number, includeMobileClients: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListMembersDevicesArgSerializer extends NSObject {

	static alloc(): DBTEAMListMembersDevicesArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMembersDevicesArg;

	static new(): DBTEAMListMembersDevicesArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMembersDevicesArg): NSDictionary<string, any>;
}

declare class DBTEAMListMembersDevicesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMembersDevicesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMembersDevicesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMListMembersDevicesErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { reset: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithReset(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMListMembersDevicesErrorSerializer extends NSObject {

	static alloc(): DBTEAMListMembersDevicesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMembersDevicesError;

	static new(): DBTEAMListMembersDevicesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMembersDevicesError): NSDictionary<string, any>;
}

declare const enum DBTEAMListMembersDevicesErrorTag {

	Reset = 0,

	Other = 1
}

declare class DBTEAMListMembersDevicesResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListMembersDevicesResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListMembersDevicesResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly devices: NSArray<DBTEAMMemberDevices>;

	readonly hasMore: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { devices: NSArray<DBTEAMMemberDevices> | DBTEAMMemberDevices[]; hasMore: number; });

	constructor(o: { devices: NSArray<DBTEAMMemberDevices> | DBTEAMMemberDevices[]; hasMore: number; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDevicesHasMore(devices: NSArray<DBTEAMMemberDevices> | DBTEAMMemberDevices[], hasMore: number): this;

	initWithDevicesHasMoreCursor(devices: NSArray<DBTEAMMemberDevices> | DBTEAMMemberDevices[], hasMore: number, cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListMembersDevicesResultSerializer extends NSObject {

	static alloc(): DBTEAMListMembersDevicesResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListMembersDevicesResult;

	static new(): DBTEAMListMembersDevicesResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListMembersDevicesResult): NSDictionary<string, any>;
}

declare class DBTEAMListTeamAppsArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListTeamAppsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListTeamAppsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListTeamAppsArgSerializer extends NSObject {

	static alloc(): DBTEAMListTeamAppsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListTeamAppsArg;

	static new(): DBTEAMListTeamAppsArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListTeamAppsArg): NSDictionary<string, any>;
}

declare class DBTEAMListTeamAppsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListTeamAppsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListTeamAppsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMListTeamAppsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { reset: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithReset(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMListTeamAppsErrorSerializer extends NSObject {

	static alloc(): DBTEAMListTeamAppsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListTeamAppsError;

	static new(): DBTEAMListTeamAppsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListTeamAppsError): NSDictionary<string, any>;
}

declare const enum DBTEAMListTeamAppsErrorTag {

	Reset = 0,

	Other = 1
}

declare class DBTEAMListTeamAppsResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListTeamAppsResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListTeamAppsResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly apps: NSArray<DBTEAMMemberLinkedApps>;

	readonly cursor: string;

	readonly hasMore: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { apps: NSArray<DBTEAMMemberLinkedApps> | DBTEAMMemberLinkedApps[]; hasMore: number; });

	constructor(o: { apps: NSArray<DBTEAMMemberLinkedApps> | DBTEAMMemberLinkedApps[]; hasMore: number; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppsHasMore(apps: NSArray<DBTEAMMemberLinkedApps> | DBTEAMMemberLinkedApps[], hasMore: number): this;

	initWithAppsHasMoreCursor(apps: NSArray<DBTEAMMemberLinkedApps> | DBTEAMMemberLinkedApps[], hasMore: number, cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListTeamAppsResultSerializer extends NSObject {

	static alloc(): DBTEAMListTeamAppsResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListTeamAppsResult;

	static new(): DBTEAMListTeamAppsResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListTeamAppsResult): NSDictionary<string, any>;
}

declare class DBTEAMListTeamDevicesArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListTeamDevicesArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListTeamDevicesArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly includeDesktopClients: number;

	readonly includeMobileClients: number;

	readonly includeWebSessions: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { cursor: string; includeWebSessions: number; includeDesktopClients: number; includeMobileClients: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithCursorIncludeWebSessionsIncludeDesktopClientsIncludeMobileClients(cursor: string, includeWebSessions: number, includeDesktopClients: number, includeMobileClients: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListTeamDevicesArgSerializer extends NSObject {

	static alloc(): DBTEAMListTeamDevicesArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListTeamDevicesArg;

	static new(): DBTEAMListTeamDevicesArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListTeamDevicesArg): NSDictionary<string, any>;
}

declare class DBTEAMListTeamDevicesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListTeamDevicesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListTeamDevicesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMListTeamDevicesErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { reset: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithReset(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isReset(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMListTeamDevicesErrorSerializer extends NSObject {

	static alloc(): DBTEAMListTeamDevicesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListTeamDevicesError;

	static new(): DBTEAMListTeamDevicesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListTeamDevicesError): NSDictionary<string, any>;
}

declare const enum DBTEAMListTeamDevicesErrorTag {

	Reset = 0,

	Other = 1
}

declare class DBTEAMListTeamDevicesResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMListTeamDevicesResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMListTeamDevicesResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly devices: NSArray<DBTEAMMemberDevices>;

	readonly hasMore: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { devices: NSArray<DBTEAMMemberDevices> | DBTEAMMemberDevices[]; hasMore: number; });

	constructor(o: { devices: NSArray<DBTEAMMemberDevices> | DBTEAMMemberDevices[]; hasMore: number; cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDevicesHasMore(devices: NSArray<DBTEAMMemberDevices> | DBTEAMMemberDevices[], hasMore: number): this;

	initWithDevicesHasMoreCursor(devices: NSArray<DBTEAMMemberDevices> | DBTEAMMemberDevices[], hasMore: number, cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMListTeamDevicesResultSerializer extends NSObject {

	static alloc(): DBTEAMListTeamDevicesResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMListTeamDevicesResult;

	static new(): DBTEAMListTeamDevicesResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMListTeamDevicesResult): NSDictionary<string, any>;
}

declare class DBTEAMMemberAccess extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMemberAccess; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMemberAccess; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessType: DBTEAMGroupAccessType;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; accessType: DBTEAMGroupAccessType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserAccessType(user: DBTEAMUserSelectorArg, accessType: DBTEAMGroupAccessType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMemberAccessSerializer extends NSObject {

	static alloc(): DBTEAMMemberAccessSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMemberAccess;

	static new(): DBTEAMMemberAccessSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMemberAccess): NSDictionary<string, any>;
}

declare class DBTEAMMemberAddArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMemberAddArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMemberAddArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isDirectoryRestricted: number;

	readonly memberEmail: string;

	readonly memberExternalId: string;

	readonly memberGivenName: string;

	readonly memberPersistentId: string;

	readonly memberSurname: string;

	readonly role: DBTEAMAdminTier;

	readonly sendWelcomeEmail: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { memberEmail: string; });

	constructor(o: { memberEmail: string; memberGivenName: string; memberSurname: string; memberExternalId: string; memberPersistentId: string; sendWelcomeEmail: number; role: DBTEAMAdminTier; isDirectoryRestricted: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMemberEmail(memberEmail: string): this;

	initWithMemberEmailMemberGivenNameMemberSurnameMemberExternalIdMemberPersistentIdSendWelcomeEmailRoleIsDirectoryRestricted(memberEmail: string, memberGivenName: string, memberSurname: string, memberExternalId: string, memberPersistentId: string, sendWelcomeEmail: number, role: DBTEAMAdminTier, isDirectoryRestricted: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMemberAddArgSerializer extends NSObject {

	static alloc(): DBTEAMMemberAddArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMemberAddArg;

	static new(): DBTEAMMemberAddArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMemberAddArg): NSDictionary<string, any>;
}

declare class DBTEAMMemberAddResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMemberAddResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMemberAddResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly duplicateExternalMemberId: string;

	readonly duplicateMemberPersistentId: string;

	readonly freeTeamMemberLimitReached: string;

	readonly persistentIdDisabled: string;

	readonly success: DBTEAMTeamMemberInfo;

	readonly tag: DBTEAMMemberAddResultTag;

	readonly teamLicenseLimit: string;

	readonly userAlreadyOnTeam: string;

	readonly userAlreadyPaired: string;

	readonly userCreationFailed: string;

	readonly userMigrationFailed: string;

	readonly userOnAnotherTeam: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { duplicateExternalMemberId: string; });

	constructor(o: { duplicateMemberPersistentId: string; });

	constructor(o: { freeTeamMemberLimitReached: string; });

	constructor(o: { persistentIdDisabled: string; });

	constructor(o: { success: DBTEAMTeamMemberInfo; });

	constructor(o: { teamLicenseLimit: string; });

	constructor(o: { userAlreadyOnTeam: string; });

	constructor(o: { userAlreadyPaired: string; });

	constructor(o: { userCreationFailed: string; });

	constructor(o: { userMigrationFailed: string; });

	constructor(o: { userOnAnotherTeam: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDuplicateExternalMemberId(duplicateExternalMemberId: string): this;

	initWithDuplicateMemberPersistentId(duplicateMemberPersistentId: string): this;

	initWithFreeTeamMemberLimitReached(freeTeamMemberLimitReached: string): this;

	initWithPersistentIdDisabled(persistentIdDisabled: string): this;

	initWithSuccess(success: DBTEAMTeamMemberInfo): this;

	initWithTeamLicenseLimit(teamLicenseLimit: string): this;

	initWithUserAlreadyOnTeam(userAlreadyOnTeam: string): this;

	initWithUserAlreadyPaired(userAlreadyPaired: string): this;

	initWithUserCreationFailed(userCreationFailed: string): this;

	initWithUserMigrationFailed(userMigrationFailed: string): this;

	initWithUserOnAnotherTeam(userOnAnotherTeam: string): this;

	isDuplicateExternalMemberId(): boolean;

	isDuplicateMemberPersistentId(): boolean;

	isEqual(object: any): boolean;

	isFreeTeamMemberLimitReached(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPersistentIdDisabled(): boolean;

	isSuccess(): boolean;

	isTeamLicenseLimit(): boolean;

	isUserAlreadyOnTeam(): boolean;

	isUserAlreadyPaired(): boolean;

	isUserCreationFailed(): boolean;

	isUserMigrationFailed(): boolean;

	isUserOnAnotherTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMemberAddResultSerializer extends NSObject {

	static alloc(): DBTEAMMemberAddResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMemberAddResult;

	static new(): DBTEAMMemberAddResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMemberAddResult): NSDictionary<string, any>;
}

declare const enum DBTEAMMemberAddResultTag {

	Success = 0,

	TeamLicenseLimit = 1,

	FreeTeamMemberLimitReached = 2,

	UserAlreadyOnTeam = 3,

	UserOnAnotherTeam = 4,

	UserAlreadyPaired = 5,

	UserMigrationFailed = 6,

	DuplicateExternalMemberId = 7,

	DuplicateMemberPersistentId = 8,

	PersistentIdDisabled = 9,

	UserCreationFailed = 10
}

declare class DBTEAMMemberDevices extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMemberDevices; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMemberDevices; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly desktopClients: NSArray<DBTEAMDesktopClientSession>;

	readonly mobileClients: NSArray<DBTEAMMobileClientSession>;

	readonly teamMemberId: string;

	readonly webSessions: NSArray<DBTEAMActiveWebSession>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamMemberId: string; });

	constructor(o: { teamMemberId: string; webSessions: NSArray<DBTEAMActiveWebSession> | DBTEAMActiveWebSession[]; desktopClients: NSArray<DBTEAMDesktopClientSession> | DBTEAMDesktopClientSession[]; mobileClients: NSArray<DBTEAMMobileClientSession> | DBTEAMMobileClientSession[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamMemberId(teamMemberId: string): this;

	initWithTeamMemberIdWebSessionsDesktopClientsMobileClients(teamMemberId: string, webSessions: NSArray<DBTEAMActiveWebSession> | DBTEAMActiveWebSession[], desktopClients: NSArray<DBTEAMDesktopClientSession> | DBTEAMDesktopClientSession[], mobileClients: NSArray<DBTEAMMobileClientSession> | DBTEAMMobileClientSession[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMemberDevicesSerializer extends NSObject {

	static alloc(): DBTEAMMemberDevicesSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMemberDevices;

	static new(): DBTEAMMemberDevicesSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMemberDevices): NSDictionary<string, any>;
}

declare class DBTEAMMemberLinkedApps extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMemberLinkedApps; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMemberLinkedApps; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly linkedApiApps: NSArray<DBTEAMApiApp>;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamMemberId: string; linkedApiApps: NSArray<DBTEAMApiApp> | DBTEAMApiApp[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamMemberIdLinkedApiApps(teamMemberId: string, linkedApiApps: NSArray<DBTEAMApiApp> | DBTEAMApiApp[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMemberLinkedAppsSerializer extends NSObject {

	static alloc(): DBTEAMMemberLinkedAppsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMemberLinkedApps;

	static new(): DBTEAMMemberLinkedAppsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMemberLinkedApps): NSDictionary<string, any>;
}

declare class DBTEAMMemberProfile extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMemberProfile; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMemberProfile; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountId: string;

	readonly email: string;

	readonly emailVerified: number;

	readonly externalId: string;

	readonly isDirectoryRestricted: number;

	readonly joinedOn: Date;

	readonly membershipType: DBTEAMTeamMembershipType;

	readonly name: DBUSERSName;

	readonly persistentId: string;

	readonly status: DBTEAMTeamMemberStatus;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamMemberId: string; email: string; emailVerified: number; status: DBTEAMTeamMemberStatus; name: DBUSERSName; membershipType: DBTEAMTeamMembershipType; });

	constructor(o: { teamMemberId: string; email: string; emailVerified: number; status: DBTEAMTeamMemberStatus; name: DBUSERSName; membershipType: DBTEAMTeamMembershipType; externalId: string; accountId: string; joinedOn: Date; persistentId: string; isDirectoryRestricted: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamMemberIdEmailEmailVerifiedStatusNameMembershipType(teamMemberId: string, email: string, emailVerified: number, status: DBTEAMTeamMemberStatus, name: DBUSERSName, membershipType: DBTEAMTeamMembershipType): this;

	initWithTeamMemberIdEmailEmailVerifiedStatusNameMembershipTypeExternalIdAccountIdJoinedOnPersistentIdIsDirectoryRestricted(teamMemberId: string, email: string, emailVerified: number, status: DBTEAMTeamMemberStatus, name: DBUSERSName, membershipType: DBTEAMTeamMembershipType, externalId: string, accountId: string, joinedOn: Date, persistentId: string, isDirectoryRestricted: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMemberProfileSerializer extends NSObject {

	static alloc(): DBTEAMMemberProfileSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMemberProfile;

	static new(): DBTEAMMemberProfileSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMemberProfile): NSDictionary<string, any>;
}

declare class DBTEAMMemberSelectorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMemberSelectorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMemberSelectorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMemberSelectorErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMemberSelectorErrorSerializer extends NSObject {

	static alloc(): DBTEAMMemberSelectorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMemberSelectorError;

	static new(): DBTEAMMemberSelectorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMemberSelectorError): NSDictionary<string, any>;
}

declare const enum DBTEAMMemberSelectorErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1
}

declare class DBTEAMMembersAddArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersAddArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersAddArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewMembers: NSArray<DBTEAMMemberAddArg>;

	readonly forceAsync: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { DNewMembers: NSArray<DBTEAMMemberAddArg> | DBTEAMMemberAddArg[]; });

	constructor(o: { DNewMembers: NSArray<DBTEAMMemberAddArg> | DBTEAMMemberAddArg[]; forceAsync: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDNewMembers(dNewMembers: NSArray<DBTEAMMemberAddArg> | DBTEAMMemberAddArg[]): this;

	initWithDNewMembersForceAsync(dNewMembers: NSArray<DBTEAMMemberAddArg> | DBTEAMMemberAddArg[], forceAsync: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersAddArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersAddArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersAddArg;

	static new(): DBTEAMMembersAddArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersAddArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersAddJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersAddJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersAddJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: NSArray<DBTEAMMemberAddResult>;

	readonly failed: string;

	readonly tag: DBTEAMMembersAddJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: NSArray<DBTEAMMemberAddResult> | DBTEAMMemberAddResult[]; });

	constructor(o: { failed: string; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: NSArray<DBTEAMMemberAddResult> | DBTEAMMemberAddResult[]): this;

	initWithFailed(failed: string): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersAddJobStatusSerializer extends NSObject {

	static alloc(): DBTEAMMembersAddJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersAddJobStatus;

	static new(): DBTEAMMembersAddJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersAddJobStatus): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersAddJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2
}

declare class DBTEAMMembersAddLaunch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersAddLaunch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersAddLaunch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: NSArray<DBTEAMMemberAddResult>;

	readonly tag: DBTEAMMembersAddLaunchTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: NSArray<DBTEAMMemberAddResult> | DBTEAMMemberAddResult[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: NSArray<DBTEAMMemberAddResult> | DBTEAMMemberAddResult[]): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersAddLaunchSerializer extends NSObject {

	static alloc(): DBTEAMMembersAddLaunchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersAddLaunch;

	static new(): DBTEAMMembersAddLaunchSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersAddLaunch): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersAddLaunchTag {

	AsyncJobId = 0,

	Complete = 1
}

declare class DBTEAMMembersDataTransferArg extends DBTEAMMembersDeactivateBaseArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersDataTransferArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersDataTransferArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly transferAdminId: DBTEAMUserSelectorArg;

	readonly transferDestId: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; transferDestId: DBTEAMUserSelectorArg; transferAdminId: DBTEAMUserSelectorArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserTransferDestIdTransferAdminId(user: DBTEAMUserSelectorArg, transferDestId: DBTEAMUserSelectorArg, transferAdminId: DBTEAMUserSelectorArg): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersDataTransferArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersDataTransferArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersDataTransferArg;

	static new(): DBTEAMMembersDataTransferArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersDataTransferArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersDeactivateArg extends DBTEAMMembersDeactivateBaseArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersDeactivateArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersDeactivateArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly wipeData: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; wipeData: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserWipeData(user: DBTEAMUserSelectorArg, wipeData: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersDeactivateArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersDeactivateArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersDeactivateArg;

	static new(): DBTEAMMembersDeactivateArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersDeactivateArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersDeactivateBaseArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersDeactivateBaseArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersDeactivateBaseArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUser(user: DBTEAMUserSelectorArg): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersDeactivateBaseArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersDeactivateBaseArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersDeactivateBaseArg;

	static new(): DBTEAMMembersDeactivateBaseArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersDeactivateBaseArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersDeactivateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersDeactivateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersDeactivateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersDeactivateErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersDeactivateErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersDeactivateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersDeactivateError;

	static new(): DBTEAMMembersDeactivateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersDeactivateError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersDeactivateErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1,

	Other = 2
}

declare class DBTEAMMembersGetInfoArgs extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersGetInfoArgs; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersGetInfoArgs; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly members: NSArray<DBTEAMUserSelectorArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { members: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMembers(members: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersGetInfoArgsSerializer extends NSObject {

	static alloc(): DBTEAMMembersGetInfoArgsSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersGetInfoArgs;

	static new(): DBTEAMMembersGetInfoArgsSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersGetInfoArgs): NSDictionary<string, any>;
}

declare class DBTEAMMembersGetInfoError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersGetInfoError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersGetInfoError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersGetInfoErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersGetInfoErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersGetInfoErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersGetInfoError;

	static new(): DBTEAMMembersGetInfoErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersGetInfoError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersGetInfoErrorTag {

	Other = 0
}

declare class DBTEAMMembersGetInfoItem extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersGetInfoItem; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersGetInfoItem; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly idNotFound: string;

	readonly memberInfo: DBTEAMTeamMemberInfo;

	readonly tag: DBTEAMMembersGetInfoItemTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { idNotFound: string; });

	constructor(o: { memberInfo: DBTEAMTeamMemberInfo; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIdNotFound(idNotFound: string): this;

	initWithMemberInfo(memberInfo: DBTEAMTeamMemberInfo): this;

	isEqual(object: any): boolean;

	isIdNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberInfo(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersGetInfoItemSerializer extends NSObject {

	static alloc(): DBTEAMMembersGetInfoItemSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersGetInfoItem;

	static new(): DBTEAMMembersGetInfoItemSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersGetInfoItem): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersGetInfoItemTag {

	IdNotFound = 0,

	MemberInfo = 1
}

declare class DBTEAMMembersListArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersListArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersListArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly includeRemoved: number;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { limit: number; includeRemoved: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithLimitIncludeRemoved(limit: number, includeRemoved: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersListArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersListArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersListArg;

	static new(): DBTEAMMembersListArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersListArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersListContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersListContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersListContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersListContinueArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersListContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersListContinueArg;

	static new(): DBTEAMMembersListContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersListContinueArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersListContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersListContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersListContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersListContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersListContinueErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersListContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersListContinueError;

	static new(): DBTEAMMembersListContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersListContinueError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersListContinueErrorTag {

	InvalidCursor = 0,

	Other = 1
}

declare class DBTEAMMembersListError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersListError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersListError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersListErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersListErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersListErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersListError;

	static new(): DBTEAMMembersListErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersListError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersListErrorTag {

	Other = 0
}

declare class DBTEAMMembersListResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersListResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersListResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly hasMore: number;

	readonly members: NSArray<DBTEAMTeamMemberInfo>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { members: NSArray<DBTEAMTeamMemberInfo> | DBTEAMTeamMemberInfo[]; cursor: string; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMembersCursorHasMore(members: NSArray<DBTEAMTeamMemberInfo> | DBTEAMTeamMemberInfo[], cursor: string, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersListResultSerializer extends NSObject {

	static alloc(): DBTEAMMembersListResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersListResult;

	static new(): DBTEAMMembersListResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersListResult): NSDictionary<string, any>;
}

declare class DBTEAMMembersRecoverArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersRecoverArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersRecoverArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUser(user: DBTEAMUserSelectorArg): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersRecoverArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersRecoverArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersRecoverArg;

	static new(): DBTEAMMembersRecoverArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersRecoverArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersRecoverError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersRecoverError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersRecoverError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersRecoverErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { teamLicenseLimit: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	constructor(o: { userUnrecoverable: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTeamLicenseLimit(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	initWithUserUnrecoverable(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeamLicenseLimit(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	isUserUnrecoverable(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersRecoverErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersRecoverErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersRecoverError;

	static new(): DBTEAMMembersRecoverErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersRecoverError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersRecoverErrorTag {

	UserNotFound = 0,

	UserUnrecoverable = 1,

	UserNotInTeam = 2,

	TeamLicenseLimit = 3,

	Other = 4
}

declare class DBTEAMMembersRemoveArg extends DBTEAMMembersDeactivateArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersRemoveArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersRemoveArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly keepAccount: number;

	readonly transferAdminId: DBTEAMUserSelectorArg;

	readonly transferDestId: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; wipeData: number; transferDestId: DBTEAMUserSelectorArg; transferAdminId: DBTEAMUserSelectorArg; keepAccount: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserWipeDataTransferDestIdTransferAdminIdKeepAccount(user: DBTEAMUserSelectorArg, wipeData: number, transferDestId: DBTEAMUserSelectorArg, transferAdminId: DBTEAMUserSelectorArg, keepAccount: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersRemoveArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersRemoveArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersRemoveArg;

	static new(): DBTEAMMembersRemoveArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersRemoveArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersRemoveError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersRemoveError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersRemoveError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersRemoveErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cannotKeepAccountAndDeleteData: void; });

	constructor(o: { cannotKeepAccountAndTransfer: void; });

	constructor(o: { cannotKeepInvitedUserAccount: void; });

	constructor(o: { emailAddressTooLongToBeDisabled: void; });

	constructor(o: { other: void; });

	constructor(o: { recipientNotVerified: void; });

	constructor(o: { removeLastAdmin: void; });

	constructor(o: { removedAndTransferAdminShouldDiffer: void; });

	constructor(o: { removedAndTransferDestShouldDiffer: void; });

	constructor(o: { transferAdminIsNotAdmin: void; });

	constructor(o: { transferAdminUserNotFound: void; });

	constructor(o: { transferAdminUserNotInTeam: void; });

	constructor(o: { transferDestUserNotFound: void; });

	constructor(o: { transferDestUserNotInTeam: void; });

	constructor(o: { unspecifiedTransferAdminId: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCannotKeepAccountAndDeleteData(): this;

	initWithCannotKeepAccountAndTransfer(): this;

	initWithCannotKeepInvitedUserAccount(): this;

	initWithEmailAddressTooLongToBeDisabled(): this;

	initWithOther(): this;

	initWithRecipientNotVerified(): this;

	initWithRemoveLastAdmin(): this;

	initWithRemovedAndTransferAdminShouldDiffer(): this;

	initWithRemovedAndTransferDestShouldDiffer(): this;

	initWithTransferAdminIsNotAdmin(): this;

	initWithTransferAdminUserNotFound(): this;

	initWithTransferAdminUserNotInTeam(): this;

	initWithTransferDestUserNotFound(): this;

	initWithTransferDestUserNotInTeam(): this;

	initWithUnspecifiedTransferAdminId(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isCannotKeepAccountAndDeleteData(): boolean;

	isCannotKeepAccountAndTransfer(): boolean;

	isCannotKeepInvitedUserAccount(): boolean;

	isEmailAddressTooLongToBeDisabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRecipientNotVerified(): boolean;

	isRemoveLastAdmin(): boolean;

	isRemovedAndTransferAdminShouldDiffer(): boolean;

	isRemovedAndTransferDestShouldDiffer(): boolean;

	isTransferAdminIsNotAdmin(): boolean;

	isTransferAdminUserNotFound(): boolean;

	isTransferAdminUserNotInTeam(): boolean;

	isTransferDestUserNotFound(): boolean;

	isTransferDestUserNotInTeam(): boolean;

	isUnspecifiedTransferAdminId(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersRemoveErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersRemoveErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersRemoveError;

	static new(): DBTEAMMembersRemoveErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersRemoveError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersRemoveErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1,

	Other = 2,

	RemovedAndTransferDestShouldDiffer = 3,

	RemovedAndTransferAdminShouldDiffer = 4,

	TransferDestUserNotFound = 5,

	TransferDestUserNotInTeam = 6,

	TransferAdminUserNotInTeam = 7,

	TransferAdminUserNotFound = 8,

	UnspecifiedTransferAdminId = 9,

	TransferAdminIsNotAdmin = 10,

	RecipientNotVerified = 11,

	RemoveLastAdmin = 12,

	CannotKeepAccountAndTransfer = 13,

	CannotKeepAccountAndDeleteData = 14,

	EmailAddressTooLongToBeDisabled = 15,

	CannotKeepInvitedUserAccount = 16
}

declare class DBTEAMMembersSendWelcomeError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersSendWelcomeError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersSendWelcomeError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersSendWelcomeErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersSendWelcomeErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersSendWelcomeErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersSendWelcomeError;

	static new(): DBTEAMMembersSendWelcomeErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersSendWelcomeError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersSendWelcomeErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1,

	Other = 2
}

declare class DBTEAMMembersSetPermissionsArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersSetPermissionsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersSetPermissionsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewRole: DBTEAMAdminTier;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; dNewRole: DBTEAMAdminTier; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserDNewRole(user: DBTEAMUserSelectorArg, dNewRole: DBTEAMAdminTier): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersSetPermissionsArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersSetPermissionsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersSetPermissionsArg;

	static new(): DBTEAMMembersSetPermissionsArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersSetPermissionsArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersSetPermissionsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersSetPermissionsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersSetPermissionsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersSetPermissionsErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cannotSetPermissions: void; });

	constructor(o: { lastAdmin: void; });

	constructor(o: { other: void; });

	constructor(o: { teamLicenseLimit: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCannotSetPermissions(): this;

	initWithLastAdmin(): this;

	initWithOther(): this;

	initWithTeamLicenseLimit(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isCannotSetPermissions(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLastAdmin(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeamLicenseLimit(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersSetPermissionsErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersSetPermissionsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersSetPermissionsError;

	static new(): DBTEAMMembersSetPermissionsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersSetPermissionsError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersSetPermissionsErrorTag {

	UserNotFound = 0,

	LastAdmin = 1,

	UserNotInTeam = 2,

	CannotSetPermissions = 3,

	TeamLicenseLimit = 4,

	Other = 5
}

declare class DBTEAMMembersSetPermissionsResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersSetPermissionsResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersSetPermissionsResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly role: DBTEAMAdminTier;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamMemberId: string; role: DBTEAMAdminTier; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamMemberIdRole(teamMemberId: string, role: DBTEAMAdminTier): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersSetPermissionsResultSerializer extends NSObject {

	static alloc(): DBTEAMMembersSetPermissionsResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersSetPermissionsResult;

	static new(): DBTEAMMembersSetPermissionsResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersSetPermissionsResult): NSDictionary<string, any>;
}

declare class DBTEAMMembersSetProfileArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersSetProfileArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersSetProfileArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly dNewEmail: string;

	readonly dNewExternalId: string;

	readonly dNewGivenName: string;

	readonly dNewIsDirectoryRestricted: number;

	readonly dNewPersistentId: string;

	readonly dNewSurname: string;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; });

	constructor(o: { user: DBTEAMUserSelectorArg; dNewEmail: string; dNewExternalId: string; dNewGivenName: string; dNewSurname: string; dNewPersistentId: string; dNewIsDirectoryRestricted: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUser(user: DBTEAMUserSelectorArg): this;

	initWithUserDNewEmailDNewExternalIdDNewGivenNameDNewSurnameDNewPersistentIdDNewIsDirectoryRestricted(user: DBTEAMUserSelectorArg, dNewEmail: string, dNewExternalId: string, dNewGivenName: string, dNewSurname: string, dNewPersistentId: string, dNewIsDirectoryRestricted: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersSetProfileArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersSetProfileArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersSetProfileArg;

	static new(): DBTEAMMembersSetProfileArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersSetProfileArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersSetProfileError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersSetProfileError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersSetProfileError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersSetProfileErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { directoryRestrictedOff: void; });

	constructor(o: { emailReservedForOtherUser: void; });

	constructor(o: { externalIdAndNewExternalIdUnsafe: void; });

	constructor(o: { externalIdUsedByOtherUser: void; });

	constructor(o: { noNewDataSpecified: void; });

	constructor(o: { other: void; });

	constructor(o: { paramCannotBeEmpty: void; });

	constructor(o: { persistentIdDisabled: void; });

	constructor(o: { persistentIdUsedByOtherUser: void; });

	constructor(o: { setProfileDisallowed: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDirectoryRestrictedOff(): this;

	initWithEmailReservedForOtherUser(): this;

	initWithExternalIdAndNewExternalIdUnsafe(): this;

	initWithExternalIdUsedByOtherUser(): this;

	initWithNoNewDataSpecified(): this;

	initWithOther(): this;

	initWithParamCannotBeEmpty(): this;

	initWithPersistentIdDisabled(): this;

	initWithPersistentIdUsedByOtherUser(): this;

	initWithSetProfileDisallowed(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isDirectoryRestrictedOff(): boolean;

	isEmailReservedForOtherUser(): boolean;

	isEqual(object: any): boolean;

	isExternalIdAndNewExternalIdUnsafe(): boolean;

	isExternalIdUsedByOtherUser(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoNewDataSpecified(): boolean;

	isOther(): boolean;

	isParamCannotBeEmpty(): boolean;

	isPersistentIdDisabled(): boolean;

	isPersistentIdUsedByOtherUser(): boolean;

	isSetProfileDisallowed(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersSetProfileErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersSetProfileErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersSetProfileError;

	static new(): DBTEAMMembersSetProfileErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersSetProfileError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersSetProfileErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1,

	ExternalIdAndNewExternalIdUnsafe = 2,

	NoNewDataSpecified = 3,

	EmailReservedForOtherUser = 4,

	ExternalIdUsedByOtherUser = 5,

	SetProfileDisallowed = 6,

	ParamCannotBeEmpty = 7,

	PersistentIdDisabled = 8,

	PersistentIdUsedByOtherUser = 9,

	DirectoryRestrictedOff = 10,

	Other = 11
}

declare class DBTEAMMembersSuspendError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersSuspendError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersSuspendError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersSuspendErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { suspendInactiveUser: void; });

	constructor(o: { suspendLastAdmin: void; });

	constructor(o: { teamLicenseLimit: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithSuspendInactiveUser(): this;

	initWithSuspendLastAdmin(): this;

	initWithTeamLicenseLimit(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSuspendInactiveUser(): boolean;

	isSuspendLastAdmin(): boolean;

	isTeamLicenseLimit(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersSuspendErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersSuspendErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersSuspendError;

	static new(): DBTEAMMembersSuspendErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersSuspendError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersSuspendErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1,

	Other = 2,

	SuspendInactiveUser = 3,

	SuspendLastAdmin = 4,

	TeamLicenseLimit = 5
}

declare class DBTEAMMembersTransferFilesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersTransferFilesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersTransferFilesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersTransferFilesErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { recipientNotVerified: void; });

	constructor(o: { removedAndTransferAdminShouldDiffer: void; });

	constructor(o: { removedAndTransferDestShouldDiffer: void; });

	constructor(o: { transferAdminIsNotAdmin: void; });

	constructor(o: { transferAdminUserNotFound: void; });

	constructor(o: { transferAdminUserNotInTeam: void; });

	constructor(o: { transferDestUserNotFound: void; });

	constructor(o: { transferDestUserNotInTeam: void; });

	constructor(o: { unspecifiedTransferAdminId: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithRecipientNotVerified(): this;

	initWithRemovedAndTransferAdminShouldDiffer(): this;

	initWithRemovedAndTransferDestShouldDiffer(): this;

	initWithTransferAdminIsNotAdmin(): this;

	initWithTransferAdminUserNotFound(): this;

	initWithTransferAdminUserNotInTeam(): this;

	initWithTransferDestUserNotFound(): this;

	initWithTransferDestUserNotInTeam(): this;

	initWithUnspecifiedTransferAdminId(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRecipientNotVerified(): boolean;

	isRemovedAndTransferAdminShouldDiffer(): boolean;

	isRemovedAndTransferDestShouldDiffer(): boolean;

	isTransferAdminIsNotAdmin(): boolean;

	isTransferAdminUserNotFound(): boolean;

	isTransferAdminUserNotInTeam(): boolean;

	isTransferDestUserNotFound(): boolean;

	isTransferDestUserNotInTeam(): boolean;

	isUnspecifiedTransferAdminId(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersTransferFilesErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersTransferFilesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersTransferFilesError;

	static new(): DBTEAMMembersTransferFilesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersTransferFilesError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersTransferFilesErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1,

	Other = 2,

	RemovedAndTransferDestShouldDiffer = 3,

	RemovedAndTransferAdminShouldDiffer = 4,

	TransferDestUserNotFound = 5,

	TransferDestUserNotInTeam = 6,

	TransferAdminUserNotInTeam = 7,

	TransferAdminUserNotFound = 8,

	UnspecifiedTransferAdminId = 9,

	TransferAdminIsNotAdmin = 10,

	RecipientNotVerified = 11
}

declare class DBTEAMMembersTransferFormerMembersFilesError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersTransferFormerMembersFilesError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersTransferFormerMembersFilesError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersTransferFormerMembersFilesErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { recipientNotVerified: void; });

	constructor(o: { removedAndTransferAdminShouldDiffer: void; });

	constructor(o: { removedAndTransferDestShouldDiffer: void; });

	constructor(o: { transferAdminIsNotAdmin: void; });

	constructor(o: { transferAdminUserNotFound: void; });

	constructor(o: { transferAdminUserNotInTeam: void; });

	constructor(o: { transferDestUserNotFound: void; });

	constructor(o: { transferDestUserNotInTeam: void; });

	constructor(o: { unspecifiedTransferAdminId: void; });

	constructor(o: { userDataAlreadyTransferred: void; });

	constructor(o: { userDataCannotBeTransferred: void; });

	constructor(o: { userDataIsBeingTransferred: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	constructor(o: { userNotRemoved: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithRecipientNotVerified(): this;

	initWithRemovedAndTransferAdminShouldDiffer(): this;

	initWithRemovedAndTransferDestShouldDiffer(): this;

	initWithTransferAdminIsNotAdmin(): this;

	initWithTransferAdminUserNotFound(): this;

	initWithTransferAdminUserNotInTeam(): this;

	initWithTransferDestUserNotFound(): this;

	initWithTransferDestUserNotInTeam(): this;

	initWithUnspecifiedTransferAdminId(): this;

	initWithUserDataAlreadyTransferred(): this;

	initWithUserDataCannotBeTransferred(): this;

	initWithUserDataIsBeingTransferred(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	initWithUserNotRemoved(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRecipientNotVerified(): boolean;

	isRemovedAndTransferAdminShouldDiffer(): boolean;

	isRemovedAndTransferDestShouldDiffer(): boolean;

	isTransferAdminIsNotAdmin(): boolean;

	isTransferAdminUserNotFound(): boolean;

	isTransferAdminUserNotInTeam(): boolean;

	isTransferDestUserNotFound(): boolean;

	isTransferDestUserNotInTeam(): boolean;

	isUnspecifiedTransferAdminId(): boolean;

	isUserDataAlreadyTransferred(): boolean;

	isUserDataCannotBeTransferred(): boolean;

	isUserDataIsBeingTransferred(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	isUserNotRemoved(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersTransferFormerMembersFilesErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersTransferFormerMembersFilesErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersTransferFormerMembersFilesError;

	static new(): DBTEAMMembersTransferFormerMembersFilesErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersTransferFormerMembersFilesError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersTransferFormerMembersFilesErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1,

	Other = 2,

	RemovedAndTransferDestShouldDiffer = 3,

	RemovedAndTransferAdminShouldDiffer = 4,

	TransferDestUserNotFound = 5,

	TransferDestUserNotInTeam = 6,

	TransferAdminUserNotInTeam = 7,

	TransferAdminUserNotFound = 8,

	UnspecifiedTransferAdminId = 9,

	TransferAdminIsNotAdmin = 10,

	RecipientNotVerified = 11,

	UserDataIsBeingTransferred = 12,

	UserNotRemoved = 13,

	UserDataCannotBeTransferred = 14,

	UserDataAlreadyTransferred = 15
}

declare class DBTEAMMembersUnsuspendArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersUnsuspendArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersUnsuspendArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUser(user: DBTEAMUserSelectorArg): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMembersUnsuspendArgSerializer extends NSObject {

	static alloc(): DBTEAMMembersUnsuspendArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersUnsuspendArg;

	static new(): DBTEAMMembersUnsuspendArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersUnsuspendArg): NSDictionary<string, any>;
}

declare class DBTEAMMembersUnsuspendError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMembersUnsuspendError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMembersUnsuspendError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMembersUnsuspendErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { teamLicenseLimit: void; });

	constructor(o: { unsuspendNonSuspendedMember: void; });

	constructor(o: { userNotFound: void; });

	constructor(o: { userNotInTeam: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithTeamLicenseLimit(): this;

	initWithUnsuspendNonSuspendedMember(): this;

	initWithUserNotFound(): this;

	initWithUserNotInTeam(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeamLicenseLimit(): boolean;

	isUnsuspendNonSuspendedMember(): boolean;

	isUserNotFound(): boolean;

	isUserNotInTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMembersUnsuspendErrorSerializer extends NSObject {

	static alloc(): DBTEAMMembersUnsuspendErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMembersUnsuspendError;

	static new(): DBTEAMMembersUnsuspendErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMembersUnsuspendError): NSDictionary<string, any>;
}

declare const enum DBTEAMMembersUnsuspendErrorTag {

	UserNotFound = 0,

	UserNotInTeam = 1,

	Other = 2,

	UnsuspendNonSuspendedMember = 3,

	TeamLicenseLimit = 4
}

declare class DBTEAMMobileClientPlatform extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMobileClientPlatform; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMobileClientPlatform; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMMobileClientPlatformTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { android: void; });

	constructor(o: { blackberry: void; });

	constructor(o: { ipad: void; });

	constructor(o: { iphone: void; });

	constructor(o: { other: void; });

	constructor(o: { windowsPhone: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAndroid(): this;

	initWithBlackberry(): this;

	initWithIpad(): this;

	initWithIphone(): this;

	initWithOther(): this;

	initWithWindowsPhone(): this;

	isAndroid(): boolean;

	isBlackberry(): boolean;

	isEqual(object: any): boolean;

	isIpad(): boolean;

	isIphone(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isWindowsPhone(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMMobileClientPlatformSerializer extends NSObject {

	static alloc(): DBTEAMMobileClientPlatformSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMobileClientPlatform;

	static new(): DBTEAMMobileClientPlatformSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMobileClientPlatform): NSDictionary<string, any>;
}

declare const enum DBTEAMMobileClientPlatformTag {

	Iphone = 0,

	Ipad = 1,

	Android = 2,

	WindowsPhone = 3,

	Blackberry = 4,

	Other = 5
}

declare class DBTEAMMobileClientSession extends DBTEAMDeviceSession implements DBSerializable, NSCopying {

	static alloc(): DBTEAMMobileClientSession; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMMobileClientSession; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly clientType: DBTEAMMobileClientPlatform;

	readonly clientVersion: string;

	readonly deviceName: string;

	readonly lastCarrier: string;

	readonly osVersion: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sessionId: string; deviceName: string; clientType: DBTEAMMobileClientPlatform; });

	constructor(o: { sessionId: string; deviceName: string; clientType: DBTEAMMobileClientPlatform; ipAddress: string; country: string; created: Date; updated: Date; clientVersion: string; osVersion: string; lastCarrier: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSessionIdDeviceNameClientType(sessionId: string, deviceName: string, clientType: DBTEAMMobileClientPlatform): this;

	initWithSessionIdDeviceNameClientTypeIpAddressCountryCreatedUpdatedClientVersionOsVersionLastCarrier(sessionId: string, deviceName: string, clientType: DBTEAMMobileClientPlatform, ipAddress: string, country: string, created: Date, updated: Date, clientVersion: string, osVersion: string, lastCarrier: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMMobileClientSessionSerializer extends NSObject {

	static alloc(): DBTEAMMobileClientSessionSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMMobileClientSession;

	static new(): DBTEAMMobileClientSessionSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMMobileClientSession): NSDictionary<string, any>;
}

declare class DBTEAMNamespaceMetadata extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMNamespaceMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMNamespaceMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly name: string;

	readonly namespaceId: string;

	readonly namespaceType: DBTEAMNamespaceType;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; namespaceId: string; namespaceType: DBTEAMNamespaceType; });

	constructor(o: { name: string; namespaceId: string; namespaceType: DBTEAMNamespaceType; teamMemberId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNameNamespaceIdNamespaceType(name: string, namespaceId: string, namespaceType: DBTEAMNamespaceType): this;

	initWithNameNamespaceIdNamespaceTypeTeamMemberId(name: string, namespaceId: string, namespaceType: DBTEAMNamespaceType, teamMemberId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMNamespaceMetadataSerializer extends NSObject {

	static alloc(): DBTEAMNamespaceMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMNamespaceMetadata;

	static new(): DBTEAMNamespaceMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMNamespaceMetadata): NSDictionary<string, any>;
}

declare class DBTEAMNamespaceType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMNamespaceType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMNamespaceType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMNamespaceTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appFolder: void; });

	constructor(o: { other: void; });

	constructor(o: { sharedFolder: void; });

	constructor(o: { teamFolder: void; });

	constructor(o: { teamMemberFolder: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppFolder(): this;

	initWithOther(): this;

	initWithSharedFolder(): this;

	initWithTeamFolder(): this;

	initWithTeamMemberFolder(): this;

	isAppFolder(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSharedFolder(): boolean;

	isTeamFolder(): boolean;

	isTeamMemberFolder(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMNamespaceTypeSerializer extends NSObject {

	static alloc(): DBTEAMNamespaceTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMNamespaceType;

	static new(): DBTEAMNamespaceTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMNamespaceType): NSDictionary<string, any>;
}

declare const enum DBTEAMNamespaceTypeTag {

	AppFolder = 0,

	SharedFolder = 1,

	TeamFolder = 2,

	TeamMemberFolder = 3,

	Other = 4
}

declare class DBTEAMPOLICIESCameraUploadsPolicyState extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESCameraUploadsPolicyState; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESCameraUploadsPolicyState; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESCameraUploadsPolicyStateTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESCameraUploadsPolicyStateSerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESCameraUploadsPolicyStateSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESCameraUploadsPolicyState;

	static new(): DBTEAMPOLICIESCameraUploadsPolicyStateSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESCameraUploadsPolicyState): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESCameraUploadsPolicyStateTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMPOLICIESEmmState extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESEmmState; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESEmmState; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESEmmStateTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { optional: void; });

	constructor(o: { other: void; });

	constructor(o: { required: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithOptional(): this;

	initWithOther(): this;

	initWithRequired(): this;

	isDisabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOptional(): boolean;

	isOther(): boolean;

	isRequired(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESEmmStateSerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESEmmStateSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESEmmState;

	static new(): DBTEAMPOLICIESEmmStateSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESEmmState): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESEmmStateTag {

	Disabled = 0,

	Optional = 1,

	Required = 2,

	Other = 3
}

declare class DBTEAMPOLICIESGroupCreation extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESGroupCreation; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESGroupCreation; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESGroupCreationTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { adminsAndMembers: void; });

	constructor(o: { adminsOnly: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAdminsAndMembers(): this;

	initWithAdminsOnly(): this;

	isAdminsAndMembers(): boolean;

	isAdminsOnly(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESGroupCreationSerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESGroupCreationSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESGroupCreation;

	static new(): DBTEAMPOLICIESGroupCreationSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESGroupCreation): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESGroupCreationTag {

	AdminsAndMembers = 0,

	AdminsOnly = 1
}

declare class DBTEAMPOLICIESOfficeAddInPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESOfficeAddInPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESOfficeAddInPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESOfficeAddInPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESOfficeAddInPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESOfficeAddInPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESOfficeAddInPolicy;

	static new(): DBTEAMPOLICIESOfficeAddInPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESOfficeAddInPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESOfficeAddInPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMPOLICIESPaperDeploymentPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESPaperDeploymentPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESPaperDeploymentPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESPaperDeploymentPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { full: void; });

	constructor(o: { other: void; });

	constructor(o: { partial: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFull(): this;

	initWithOther(): this;

	initWithPartial(): this;

	isEqual(object: any): boolean;

	isFull(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isPartial(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESPaperDeploymentPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESPaperDeploymentPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESPaperDeploymentPolicy;

	static new(): DBTEAMPOLICIESPaperDeploymentPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESPaperDeploymentPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESPaperDeploymentPolicyTag {

	Full = 0,

	Partial = 1,

	Other = 2
}

declare class DBTEAMPOLICIESPaperEnabledPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESPaperEnabledPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESPaperEnabledPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESPaperEnabledPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	constructor(o: { unspecified: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	initWithUnspecified(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUnspecified(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESPaperEnabledPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESPaperEnabledPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESPaperEnabledPolicy;

	static new(): DBTEAMPOLICIESPaperEnabledPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESPaperEnabledPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESPaperEnabledPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Unspecified = 2,

	Other = 3
}

declare class DBTEAMPOLICIESPasswordStrengthPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESPasswordStrengthPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESPasswordStrengthPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESPasswordStrengthPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { minimalRequirements: void; });

	constructor(o: { moderatePassword: void; });

	constructor(o: { other: void; });

	constructor(o: { strongPassword: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithMinimalRequirements(): this;

	initWithModeratePassword(): this;

	initWithOther(): this;

	initWithStrongPassword(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMinimalRequirements(): boolean;

	isModeratePassword(): boolean;

	isOther(): boolean;

	isStrongPassword(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESPasswordStrengthPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESPasswordStrengthPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESPasswordStrengthPolicy;

	static new(): DBTEAMPOLICIESPasswordStrengthPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESPasswordStrengthPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESPasswordStrengthPolicyTag {

	MinimalRequirements = 0,

	ModeratePassword = 1,

	StrongPassword = 2,

	Other = 3
}

declare class DBTEAMPOLICIESRolloutMethod extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESRolloutMethod; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESRolloutMethod; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESRolloutMethodTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { addMemberToExceptions: void; });

	constructor(o: { unlinkAll: void; });

	constructor(o: { unlinkMostInactive: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAddMemberToExceptions(): this;

	initWithUnlinkAll(): this;

	initWithUnlinkMostInactive(): this;

	isAddMemberToExceptions(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isUnlinkAll(): boolean;

	isUnlinkMostInactive(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESRolloutMethodSerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESRolloutMethodSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESRolloutMethod;

	static new(): DBTEAMPOLICIESRolloutMethodSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESRolloutMethod): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESRolloutMethodTag {

	UnlinkAll = 0,

	UnlinkMostInactive = 1,

	AddMemberToExceptions = 2
}

declare class DBTEAMPOLICIESSharedFolderJoinPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESSharedFolderJoinPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESSharedFolderJoinPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESSharedFolderJoinPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { fromAnyone: void; });

	constructor(o: { fromTeamOnly: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFromAnyone(): this;

	initWithFromTeamOnly(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isFromAnyone(): boolean;

	isFromTeamOnly(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESSharedFolderJoinPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESSharedFolderJoinPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESSharedFolderJoinPolicy;

	static new(): DBTEAMPOLICIESSharedFolderJoinPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESSharedFolderJoinPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESSharedFolderJoinPolicyTag {

	FromTeamOnly = 0,

	FromAnyone = 1,

	Other = 2
}

declare class DBTEAMPOLICIESSharedFolderMemberPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESSharedFolderMemberPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESSharedFolderMemberPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESSharedFolderMemberPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { anyone: void; });

	constructor(o: { other: void; });

	constructor(o: { team: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAnyone(): this;

	initWithOther(): this;

	initWithTeam(): this;

	isAnyone(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESSharedFolderMemberPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESSharedFolderMemberPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESSharedFolderMemberPolicy;

	static new(): DBTEAMPOLICIESSharedFolderMemberPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESSharedFolderMemberPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESSharedFolderMemberPolicyTag {

	Team = 0,

	Anyone = 1,

	Other = 2
}

declare class DBTEAMPOLICIESSharedLinkCreatePolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESSharedLinkCreatePolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESSharedLinkCreatePolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESSharedLinkCreatePolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { defaultPublic: void; });

	constructor(o: { defaultTeamOnly: void; });

	constructor(o: { other: void; });

	constructor(o: { teamOnly: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDefaultPublic(): this;

	initWithDefaultTeamOnly(): this;

	initWithOther(): this;

	initWithTeamOnly(): this;

	isDefaultPublic(): boolean;

	isDefaultTeamOnly(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeamOnly(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESSharedLinkCreatePolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESSharedLinkCreatePolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESSharedLinkCreatePolicy;

	static new(): DBTEAMPOLICIESSharedLinkCreatePolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESSharedLinkCreatePolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESSharedLinkCreatePolicyTag {

	DefaultPublic = 0,

	DefaultTeamOnly = 1,

	TeamOnly = 2,

	Other = 3
}

declare class DBTEAMPOLICIESShowcaseDownloadPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESShowcaseDownloadPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESShowcaseDownloadPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESShowcaseDownloadPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESShowcaseDownloadPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESShowcaseDownloadPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESShowcaseDownloadPolicy;

	static new(): DBTEAMPOLICIESShowcaseDownloadPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESShowcaseDownloadPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESShowcaseDownloadPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMPOLICIESShowcaseEnabledPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESShowcaseEnabledPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESShowcaseEnabledPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESShowcaseEnabledPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESShowcaseEnabledPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESShowcaseEnabledPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESShowcaseEnabledPolicy;

	static new(): DBTEAMPOLICIESShowcaseEnabledPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESShowcaseEnabledPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESShowcaseEnabledPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMPOLICIESShowcaseExternalSharingPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESShowcaseExternalSharingPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESShowcaseExternalSharingPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESShowcaseExternalSharingPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { enabled: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithEnabled(): this;

	initWithOther(): this;

	isDisabled(): boolean;

	isEnabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESShowcaseExternalSharingPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESShowcaseExternalSharingPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESShowcaseExternalSharingPolicy;

	static new(): DBTEAMPOLICIESShowcaseExternalSharingPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESShowcaseExternalSharingPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESShowcaseExternalSharingPolicyTag {

	Disabled = 0,

	Enabled = 1,

	Other = 2
}

declare class DBTEAMPOLICIESSmartSyncPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESSmartSyncPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESSmartSyncPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESSmartSyncPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { local: void; });

	constructor(o: { onDemand: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLocal(): this;

	initWithOnDemand(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLocal(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOnDemand(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESSmartSyncPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESSmartSyncPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESSmartSyncPolicy;

	static new(): DBTEAMPOLICIESSmartSyncPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESSmartSyncPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESSmartSyncPolicyTag {

	Local = 0,

	OnDemand = 1,

	Other = 2
}

declare class DBTEAMPOLICIESSsoPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESSsoPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESSsoPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESSsoPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disabled: void; });

	constructor(o: { optional: void; });

	constructor(o: { other: void; });

	constructor(o: { required: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisabled(): this;

	initWithOptional(): this;

	initWithOther(): this;

	initWithRequired(): this;

	isDisabled(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOptional(): boolean;

	isOther(): boolean;

	isRequired(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESSsoPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESSsoPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESSsoPolicy;

	static new(): DBTEAMPOLICIESSsoPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESSsoPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESSsoPolicyTag {

	Disabled = 0,

	Optional = 1,

	Required = 2,

	Other = 3
}

declare class DBTEAMPOLICIESTeamMemberPolicies extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESTeamMemberPolicies; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESTeamMemberPolicies; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly emmState: DBTEAMPOLICIESEmmState;

	readonly officeAddin: DBTEAMPOLICIESOfficeAddInPolicy;

	readonly sharing: DBTEAMPOLICIESTeamSharingPolicies;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharing: DBTEAMPOLICIESTeamSharingPolicies; emmState: DBTEAMPOLICIESEmmState; officeAddin: DBTEAMPOLICIESOfficeAddInPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharingEmmStateOfficeAddin(sharing: DBTEAMPOLICIESTeamSharingPolicies, emmState: DBTEAMPOLICIESEmmState, officeAddin: DBTEAMPOLICIESOfficeAddInPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMPOLICIESTeamMemberPoliciesSerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESTeamMemberPoliciesSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESTeamMemberPolicies;

	static new(): DBTEAMPOLICIESTeamMemberPoliciesSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESTeamMemberPolicies): NSDictionary<string, any>;
}

declare class DBTEAMPOLICIESTeamSharingPolicies extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESTeamSharingPolicies; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESTeamSharingPolicies; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly sharedFolderJoinPolicy: DBTEAMPOLICIESSharedFolderJoinPolicy;

	readonly sharedFolderMemberPolicy: DBTEAMPOLICIESSharedFolderMemberPolicy;

	readonly sharedLinkCreatePolicy: DBTEAMPOLICIESSharedLinkCreatePolicy;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sharedFolderMemberPolicy: DBTEAMPOLICIESSharedFolderMemberPolicy; sharedFolderJoinPolicy: DBTEAMPOLICIESSharedFolderJoinPolicy; sharedLinkCreatePolicy: DBTEAMPOLICIESSharedLinkCreatePolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSharedFolderMemberPolicySharedFolderJoinPolicySharedLinkCreatePolicy(sharedFolderMemberPolicy: DBTEAMPOLICIESSharedFolderMemberPolicy, sharedFolderJoinPolicy: DBTEAMPOLICIESSharedFolderJoinPolicy, sharedLinkCreatePolicy: DBTEAMPOLICIESSharedLinkCreatePolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMPOLICIESTeamSharingPoliciesSerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESTeamSharingPoliciesSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESTeamSharingPolicies;

	static new(): DBTEAMPOLICIESTeamSharingPoliciesSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESTeamSharingPolicies): NSDictionary<string, any>;
}

declare class DBTEAMPOLICIESTwoStepVerificationPolicy extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMPOLICIESTwoStepVerificationPolicy; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMPOLICIESTwoStepVerificationPolicy; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMPOLICIESTwoStepVerificationPolicyTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { requireTfaDisable: void; });

	constructor(o: { requireTfaEnable: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithRequireTfaDisable(): this;

	initWithRequireTfaEnable(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isRequireTfaDisable(): boolean;

	isRequireTfaEnable(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMPOLICIESTwoStepVerificationPolicySerializer extends NSObject {

	static alloc(): DBTEAMPOLICIESTwoStepVerificationPolicySerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMPOLICIESTwoStepVerificationPolicy;

	static new(): DBTEAMPOLICIESTwoStepVerificationPolicySerializer; // inherited from NSObject

	static serialize(instance: DBTEAMPOLICIESTwoStepVerificationPolicy): NSDictionary<string, any>;
}

declare const enum DBTEAMPOLICIESTwoStepVerificationPolicyTag {

	RequireTfaEnable = 0,

	RequireTfaDisable = 1,

	Other = 2
}

declare class DBTEAMRemoveCustomQuotaResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRemoveCustomQuotaResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRemoveCustomQuotaResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly invalidUser: DBTEAMUserSelectorArg;

	readonly success: DBTEAMUserSelectorArg;

	readonly tag: DBTEAMRemoveCustomQuotaResultTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidUser: DBTEAMUserSelectorArg; });

	constructor(o: { other: void; });

	constructor(o: { success: DBTEAMUserSelectorArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidUser(invalidUser: DBTEAMUserSelectorArg): this;

	initWithOther(): this;

	initWithSuccess(success: DBTEAMUserSelectorArg): this;

	isEqual(object: any): boolean;

	isInvalidUser(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSuccess(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMRemoveCustomQuotaResultSerializer extends NSObject {

	static alloc(): DBTEAMRemoveCustomQuotaResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRemoveCustomQuotaResult;

	static new(): DBTEAMRemoveCustomQuotaResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRemoveCustomQuotaResult): NSDictionary<string, any>;
}

declare const enum DBTEAMRemoveCustomQuotaResultTag {

	Success = 0,

	InvalidUser = 1,

	Other = 2
}

declare class DBTEAMRemovedStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRemovedStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRemovedStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isDisconnected: number;

	readonly isRecoverable: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { isRecoverable: number; isDisconnected: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIsRecoverableIsDisconnected(isRecoverable: number, isDisconnected: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRemovedStatusSerializer extends NSObject {

	static alloc(): DBTEAMRemovedStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRemovedStatus;

	static new(): DBTEAMRemovedStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRemovedStatus): NSDictionary<string, any>;
}

declare class DBTEAMRevokeDesktopClientArg extends DBTEAMDeviceSessionArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeDesktopClientArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeDesktopClientArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly deleteOnUnlink: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { sessionId: string; teamMemberId: string; deleteOnUnlink: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSessionIdTeamMemberIdDeleteOnUnlink(sessionId: string, teamMemberId: string, deleteOnUnlink: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRevokeDesktopClientArgSerializer extends NSObject {

	static alloc(): DBTEAMRevokeDesktopClientArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeDesktopClientArg;

	static new(): DBTEAMRevokeDesktopClientArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeDesktopClientArg): NSDictionary<string, any>;
}

declare class DBTEAMRevokeDeviceSessionArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeDeviceSessionArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeDeviceSessionArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly desktopClient: DBTEAMRevokeDesktopClientArg;

	readonly mobileClient: DBTEAMDeviceSessionArg;

	readonly tag: DBTEAMRevokeDeviceSessionArgTag;

	readonly webSession: DBTEAMDeviceSessionArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { desktopClient: DBTEAMRevokeDesktopClientArg; });

	constructor(o: { mobileClient: DBTEAMDeviceSessionArg; });

	constructor(o: { webSession: DBTEAMDeviceSessionArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDesktopClient(desktopClient: DBTEAMRevokeDesktopClientArg): this;

	initWithMobileClient(mobileClient: DBTEAMDeviceSessionArg): this;

	initWithWebSession(webSession: DBTEAMDeviceSessionArg): this;

	isDesktopClient(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isMobileClient(): boolean;

	isWebSession(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMRevokeDeviceSessionArgSerializer extends NSObject {

	static alloc(): DBTEAMRevokeDeviceSessionArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeDeviceSessionArg;

	static new(): DBTEAMRevokeDeviceSessionArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeDeviceSessionArg): NSDictionary<string, any>;
}

declare const enum DBTEAMRevokeDeviceSessionArgTag {

	WebSession = 0,

	DesktopClient = 1,

	MobileClient = 2
}

declare class DBTEAMRevokeDeviceSessionBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeDeviceSessionBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeDeviceSessionBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly revokeDevices: NSArray<DBTEAMRevokeDeviceSessionArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { revokeDevices: NSArray<DBTEAMRevokeDeviceSessionArg> | DBTEAMRevokeDeviceSessionArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRevokeDevices(revokeDevices: NSArray<DBTEAMRevokeDeviceSessionArg> | DBTEAMRevokeDeviceSessionArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRevokeDeviceSessionBatchArgSerializer extends NSObject {

	static alloc(): DBTEAMRevokeDeviceSessionBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeDeviceSessionBatchArg;

	static new(): DBTEAMRevokeDeviceSessionBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeDeviceSessionBatchArg): NSDictionary<string, any>;
}

declare class DBTEAMRevokeDeviceSessionBatchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeDeviceSessionBatchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeDeviceSessionBatchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMRevokeDeviceSessionBatchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMRevokeDeviceSessionBatchErrorSerializer extends NSObject {

	static alloc(): DBTEAMRevokeDeviceSessionBatchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeDeviceSessionBatchError;

	static new(): DBTEAMRevokeDeviceSessionBatchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeDeviceSessionBatchError): NSDictionary<string, any>;
}

declare const enum DBTEAMRevokeDeviceSessionBatchErrorTag {

	Other = 0
}

declare class DBTEAMRevokeDeviceSessionBatchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeDeviceSessionBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeDeviceSessionBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly revokeDevicesStatus: NSArray<DBTEAMRevokeDeviceSessionStatus>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { revokeDevicesStatus: NSArray<DBTEAMRevokeDeviceSessionStatus> | DBTEAMRevokeDeviceSessionStatus[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRevokeDevicesStatus(revokeDevicesStatus: NSArray<DBTEAMRevokeDeviceSessionStatus> | DBTEAMRevokeDeviceSessionStatus[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRevokeDeviceSessionBatchResultSerializer extends NSObject {

	static alloc(): DBTEAMRevokeDeviceSessionBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeDeviceSessionBatchResult;

	static new(): DBTEAMRevokeDeviceSessionBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeDeviceSessionBatchResult): NSDictionary<string, any>;
}

declare class DBTEAMRevokeDeviceSessionError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeDeviceSessionError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeDeviceSessionError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMRevokeDeviceSessionErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { deviceSessionNotFound: void; });

	constructor(o: { memberNotFound: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDeviceSessionNotFound(): this;

	initWithMemberNotFound(): this;

	initWithOther(): this;

	isDeviceSessionNotFound(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberNotFound(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMRevokeDeviceSessionErrorSerializer extends NSObject {

	static alloc(): DBTEAMRevokeDeviceSessionErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeDeviceSessionError;

	static new(): DBTEAMRevokeDeviceSessionErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeDeviceSessionError): NSDictionary<string, any>;
}

declare const enum DBTEAMRevokeDeviceSessionErrorTag {

	DeviceSessionNotFound = 0,

	MemberNotFound = 1,

	Other = 2
}

declare class DBTEAMRevokeDeviceSessionStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeDeviceSessionStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeDeviceSessionStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly errorType: DBTEAMRevokeDeviceSessionError;

	readonly success: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { success: number; });

	constructor(o: { success: number; errorType: DBTEAMRevokeDeviceSessionError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSuccess(success: number): this;

	initWithSuccessErrorType(success: number, errorType: DBTEAMRevokeDeviceSessionError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRevokeDeviceSessionStatusSerializer extends NSObject {

	static alloc(): DBTEAMRevokeDeviceSessionStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeDeviceSessionStatus;

	static new(): DBTEAMRevokeDeviceSessionStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeDeviceSessionStatus): NSDictionary<string, any>;
}

declare class DBTEAMRevokeLinkedApiAppArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeLinkedApiAppArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeLinkedApiAppArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly appId: string;

	readonly keepAppFolder: number;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appId: string; teamMemberId: string; });

	constructor(o: { appId: string; teamMemberId: string; keepAppFolder: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppIdTeamMemberId(appId: string, teamMemberId: string): this;

	initWithAppIdTeamMemberIdKeepAppFolder(appId: string, teamMemberId: string, keepAppFolder: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRevokeLinkedApiAppArgSerializer extends NSObject {

	static alloc(): DBTEAMRevokeLinkedApiAppArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeLinkedApiAppArg;

	static new(): DBTEAMRevokeLinkedApiAppArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeLinkedApiAppArg): NSDictionary<string, any>;
}

declare class DBTEAMRevokeLinkedApiAppBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeLinkedApiAppBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeLinkedApiAppBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly revokeLinkedApp: NSArray<DBTEAMRevokeLinkedApiAppArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { revokeLinkedApp: NSArray<DBTEAMRevokeLinkedApiAppArg> | DBTEAMRevokeLinkedApiAppArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRevokeLinkedApp(revokeLinkedApp: NSArray<DBTEAMRevokeLinkedApiAppArg> | DBTEAMRevokeLinkedApiAppArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRevokeLinkedApiAppBatchArgSerializer extends NSObject {

	static alloc(): DBTEAMRevokeLinkedApiAppBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeLinkedApiAppBatchArg;

	static new(): DBTEAMRevokeLinkedApiAppBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeLinkedApiAppBatchArg): NSDictionary<string, any>;
}

declare class DBTEAMRevokeLinkedAppBatchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeLinkedAppBatchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeLinkedAppBatchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMRevokeLinkedAppBatchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMRevokeLinkedAppBatchErrorSerializer extends NSObject {

	static alloc(): DBTEAMRevokeLinkedAppBatchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeLinkedAppBatchError;

	static new(): DBTEAMRevokeLinkedAppBatchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeLinkedAppBatchError): NSDictionary<string, any>;
}

declare const enum DBTEAMRevokeLinkedAppBatchErrorTag {

	Other = 0
}

declare class DBTEAMRevokeLinkedAppBatchResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeLinkedAppBatchResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeLinkedAppBatchResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly revokeLinkedAppStatus: NSArray<DBTEAMRevokeLinkedAppStatus>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { revokeLinkedAppStatus: NSArray<DBTEAMRevokeLinkedAppStatus> | DBTEAMRevokeLinkedAppStatus[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithRevokeLinkedAppStatus(revokeLinkedAppStatus: NSArray<DBTEAMRevokeLinkedAppStatus> | DBTEAMRevokeLinkedAppStatus[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRevokeLinkedAppBatchResultSerializer extends NSObject {

	static alloc(): DBTEAMRevokeLinkedAppBatchResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeLinkedAppBatchResult;

	static new(): DBTEAMRevokeLinkedAppBatchResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeLinkedAppBatchResult): NSDictionary<string, any>;
}

declare class DBTEAMRevokeLinkedAppError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeLinkedAppError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeLinkedAppError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMRevokeLinkedAppErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { appNotFound: void; });

	constructor(o: { memberNotFound: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAppNotFound(): this;

	initWithMemberNotFound(): this;

	initWithOther(): this;

	isAppNotFound(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberNotFound(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMRevokeLinkedAppErrorSerializer extends NSObject {

	static alloc(): DBTEAMRevokeLinkedAppErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeLinkedAppError;

	static new(): DBTEAMRevokeLinkedAppErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeLinkedAppError): NSDictionary<string, any>;
}

declare const enum DBTEAMRevokeLinkedAppErrorTag {

	AppNotFound = 0,

	MemberNotFound = 1,

	Other = 2
}

declare class DBTEAMRevokeLinkedAppStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMRevokeLinkedAppStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMRevokeLinkedAppStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly errorType: DBTEAMRevokeLinkedAppError;

	readonly success: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { success: number; });

	constructor(o: { success: number; errorType: DBTEAMRevokeLinkedAppError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithSuccess(success: number): this;

	initWithSuccessErrorType(success: number, errorType: DBTEAMRevokeLinkedAppError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMRevokeLinkedAppStatusSerializer extends NSObject {

	static alloc(): DBTEAMRevokeLinkedAppStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMRevokeLinkedAppStatus;

	static new(): DBTEAMRevokeLinkedAppStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMRevokeLinkedAppStatus): NSDictionary<string, any>;
}

declare class DBTEAMRouteObjects extends NSObject {

	static DBTEAMDevicesListMemberDevices(): DBRoute;

	static DBTEAMDevicesListMembersDevices(): DBRoute;

	static DBTEAMDevicesListTeamDevices(): DBRoute;

	static DBTEAMDevicesRevokeDeviceSession(): DBRoute;

	static DBTEAMDevicesRevokeDeviceSessionBatch(): DBRoute;

	static DBTEAMFeaturesGetValues(): DBRoute;

	static DBTEAMGetInfo(): DBRoute;

	static DBTEAMGroupsCreate(): DBRoute;

	static DBTEAMGroupsDelete(): DBRoute;

	static DBTEAMGroupsGetInfo(): DBRoute;

	static DBTEAMGroupsJobStatusGet(): DBRoute;

	static DBTEAMGroupsList(): DBRoute;

	static DBTEAMGroupsListContinue(): DBRoute;

	static DBTEAMGroupsMembersAdd(): DBRoute;

	static DBTEAMGroupsMembersList(): DBRoute;

	static DBTEAMGroupsMembersListContinue(): DBRoute;

	static DBTEAMGroupsMembersRemove(): DBRoute;

	static DBTEAMGroupsMembersSetAccessType(): DBRoute;

	static DBTEAMGroupsUpdate(): DBRoute;

	static DBTEAMLinkedAppsListMemberLinkedApps(): DBRoute;

	static DBTEAMLinkedAppsListMembersLinkedApps(): DBRoute;

	static DBTEAMLinkedAppsListTeamLinkedApps(): DBRoute;

	static DBTEAMLinkedAppsRevokeLinkedApp(): DBRoute;

	static DBTEAMLinkedAppsRevokeLinkedAppBatch(): DBRoute;

	static DBTEAMMemberSpaceLimitsExcludedUsersAdd(): DBRoute;

	static DBTEAMMemberSpaceLimitsExcludedUsersList(): DBRoute;

	static DBTEAMMemberSpaceLimitsExcludedUsersListContinue(): DBRoute;

	static DBTEAMMemberSpaceLimitsExcludedUsersRemove(): DBRoute;

	static DBTEAMMemberSpaceLimitsGetCustomQuota(): DBRoute;

	static DBTEAMMemberSpaceLimitsRemoveCustomQuota(): DBRoute;

	static DBTEAMMemberSpaceLimitsSetCustomQuota(): DBRoute;

	static DBTEAMMembersAdd(): DBRoute;

	static DBTEAMMembersAddJobStatusGet(): DBRoute;

	static DBTEAMMembersGetInfo(): DBRoute;

	static DBTEAMMembersList(): DBRoute;

	static DBTEAMMembersListContinue(): DBRoute;

	static DBTEAMMembersMoveFormerMemberFiles(): DBRoute;

	static DBTEAMMembersMoveFormerMemberFilesJobStatusCheck(): DBRoute;

	static DBTEAMMembersRecover(): DBRoute;

	static DBTEAMMembersRemove(): DBRoute;

	static DBTEAMMembersRemoveJobStatusGet(): DBRoute;

	static DBTEAMMembersSendWelcomeEmail(): DBRoute;

	static DBTEAMMembersSetAdminPermissions(): DBRoute;

	static DBTEAMMembersSetProfile(): DBRoute;

	static DBTEAMMembersSuspend(): DBRoute;

	static DBTEAMMembersUnsuspend(): DBRoute;

	static DBTEAMNamespacesList(): DBRoute;

	static DBTEAMNamespacesListContinue(): DBRoute;

	static DBTEAMPropertiesTemplateAdd(): DBRoute;

	static DBTEAMPropertiesTemplateGet(): DBRoute;

	static DBTEAMPropertiesTemplateList(): DBRoute;

	static DBTEAMPropertiesTemplateUpdate(): DBRoute;

	static DBTEAMReportsGetActivity(): DBRoute;

	static DBTEAMReportsGetDevices(): DBRoute;

	static DBTEAMReportsGetMembership(): DBRoute;

	static DBTEAMReportsGetStorage(): DBRoute;

	static DBTEAMTeamFolderActivate(): DBRoute;

	static DBTEAMTeamFolderArchive(): DBRoute;

	static DBTEAMTeamFolderArchiveCheck(): DBRoute;

	static DBTEAMTeamFolderCreate(): DBRoute;

	static DBTEAMTeamFolderGetInfo(): DBRoute;

	static DBTEAMTeamFolderList(): DBRoute;

	static DBTEAMTeamFolderListContinue(): DBRoute;

	static DBTEAMTeamFolderPermanentlyDelete(): DBRoute;

	static DBTEAMTeamFolderRename(): DBRoute;

	static DBTEAMTeamFolderUpdateSyncSettings(): DBRoute;

	static DBTEAMTokenGetAuthenticatedAdmin(): DBRoute;

	static alloc(): DBTEAMRouteObjects; // inherited from NSObject

	static new(): DBTEAMRouteObjects; // inherited from NSObject
}

declare class DBTEAMSetCustomQuotaArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMSetCustomQuotaArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMSetCustomQuotaArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly usersAndQuotas: NSArray<DBTEAMUserCustomQuotaArg>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { usersAndQuotas: NSArray<DBTEAMUserCustomQuotaArg> | DBTEAMUserCustomQuotaArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUsersAndQuotas(usersAndQuotas: NSArray<DBTEAMUserCustomQuotaArg> | DBTEAMUserCustomQuotaArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMSetCustomQuotaArgSerializer extends NSObject {

	static alloc(): DBTEAMSetCustomQuotaArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMSetCustomQuotaArg;

	static new(): DBTEAMSetCustomQuotaArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMSetCustomQuotaArg): NSDictionary<string, any>;
}

declare class DBTEAMSetCustomQuotaError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMSetCustomQuotaError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMSetCustomQuotaError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMSetCustomQuotaErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { other: void; });

	constructor(o: { someUsersAreExcluded: void; });

	constructor(o: { tooManyUsers: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithOther(): this;

	initWithSomeUsersAreExcluded(): this;

	initWithTooManyUsers(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSomeUsersAreExcluded(): boolean;

	isTooManyUsers(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMSetCustomQuotaErrorSerializer extends NSObject {

	static alloc(): DBTEAMSetCustomQuotaErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMSetCustomQuotaError;

	static new(): DBTEAMSetCustomQuotaErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMSetCustomQuotaError): NSDictionary<string, any>;
}

declare const enum DBTEAMSetCustomQuotaErrorTag {

	TooManyUsers = 0,

	Other = 1,

	SomeUsersAreExcluded = 2
}

declare class DBTEAMStorageBucket extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMStorageBucket; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMStorageBucket; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly bucket: string;

	readonly users: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { bucket: string; users: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithBucketUsers(bucket: string, users: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMStorageBucketSerializer extends NSObject {

	static alloc(): DBTEAMStorageBucketSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMStorageBucket;

	static new(): DBTEAMStorageBucketSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMStorageBucket): NSDictionary<string, any>;
}

declare class DBTEAMTeamAuthRoutes extends NSObject {

	static alloc(): DBTEAMTeamAuthRoutes; // inherited from NSObject

	static new(): DBTEAMTeamAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	devicesListMemberDevices(teamMemberId: string): DBRpcTask<DBTEAMListMemberDevicesResult, DBTEAMListMemberDevicesError>;

	devicesListMemberDevicesIncludeWebSessionsIncludeDesktopClientsIncludeMobileClients(teamMemberId: string, includeWebSessions: number, includeDesktopClients: number, includeMobileClients: number): DBRpcTask<DBTEAMListMemberDevicesResult, DBTEAMListMemberDevicesError>;

	devicesListMembersDevices(): DBRpcTask<DBTEAMListMembersDevicesResult, DBTEAMListMembersDevicesError>;

	devicesListMembersDevicesIncludeWebSessionsIncludeDesktopClientsIncludeMobileClients(cursor: string, includeWebSessions: number, includeDesktopClients: number, includeMobileClients: number): DBRpcTask<DBTEAMListMembersDevicesResult, DBTEAMListMembersDevicesError>;

	devicesListTeamDevices(): DBRpcTask<DBTEAMListTeamDevicesResult, DBTEAMListTeamDevicesError>;

	devicesListTeamDevicesIncludeWebSessionsIncludeDesktopClientsIncludeMobileClients(cursor: string, includeWebSessions: number, includeDesktopClients: number, includeMobileClients: number): DBRpcTask<DBTEAMListTeamDevicesResult, DBTEAMListTeamDevicesError>;

	devicesRevokeDeviceSession(revokeDeviceSessionArg: DBTEAMRevokeDeviceSessionArg): DBRpcTask<DBNilObject, DBTEAMRevokeDeviceSessionError>;

	devicesRevokeDeviceSessionBatch(revokeDevices: NSArray<DBTEAMRevokeDeviceSessionArg> | DBTEAMRevokeDeviceSessionArg[]): DBRpcTask<DBTEAMRevokeDeviceSessionBatchResult, DBTEAMRevokeDeviceSessionBatchError>;

	featuresGetValues(features: NSArray<DBTEAMFeature> | DBTEAMFeature[]): DBRpcTask<DBTEAMFeaturesGetValuesBatchResult, DBTEAMFeaturesGetValuesBatchError>;

	getInfo(): DBRpcTask<DBTEAMTeamGetInfoResult, DBNilObject>;

	groupsCreate(groupName: string): DBRpcTask<DBTEAMGroupFullInfo, DBTEAMGroupCreateError>;

	groupsCreateGroupExternalIdGroupManagementType(groupName: string, groupExternalId: string, groupManagementType: DBTEAMCOMMONGroupManagementType): DBRpcTask<DBTEAMGroupFullInfo, DBTEAMGroupCreateError>;

	groupsDelete(groupSelector: DBTEAMGroupSelector): DBRpcTask<DBASYNCLaunchEmptyResult, DBTEAMGroupDeleteError>;

	groupsGetInfo(groupsSelector: DBTEAMGroupsSelector): DBRpcTask<NSArray<DBTEAMGroupsGetInfoItem>, DBTEAMGroupsGetInfoError>;

	groupsJobStatusGet(asyncJobId: string): DBRpcTask<DBASYNCPollEmptyResult, DBTEAMGroupsPollError>;

	groupsList(): DBRpcTask<DBTEAMGroupsListResult, DBNilObject>;

	groupsListContinue(cursor: string): DBRpcTask<DBTEAMGroupsListResult, DBTEAMGroupsListContinueError>;

	groupsMembersAddMembers(group: DBTEAMGroupSelector, members: NSArray<DBTEAMMemberAccess> | DBTEAMMemberAccess[]): DBRpcTask<DBTEAMGroupMembersChangeResult, DBTEAMGroupMembersAddError>;

	groupsMembersAddMembersReturnMembers(group: DBTEAMGroupSelector, members: NSArray<DBTEAMMemberAccess> | DBTEAMMemberAccess[], returnMembers: number): DBRpcTask<DBTEAMGroupMembersChangeResult, DBTEAMGroupMembersAddError>;

	groupsMembersList(group: DBTEAMGroupSelector): DBRpcTask<DBTEAMGroupsMembersListResult, DBTEAMGroupSelectorError>;

	groupsMembersListContinue(cursor: string): DBRpcTask<DBTEAMGroupsMembersListResult, DBTEAMGroupsMembersListContinueError>;

	groupsMembersListLimit(group: DBTEAMGroupSelector, limit: number): DBRpcTask<DBTEAMGroupsMembersListResult, DBTEAMGroupSelectorError>;

	groupsMembersRemoveUsers(group: DBTEAMGroupSelector, users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): DBRpcTask<DBTEAMGroupMembersChangeResult, DBTEAMGroupMembersRemoveError>;

	groupsMembersRemoveUsersReturnMembers(group: DBTEAMGroupSelector, users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[], returnMembers: number): DBRpcTask<DBTEAMGroupMembersChangeResult, DBTEAMGroupMembersRemoveError>;

	groupsMembersSetAccessTypeUserAccessType(group: DBTEAMGroupSelector, user: DBTEAMUserSelectorArg, accessType: DBTEAMGroupAccessType): DBRpcTask<NSArray<DBTEAMGroupsGetInfoItem>, DBTEAMGroupMemberSetAccessTypeError>;

	groupsMembersSetAccessTypeUserAccessTypeReturnMembers(group: DBTEAMGroupSelector, user: DBTEAMUserSelectorArg, accessType: DBTEAMGroupAccessType, returnMembers: number): DBRpcTask<NSArray<DBTEAMGroupsGetInfoItem>, DBTEAMGroupMemberSetAccessTypeError>;

	groupsUpdate(group: DBTEAMGroupSelector): DBRpcTask<DBTEAMGroupFullInfo, DBTEAMGroupUpdateError>;

	groupsUpdateReturnMembersDNewGroupNameDNewGroupExternalIdDNewGroupManagementType(group: DBTEAMGroupSelector, returnMembers: number, dNewGroupName: string, dNewGroupExternalId: string, dNewGroupManagementType: DBTEAMCOMMONGroupManagementType): DBRpcTask<DBTEAMGroupFullInfo, DBTEAMGroupUpdateError>;

	init(client: DBTransportClient): this;

	linkedAppsListMemberLinkedApps(teamMemberId: string): DBRpcTask<DBTEAMListMemberAppsResult, DBTEAMListMemberAppsError>;

	linkedAppsListMembersLinkedApps(): DBRpcTask<DBTEAMListMembersAppsResult, DBTEAMListMembersAppsError>;

	linkedAppsListTeamLinkedApps(): DBRpcTask<DBTEAMListTeamAppsResult, DBTEAMListTeamAppsError>;

	linkedAppsRevokeLinkedAppBatch(revokeLinkedApp: NSArray<DBTEAMRevokeLinkedApiAppArg> | DBTEAMRevokeLinkedApiAppArg[]): DBRpcTask<DBTEAMRevokeLinkedAppBatchResult, DBTEAMRevokeLinkedAppBatchError>;

	linkedAppsRevokeLinkedAppTeamMemberId(appId: string, teamMemberId: string): DBRpcTask<DBNilObject, DBTEAMRevokeLinkedAppError>;

	linkedAppsRevokeLinkedAppTeamMemberIdKeepAppFolder(appId: string, teamMemberId: string, keepAppFolder: number): DBRpcTask<DBNilObject, DBTEAMRevokeLinkedAppError>;

	memberSpaceLimitsExcludedUsersAdd(users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): DBRpcTask<DBTEAMExcludedUsersUpdateResult, DBTEAMExcludedUsersUpdateError>;

	memberSpaceLimitsExcludedUsersList(): DBRpcTask<DBTEAMExcludedUsersListResult, DBTEAMExcludedUsersListError>;

	memberSpaceLimitsExcludedUsersListContinue(cursor: string): DBRpcTask<DBTEAMExcludedUsersListResult, DBTEAMExcludedUsersListContinueError>;

	memberSpaceLimitsExcludedUsersRemove(): DBRpcTask<DBTEAMExcludedUsersUpdateResult, DBTEAMExcludedUsersUpdateError>;

	memberSpaceLimitsGetCustomQuota(users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): DBRpcTask<NSArray<DBTEAMCustomQuotaResult>, DBTEAMCustomQuotaError>;

	memberSpaceLimitsRemoveCustomQuota(users: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): DBRpcTask<NSArray<DBTEAMRemoveCustomQuotaResult>, DBTEAMCustomQuotaError>;

	memberSpaceLimitsSetCustomQuota(usersAndQuotas: NSArray<DBTEAMUserCustomQuotaArg> | DBTEAMUserCustomQuotaArg[]): DBRpcTask<NSArray<DBTEAMCustomQuotaResult>, DBTEAMSetCustomQuotaError>;

	membersAdd(dNewMembers: NSArray<DBTEAMMemberAddArg> | DBTEAMMemberAddArg[]): DBRpcTask<DBTEAMMembersAddLaunch, DBNilObject>;

	membersAddForceAsync(dNewMembers: NSArray<DBTEAMMemberAddArg> | DBTEAMMemberAddArg[], forceAsync: number): DBRpcTask<DBTEAMMembersAddLaunch, DBNilObject>;

	membersAddJobStatusGet(asyncJobId: string): DBRpcTask<DBTEAMMembersAddJobStatus, DBASYNCPollError>;

	membersGetInfo(members: NSArray<DBTEAMUserSelectorArg> | DBTEAMUserSelectorArg[]): DBRpcTask<NSArray<DBTEAMMembersGetInfoItem>, DBTEAMMembersGetInfoError>;

	membersList(): DBRpcTask<DBTEAMMembersListResult, DBTEAMMembersListError>;

	membersListContinue(cursor: string): DBRpcTask<DBTEAMMembersListResult, DBTEAMMembersListContinueError>;

	membersListIncludeRemoved(limit: number, includeRemoved: number): DBRpcTask<DBTEAMMembersListResult, DBTEAMMembersListError>;

	membersMoveFormerMemberFilesJobStatusCheck(asyncJobId: string): DBRpcTask<DBASYNCPollEmptyResult, DBASYNCPollError>;

	membersMoveFormerMemberFilesTransferDestIdTransferAdminId(user: DBTEAMUserSelectorArg, transferDestId: DBTEAMUserSelectorArg, transferAdminId: DBTEAMUserSelectorArg): DBRpcTask<DBASYNCLaunchEmptyResult, DBTEAMMembersTransferFormerMembersFilesError>;

	membersRecover(user: DBTEAMUserSelectorArg): DBRpcTask<DBNilObject, DBTEAMMembersRecoverError>;

	membersRemove(user: DBTEAMUserSelectorArg): DBRpcTask<DBASYNCLaunchEmptyResult, DBTEAMMembersRemoveError>;

	membersRemoveJobStatusGet(asyncJobId: string): DBRpcTask<DBASYNCPollEmptyResult, DBASYNCPollError>;

	membersRemoveWipeDataTransferDestIdTransferAdminIdKeepAccount(user: DBTEAMUserSelectorArg, wipeData: number, transferDestId: DBTEAMUserSelectorArg, transferAdminId: DBTEAMUserSelectorArg, keepAccount: number): DBRpcTask<DBASYNCLaunchEmptyResult, DBTEAMMembersRemoveError>;

	membersSendWelcomeEmail(userSelectorArg: DBTEAMUserSelectorArg): DBRpcTask<DBNilObject, DBTEAMMembersSendWelcomeError>;

	membersSetAdminPermissionsDNewRole(user: DBTEAMUserSelectorArg, dNewRole: DBTEAMAdminTier): DBRpcTask<DBTEAMMembersSetPermissionsResult, DBTEAMMembersSetPermissionsError>;

	membersSetProfile(user: DBTEAMUserSelectorArg): DBRpcTask<DBTEAMTeamMemberInfo, DBTEAMMembersSetProfileError>;

	membersSetProfileDNewEmailDNewExternalIdDNewGivenNameDNewSurnameDNewPersistentIdDNewIsDirectoryRestricted(user: DBTEAMUserSelectorArg, dNewEmail: string, dNewExternalId: string, dNewGivenName: string, dNewSurname: string, dNewPersistentId: string, dNewIsDirectoryRestricted: number): DBRpcTask<DBTEAMTeamMemberInfo, DBTEAMMembersSetProfileError>;

	membersSuspend(user: DBTEAMUserSelectorArg): DBRpcTask<DBNilObject, DBTEAMMembersSuspendError>;

	membersSuspendWipeData(user: DBTEAMUserSelectorArg, wipeData: number): DBRpcTask<DBNilObject, DBTEAMMembersSuspendError>;

	membersUnsuspend(user: DBTEAMUserSelectorArg): DBRpcTask<DBNilObject, DBTEAMMembersUnsuspendError>;

	namespacesList(): DBRpcTask<DBTEAMTeamNamespacesListResult, DBTEAMTeamNamespacesListError>;

	namespacesListContinue(cursor: string): DBRpcTask<DBTEAMTeamNamespacesListResult, DBTEAMTeamNamespacesListContinueError>;

	propertiesTemplateAddDescription_Fields(name: string, description_: string, fields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]): DBRpcTask<DBFILEPROPERTIESAddTemplateResult, DBFILEPROPERTIESModifyTemplateError>;

	propertiesTemplateGet(templateId: string): DBRpcTask<DBFILEPROPERTIESGetTemplateResult, DBFILEPROPERTIESTemplateError>;

	propertiesTemplateList(): DBRpcTask<DBFILEPROPERTIESListTemplateResult, DBFILEPROPERTIESTemplateError>;

	propertiesTemplateUpdate(templateId: string): DBRpcTask<DBFILEPROPERTIESUpdateTemplateResult, DBFILEPROPERTIESModifyTemplateError>;

	propertiesTemplateUpdateNameDescription_AddFields(templateId: string, name: string, description_: string, addFields: NSArray<DBFILEPROPERTIESPropertyFieldTemplate> | DBFILEPROPERTIESPropertyFieldTemplate[]): DBRpcTask<DBFILEPROPERTIESUpdateTemplateResult, DBFILEPROPERTIESModifyTemplateError>;

	reportsGetActivity(): DBRpcTask<DBTEAMGetActivityReport, DBTEAMDateRangeError>;

	reportsGetActivityEndDate(startDate: Date, endDate: Date): DBRpcTask<DBTEAMGetActivityReport, DBTEAMDateRangeError>;

	reportsGetDevices(): DBRpcTask<DBTEAMGetDevicesReport, DBTEAMDateRangeError>;

	reportsGetDevicesEndDate(startDate: Date, endDate: Date): DBRpcTask<DBTEAMGetDevicesReport, DBTEAMDateRangeError>;

	reportsGetMembership(): DBRpcTask<DBTEAMGetMembershipReport, DBTEAMDateRangeError>;

	reportsGetMembershipEndDate(startDate: Date, endDate: Date): DBRpcTask<DBTEAMGetMembershipReport, DBTEAMDateRangeError>;

	reportsGetStorage(): DBRpcTask<DBTEAMGetStorageReport, DBTEAMDateRangeError>;

	reportsGetStorageEndDate(startDate: Date, endDate: Date): DBRpcTask<DBTEAMGetStorageReport, DBTEAMDateRangeError>;

	teamFolderActivate(teamFolderId: string): DBRpcTask<DBTEAMTeamFolderMetadata, DBTEAMTeamFolderActivateError>;

	teamFolderArchive(teamFolderId: string): DBRpcTask<DBTEAMTeamFolderArchiveLaunch, DBTEAMTeamFolderArchiveError>;

	teamFolderArchiveCheck(asyncJobId: string): DBRpcTask<DBTEAMTeamFolderArchiveJobStatus, DBASYNCPollError>;

	teamFolderArchiveForceAsyncOff(teamFolderId: string, forceAsyncOff: number): DBRpcTask<DBTEAMTeamFolderArchiveLaunch, DBTEAMTeamFolderArchiveError>;

	teamFolderCreate(name: string): DBRpcTask<DBTEAMTeamFolderMetadata, DBTEAMTeamFolderCreateError>;

	teamFolderCreateSyncSetting(name: string, syncSetting: DBFILESSyncSettingArg): DBRpcTask<DBTEAMTeamFolderMetadata, DBTEAMTeamFolderCreateError>;

	teamFolderGetInfo(teamFolderIds: NSArray<string> | string[]): DBRpcTask<NSArray<DBTEAMTeamFolderGetInfoItem>, DBNilObject>;

	teamFolderList(): DBRpcTask<DBTEAMTeamFolderListResult, DBTEAMTeamFolderListError>;

	teamFolderListContinue(cursor: string): DBRpcTask<DBTEAMTeamFolderListResult, DBTEAMTeamFolderListContinueError>;

	teamFolderPermanentlyDelete(teamFolderId: string): DBRpcTask<DBNilObject, DBTEAMTeamFolderPermanentlyDeleteError>;

	teamFolderRenameName(teamFolderId: string, name: string): DBRpcTask<DBTEAMTeamFolderMetadata, DBTEAMTeamFolderRenameError>;

	teamFolderUpdateSyncSettings(teamFolderId: string): DBRpcTask<DBTEAMTeamFolderMetadata, DBTEAMTeamFolderUpdateSyncSettingsError>;

	teamFolderUpdateSyncSettingsSyncSettingContentSyncSettings(teamFolderId: string, syncSetting: DBFILESSyncSettingArg, contentSyncSettings: NSArray<DBFILESContentSyncSettingArg> | DBFILESContentSyncSettingArg[]): DBRpcTask<DBTEAMTeamFolderMetadata, DBTEAMTeamFolderUpdateSyncSettingsError>;

	tokenGetAuthenticatedAdmin(): DBRpcTask<DBTEAMTokenGetAuthenticatedAdminResult, DBTEAMTokenGetAuthenticatedAdminError>;
}

declare class DBTEAMTeamFolderAccessError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderAccessError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderAccessError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTeamFolderAccessErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidTeamFolderId: void; });

	constructor(o: { noAccess: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidTeamFolderId(): this;

	initWithNoAccess(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidTeamFolderId(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoAccess(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderAccessErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderAccessErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderAccessError;

	static new(): DBTEAMTeamFolderAccessErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderAccessError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderAccessErrorTag {

	InvalidTeamFolderId = 0,

	NoAccess = 1,

	Other = 2
}

declare class DBTEAMTeamFolderActivateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderActivateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderActivateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBTEAMTeamFolderAccessError;

	readonly statusError: DBTEAMTeamFolderInvalidStatusError;

	readonly tag: DBTEAMTeamFolderActivateErrorTag;

	readonly teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBTEAMTeamFolderAccessError; });

	constructor(o: { other: void; });

	constructor(o: { statusError: DBTEAMTeamFolderInvalidStatusError; });

	constructor(o: { teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBTEAMTeamFolderAccessError): this;

	initWithOther(): this;

	initWithStatusError(statusError: DBTEAMTeamFolderInvalidStatusError): this;

	initWithTeamSharedDropboxError(teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isStatusError(): boolean;

	isTeamSharedDropboxError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderActivateErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderActivateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderActivateError;

	static new(): DBTEAMTeamFolderActivateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderActivateError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderActivateErrorTag {

	AccessError = 0,

	StatusError = 1,

	TeamSharedDropboxError = 2,

	Other = 3
}

declare class DBTEAMTeamFolderArchiveArg extends DBTEAMTeamFolderIdArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderArchiveArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderArchiveArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly forceAsyncOff: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamFolderId: string; forceAsyncOff: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamFolderIdForceAsyncOff(teamFolderId: string, forceAsyncOff: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderArchiveArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderArchiveArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderArchiveArg;

	static new(): DBTEAMTeamFolderArchiveArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderArchiveArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderArchiveError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderArchiveError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderArchiveError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBTEAMTeamFolderAccessError;

	readonly statusError: DBTEAMTeamFolderInvalidStatusError;

	readonly tag: DBTEAMTeamFolderArchiveErrorTag;

	readonly teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBTEAMTeamFolderAccessError; });

	constructor(o: { other: void; });

	constructor(o: { statusError: DBTEAMTeamFolderInvalidStatusError; });

	constructor(o: { teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBTEAMTeamFolderAccessError): this;

	initWithOther(): this;

	initWithStatusError(statusError: DBTEAMTeamFolderInvalidStatusError): this;

	initWithTeamSharedDropboxError(teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isStatusError(): boolean;

	isTeamSharedDropboxError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderArchiveErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderArchiveErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderArchiveError;

	static new(): DBTEAMTeamFolderArchiveErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderArchiveError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderArchiveErrorTag {

	AccessError = 0,

	StatusError = 1,

	TeamSharedDropboxError = 2,

	Other = 3
}

declare class DBTEAMTeamFolderArchiveJobStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderArchiveJobStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderArchiveJobStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly complete: DBTEAMTeamFolderMetadata;

	readonly failed: DBTEAMTeamFolderArchiveError;

	readonly tag: DBTEAMTeamFolderArchiveJobStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { complete: DBTEAMTeamFolderMetadata; });

	constructor(o: { failed: DBTEAMTeamFolderArchiveError; });

	constructor(o: { inProgress: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithComplete(complete: DBTEAMTeamFolderMetadata): this;

	initWithFailed(failed: DBTEAMTeamFolderArchiveError): this;

	initWithInProgress(): this;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isFailed(): boolean;

	isInProgress(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderArchiveJobStatusSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderArchiveJobStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderArchiveJobStatus;

	static new(): DBTEAMTeamFolderArchiveJobStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderArchiveJobStatus): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderArchiveJobStatusTag {

	InProgress = 0,

	Complete = 1,

	Failed = 2
}

declare class DBTEAMTeamFolderArchiveLaunch extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderArchiveLaunch; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderArchiveLaunch; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly asyncJobId: string;

	readonly complete: DBTEAMTeamFolderMetadata;

	readonly tag: DBTEAMTeamFolderArchiveLaunchTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { asyncJobId: string; });

	constructor(o: { complete: DBTEAMTeamFolderMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAsyncJobId(asyncJobId: string): this;

	initWithComplete(complete: DBTEAMTeamFolderMetadata): this;

	isAsyncJobId(): boolean;

	isComplete(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderArchiveLaunchSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderArchiveLaunchSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderArchiveLaunch;

	static new(): DBTEAMTeamFolderArchiveLaunchSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderArchiveLaunch): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderArchiveLaunchTag {

	AsyncJobId = 0,

	Complete = 1
}

declare class DBTEAMTeamFolderCreateArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderCreateArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderCreateArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly name: string;

	readonly syncSetting: DBFILESSyncSettingArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; });

	constructor(o: { name: string; syncSetting: DBFILESSyncSettingArg; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithName(name: string): this;

	initWithNameSyncSetting(name: string, syncSetting: DBFILESSyncSettingArg): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderCreateArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderCreateArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderCreateArg;

	static new(): DBTEAMTeamFolderCreateArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderCreateArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderCreateError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderCreateError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderCreateError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly syncSettingsError: DBFILESSyncSettingsError;

	readonly tag: DBTEAMTeamFolderCreateErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { folderNameAlreadyUsed: void; });

	constructor(o: { folderNameReserved: void; });

	constructor(o: { invalidFolderName: void; });

	constructor(o: { other: void; });

	constructor(o: { syncSettingsError: DBFILESSyncSettingsError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFolderNameAlreadyUsed(): this;

	initWithFolderNameReserved(): this;

	initWithInvalidFolderName(): this;

	initWithOther(): this;

	initWithSyncSettingsError(syncSettingsError: DBFILESSyncSettingsError): this;

	isEqual(object: any): boolean;

	isFolderNameAlreadyUsed(): boolean;

	isFolderNameReserved(): boolean;

	isInvalidFolderName(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isSyncSettingsError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderCreateErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderCreateErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderCreateError;

	static new(): DBTEAMTeamFolderCreateErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderCreateError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderCreateErrorTag {

	InvalidFolderName = 0,

	FolderNameAlreadyUsed = 1,

	FolderNameReserved = 2,

	SyncSettingsError = 3,

	Other = 4
}

declare class DBTEAMTeamFolderGetInfoItem extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderGetInfoItem; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderGetInfoItem; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly idNotFound: string;

	readonly tag: DBTEAMTeamFolderGetInfoItemTag;

	readonly teamFolderMetadata: DBTEAMTeamFolderMetadata;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { idNotFound: string; });

	constructor(o: { teamFolderMetadata: DBTEAMTeamFolderMetadata; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIdNotFound(idNotFound: string): this;

	initWithTeamFolderMetadata(teamFolderMetadata: DBTEAMTeamFolderMetadata): this;

	isEqual(object: any): boolean;

	isIdNotFound(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isTeamFolderMetadata(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderGetInfoItemSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderGetInfoItemSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderGetInfoItem;

	static new(): DBTEAMTeamFolderGetInfoItemSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderGetInfoItem): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderGetInfoItemTag {

	IdNotFound = 0,

	TeamFolderMetadata = 1
}

declare class DBTEAMTeamFolderIdArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderIdArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderIdArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly teamFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamFolderId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamFolderId(teamFolderId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderIdArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderIdArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderIdArg;

	static new(): DBTEAMTeamFolderIdArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderIdArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderIdListArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderIdListArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderIdListArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly teamFolderIds: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamFolderIds: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamFolderIds(teamFolderIds: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderIdListArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderIdListArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderIdListArg;

	static new(): DBTEAMTeamFolderIdListArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderIdListArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderInvalidStatusError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderInvalidStatusError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderInvalidStatusError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTeamFolderInvalidStatusErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { active: void; });

	constructor(o: { archiveInProgress: void; });

	constructor(o: { archived: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActive(): this;

	initWithArchiveInProgress(): this;

	initWithArchived(): this;

	initWithOther(): this;

	isActive(): boolean;

	isArchiveInProgress(): boolean;

	isArchived(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderInvalidStatusErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderInvalidStatusErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderInvalidStatusError;

	static new(): DBTEAMTeamFolderInvalidStatusErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderInvalidStatusError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderInvalidStatusErrorTag {

	Active = 0,

	Archived = 1,

	ArchiveInProgress = 2,

	Other = 3
}

declare class DBTEAMTeamFolderListArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderListArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderListArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithLimit(limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderListArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderListArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderListArg;

	static new(): DBTEAMTeamFolderListArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderListArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderListContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderListContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderListContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderListContinueArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderListContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderListContinueArg;

	static new(): DBTEAMTeamFolderListContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderListContinueArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderListContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderListContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderListContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTeamFolderListContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderListContinueErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderListContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderListContinueError;

	static new(): DBTEAMTeamFolderListContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderListContinueError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderListContinueErrorTag {

	InvalidCursor = 0,

	Other = 1
}

declare class DBTEAMTeamFolderListError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderListError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderListError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBTEAMTeamFolderAccessError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBTEAMTeamFolderAccessError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBTEAMTeamFolderAccessError): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderListErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderListErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderListError;

	static new(): DBTEAMTeamFolderListErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderListError): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderListResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderListResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderListResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly hasMore: number;

	readonly teamFolders: NSArray<DBTEAMTeamFolderMetadata>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamFolders: NSArray<DBTEAMTeamFolderMetadata> | DBTEAMTeamFolderMetadata[]; cursor: string; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamFoldersCursorHasMore(teamFolders: NSArray<DBTEAMTeamFolderMetadata> | DBTEAMTeamFolderMetadata[], cursor: string, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderListResultSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderListResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderListResult;

	static new(): DBTEAMTeamFolderListResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderListResult): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderMetadata extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderMetadata; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderMetadata; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly contentSyncSettings: NSArray<DBFILESContentSyncSetting>;

	readonly isTeamSharedDropbox: number;

	readonly name: string;

	readonly status: DBTEAMTeamFolderStatus;

	readonly syncSetting: DBFILESSyncSetting;

	readonly teamFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamFolderId: string; name: string; status: DBTEAMTeamFolderStatus; isTeamSharedDropbox: number; syncSetting: DBFILESSyncSetting; contentSyncSettings: NSArray<DBFILESContentSyncSetting> | DBFILESContentSyncSetting[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamFolderIdNameStatusIsTeamSharedDropboxSyncSettingContentSyncSettings(teamFolderId: string, name: string, status: DBTEAMTeamFolderStatus, isTeamSharedDropbox: number, syncSetting: DBFILESSyncSetting, contentSyncSettings: NSArray<DBFILESContentSyncSetting> | DBFILESContentSyncSetting[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderMetadataSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderMetadataSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderMetadata;

	static new(): DBTEAMTeamFolderMetadataSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderMetadata): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderPermanentlyDeleteError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderPermanentlyDeleteError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderPermanentlyDeleteError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBTEAMTeamFolderAccessError;

	readonly statusError: DBTEAMTeamFolderInvalidStatusError;

	readonly tag: DBTEAMTeamFolderPermanentlyDeleteErrorTag;

	readonly teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBTEAMTeamFolderAccessError; });

	constructor(o: { other: void; });

	constructor(o: { statusError: DBTEAMTeamFolderInvalidStatusError; });

	constructor(o: { teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBTEAMTeamFolderAccessError): this;

	initWithOther(): this;

	initWithStatusError(statusError: DBTEAMTeamFolderInvalidStatusError): this;

	initWithTeamSharedDropboxError(teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isStatusError(): boolean;

	isTeamSharedDropboxError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderPermanentlyDeleteErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderPermanentlyDeleteErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderPermanentlyDeleteError;

	static new(): DBTEAMTeamFolderPermanentlyDeleteErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderPermanentlyDeleteError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderPermanentlyDeleteErrorTag {

	AccessError = 0,

	StatusError = 1,

	TeamSharedDropboxError = 2,

	Other = 3
}

declare class DBTEAMTeamFolderRenameArg extends DBTEAMTeamFolderIdArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderRenameArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderRenameArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly name: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamFolderId: string; name: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamFolderIdName(teamFolderId: string, name: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderRenameArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderRenameArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderRenameArg;

	static new(): DBTEAMTeamFolderRenameArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderRenameArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderRenameError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderRenameError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderRenameError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBTEAMTeamFolderAccessError;

	readonly statusError: DBTEAMTeamFolderInvalidStatusError;

	readonly tag: DBTEAMTeamFolderRenameErrorTag;

	readonly teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBTEAMTeamFolderAccessError; });

	constructor(o: { folderNameAlreadyUsed: void; });

	constructor(o: { folderNameReserved: void; });

	constructor(o: { invalidFolderName: void; });

	constructor(o: { other: void; });

	constructor(o: { statusError: DBTEAMTeamFolderInvalidStatusError; });

	constructor(o: { teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBTEAMTeamFolderAccessError): this;

	initWithFolderNameAlreadyUsed(): this;

	initWithFolderNameReserved(): this;

	initWithInvalidFolderName(): this;

	initWithOther(): this;

	initWithStatusError(statusError: DBTEAMTeamFolderInvalidStatusError): this;

	initWithTeamSharedDropboxError(teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isFolderNameAlreadyUsed(): boolean;

	isFolderNameReserved(): boolean;

	isInvalidFolderName(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isStatusError(): boolean;

	isTeamSharedDropboxError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderRenameErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderRenameErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderRenameError;

	static new(): DBTEAMTeamFolderRenameErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderRenameError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderRenameErrorTag {

	AccessError = 0,

	StatusError = 1,

	TeamSharedDropboxError = 2,

	Other = 3,

	InvalidFolderName = 4,

	FolderNameAlreadyUsed = 5,

	FolderNameReserved = 6
}

declare class DBTEAMTeamFolderStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTeamFolderStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { active: void; });

	constructor(o: { archiveInProgress: void; });

	constructor(o: { archived: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActive(): this;

	initWithArchiveInProgress(): this;

	initWithArchived(): this;

	initWithOther(): this;

	isActive(): boolean;

	isArchiveInProgress(): boolean;

	isArchived(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderStatusSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderStatus;

	static new(): DBTEAMTeamFolderStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderStatus): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderStatusTag {

	Active = 0,

	Archived = 1,

	ArchiveInProgress = 2,

	Other = 3
}

declare class DBTEAMTeamFolderTeamSharedDropboxError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderTeamSharedDropboxError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderTeamSharedDropboxError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTeamFolderTeamSharedDropboxErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { disallowed: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithDisallowed(): this;

	initWithOther(): this;

	isDisallowed(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderTeamSharedDropboxErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderTeamSharedDropboxErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderTeamSharedDropboxError;

	static new(): DBTEAMTeamFolderTeamSharedDropboxErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderTeamSharedDropboxError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderTeamSharedDropboxErrorTag {

	Disallowed = 0,

	Other = 1
}

declare class DBTEAMTeamFolderUpdateSyncSettingsArg extends DBTEAMTeamFolderIdArg implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderUpdateSyncSettingsArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderUpdateSyncSettingsArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly contentSyncSettings: NSArray<DBFILESContentSyncSettingArg>;

	readonly syncSetting: DBFILESSyncSettingArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamFolderId: string; syncSetting: DBFILESSyncSettingArg; contentSyncSettings: NSArray<DBFILESContentSyncSettingArg> | DBFILESContentSyncSettingArg[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamFolderIdSyncSettingContentSyncSettings(teamFolderId: string, syncSetting: DBFILESSyncSettingArg, contentSyncSettings: NSArray<DBFILESContentSyncSettingArg> | DBFILESContentSyncSettingArg[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamFolderUpdateSyncSettingsArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderUpdateSyncSettingsArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderUpdateSyncSettingsArg;

	static new(): DBTEAMTeamFolderUpdateSyncSettingsArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderUpdateSyncSettingsArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamFolderUpdateSyncSettingsError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamFolderUpdateSyncSettingsError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamFolderUpdateSyncSettingsError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accessError: DBTEAMTeamFolderAccessError;

	readonly statusError: DBTEAMTeamFolderInvalidStatusError;

	readonly syncSettingsError: DBFILESSyncSettingsError;

	readonly tag: DBTEAMTeamFolderUpdateSyncSettingsErrorTag;

	readonly teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessError: DBTEAMTeamFolderAccessError; });

	constructor(o: { other: void; });

	constructor(o: { statusError: DBTEAMTeamFolderInvalidStatusError; });

	constructor(o: { syncSettingsError: DBFILESSyncSettingsError; });

	constructor(o: { teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccessError(accessError: DBTEAMTeamFolderAccessError): this;

	initWithOther(): this;

	initWithStatusError(statusError: DBTEAMTeamFolderInvalidStatusError): this;

	initWithSyncSettingsError(syncSettingsError: DBFILESSyncSettingsError): this;

	initWithTeamSharedDropboxError(teamSharedDropboxError: DBTEAMTeamFolderTeamSharedDropboxError): this;

	isAccessError(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isStatusError(): boolean;

	isSyncSettingsError(): boolean;

	isTeamSharedDropboxError(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamFolderUpdateSyncSettingsErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamFolderUpdateSyncSettingsErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamFolderUpdateSyncSettingsError;

	static new(): DBTEAMTeamFolderUpdateSyncSettingsErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamFolderUpdateSyncSettingsError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamFolderUpdateSyncSettingsErrorTag {

	AccessError = 0,

	StatusError = 1,

	TeamSharedDropboxError = 2,

	Other = 3,

	SyncSettingsError = 4
}

declare class DBTEAMTeamGetInfoResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamGetInfoResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamGetInfoResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly name: string;

	readonly numLicensedUsers: number;

	readonly numProvisionedUsers: number;

	readonly policies: DBTEAMPOLICIESTeamMemberPolicies;

	readonly teamId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { name: string; teamId: string; numLicensedUsers: number; numProvisionedUsers: number; policies: DBTEAMPOLICIESTeamMemberPolicies; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNameTeamIdNumLicensedUsersNumProvisionedUsersPolicies(name: string, teamId: string, numLicensedUsers: number, numProvisionedUsers: number, policies: DBTEAMPOLICIESTeamMemberPolicies): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamGetInfoResultSerializer extends NSObject {

	static alloc(): DBTEAMTeamGetInfoResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamGetInfoResult;

	static new(): DBTEAMTeamGetInfoResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamGetInfoResult): NSDictionary<string, any>;
}

declare class DBTEAMTeamMemberInfo extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamMemberInfo; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamMemberInfo; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly profile: DBTEAMTeamMemberProfile;

	readonly role: DBTEAMAdminTier;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { profile: DBTEAMTeamMemberProfile; role: DBTEAMAdminTier; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithProfileRole(profile: DBTEAMTeamMemberProfile, role: DBTEAMAdminTier): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamMemberInfoSerializer extends NSObject {

	static alloc(): DBTEAMTeamMemberInfoSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamMemberInfo;

	static new(): DBTEAMTeamMemberInfoSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamMemberInfo): NSDictionary<string, any>;
}

declare class DBTEAMTeamMemberProfile extends DBTEAMMemberProfile implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamMemberProfile; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamMemberProfile; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly groups: NSArray<string>;

	readonly memberFolderId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { teamMemberId: string; email: string; emailVerified: number; status: DBTEAMTeamMemberStatus; name: DBUSERSName; membershipType: DBTEAMTeamMembershipType; groups: NSArray<string> | string[]; memberFolderId: string; });

	constructor(o: { teamMemberId: string; email: string; emailVerified: number; status: DBTEAMTeamMemberStatus; name: DBUSERSName; membershipType: DBTEAMTeamMembershipType; groups: NSArray<string> | string[]; memberFolderId: string; externalId: string; accountId: string; joinedOn: Date; persistentId: string; isDirectoryRestricted: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithTeamMemberIdEmailEmailVerifiedStatusNameMembershipTypeGroupsMemberFolderId(teamMemberId: string, email: string, emailVerified: number, status: DBTEAMTeamMemberStatus, name: DBUSERSName, membershipType: DBTEAMTeamMembershipType, groups: NSArray<string> | string[], memberFolderId: string): this;

	initWithTeamMemberIdEmailEmailVerifiedStatusNameMembershipTypeGroupsMemberFolderIdExternalIdAccountIdJoinedOnPersistentIdIsDirectoryRestricted(teamMemberId: string, email: string, emailVerified: number, status: DBTEAMTeamMemberStatus, name: DBUSERSName, membershipType: DBTEAMTeamMembershipType, groups: NSArray<string> | string[], memberFolderId: string, externalId: string, accountId: string, joinedOn: Date, persistentId: string, isDirectoryRestricted: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamMemberProfileSerializer extends NSObject {

	static alloc(): DBTEAMTeamMemberProfileSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamMemberProfile;

	static new(): DBTEAMTeamMemberProfileSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamMemberProfile): NSDictionary<string, any>;
}

declare class DBTEAMTeamMemberStatus extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamMemberStatus; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamMemberStatus; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly removed: DBTEAMRemovedStatus;

	readonly tag: DBTEAMTeamMemberStatusTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { active: void; });

	constructor(o: { invited: void; });

	constructor(o: { removed: DBTEAMRemovedStatus; });

	constructor(o: { suspended: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithActive(): this;

	initWithInvited(): this;

	initWithRemoved(removed: DBTEAMRemovedStatus): this;

	initWithSuspended(): this;

	isActive(): boolean;

	isEqual(object: any): boolean;

	isInvited(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isRemoved(): boolean;

	isSuspended(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamMemberStatusSerializer extends NSObject {

	static alloc(): DBTEAMTeamMemberStatusSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamMemberStatus;

	static new(): DBTEAMTeamMemberStatusSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamMemberStatus): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamMemberStatusTag {

	Active = 0,

	Invited = 1,

	Suspended = 2,

	Removed = 3
}

declare class DBTEAMTeamMembershipType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamMembershipType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamMembershipType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTeamMembershipTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { full: void; });

	constructor(o: { limited: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithFull(): this;

	initWithLimited(): this;

	isEqual(object: any): boolean;

	isFull(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLimited(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamMembershipTypeSerializer extends NSObject {

	static alloc(): DBTEAMTeamMembershipTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamMembershipType;

	static new(): DBTEAMTeamMembershipTypeSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamMembershipType): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamMembershipTypeTag {

	Full = 0,

	Limited = 1
}

declare class DBTEAMTeamNamespacesListArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamNamespacesListArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamNamespacesListArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly limit: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { default: void; });

	constructor(o: { limit: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initDefault(): this;

	initWithLimit(limit: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamNamespacesListArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamNamespacesListArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamNamespacesListArg;

	static new(): DBTEAMTeamNamespacesListArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamNamespacesListArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamNamespacesListContinueArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamNamespacesListContinueArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamNamespacesListContinueArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { cursor: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithCursor(cursor: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamNamespacesListContinueArgSerializer extends NSObject {

	static alloc(): DBTEAMTeamNamespacesListContinueArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamNamespacesListContinueArg;

	static new(): DBTEAMTeamNamespacesListContinueArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamNamespacesListContinueArg): NSDictionary<string, any>;
}

declare class DBTEAMTeamNamespacesListContinueError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamNamespacesListContinueError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamNamespacesListContinueError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTeamNamespacesListContinueErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidArg: void; });

	constructor(o: { invalidCursor: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidArg(): this;

	initWithInvalidCursor(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidArg(): boolean;

	isInvalidCursor(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamNamespacesListContinueErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamNamespacesListContinueErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamNamespacesListContinueError;

	static new(): DBTEAMTeamNamespacesListContinueErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamNamespacesListContinueError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamNamespacesListContinueErrorTag {

	InvalidArg = 0,

	Other = 1,

	InvalidCursor = 2
}

declare class DBTEAMTeamNamespacesListError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamNamespacesListError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamNamespacesListError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTeamNamespacesListErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { invalidArg: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithInvalidArg(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isInvalidArg(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTeamNamespacesListErrorSerializer extends NSObject {

	static alloc(): DBTEAMTeamNamespacesListErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamNamespacesListError;

	static new(): DBTEAMTeamNamespacesListErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamNamespacesListError): NSDictionary<string, any>;
}

declare const enum DBTEAMTeamNamespacesListErrorTag {

	InvalidArg = 0,

	Other = 1
}

declare class DBTEAMTeamNamespacesListResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTeamNamespacesListResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTeamNamespacesListResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly cursor: string;

	readonly hasMore: number;

	readonly namespaces: NSArray<DBTEAMNamespaceMetadata>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { namespaces: NSArray<DBTEAMNamespaceMetadata> | DBTEAMNamespaceMetadata[]; cursor: string; hasMore: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNamespacesCursorHasMore(namespaces: NSArray<DBTEAMNamespaceMetadata> | DBTEAMNamespaceMetadata[], cursor: string, hasMore: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTeamNamespacesListResultSerializer extends NSObject {

	static alloc(): DBTEAMTeamNamespacesListResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTeamNamespacesListResult;

	static new(): DBTEAMTeamNamespacesListResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTeamNamespacesListResult): NSDictionary<string, any>;
}

declare class DBTEAMTokenGetAuthenticatedAdminError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTokenGetAuthenticatedAdminError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTokenGetAuthenticatedAdminError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMTokenGetAuthenticatedAdminErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { adminNotActive: void; });

	constructor(o: { mappingNotFound: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAdminNotActive(): this;

	initWithMappingNotFound(): this;

	initWithOther(): this;

	isAdminNotActive(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMappingNotFound(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMTokenGetAuthenticatedAdminErrorSerializer extends NSObject {

	static alloc(): DBTEAMTokenGetAuthenticatedAdminErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTokenGetAuthenticatedAdminError;

	static new(): DBTEAMTokenGetAuthenticatedAdminErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTokenGetAuthenticatedAdminError): NSDictionary<string, any>;
}

declare const enum DBTEAMTokenGetAuthenticatedAdminErrorTag {

	MappingNotFound = 0,

	AdminNotActive = 1,

	Other = 2
}

declare class DBTEAMTokenGetAuthenticatedAdminResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMTokenGetAuthenticatedAdminResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMTokenGetAuthenticatedAdminResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly adminProfile: DBTEAMTeamMemberProfile;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { adminProfile: DBTEAMTeamMemberProfile; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAdminProfile(adminProfile: DBTEAMTeamMemberProfile): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMTokenGetAuthenticatedAdminResultSerializer extends NSObject {

	static alloc(): DBTEAMTokenGetAuthenticatedAdminResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMTokenGetAuthenticatedAdminResult;

	static new(): DBTEAMTokenGetAuthenticatedAdminResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMTokenGetAuthenticatedAdminResult): NSDictionary<string, any>;
}

declare class DBTEAMUploadApiRateLimitValue extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMUploadApiRateLimitValue; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMUploadApiRateLimitValue; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly limit: number;

	readonly tag: DBTEAMUploadApiRateLimitValueTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { limit: number; });

	constructor(o: { other: void; });

	constructor(o: { unlimited: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithLimit(limit: number): this;

	initWithOther(): this;

	initWithUnlimited(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isLimit(): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isUnlimited(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMUploadApiRateLimitValueSerializer extends NSObject {

	static alloc(): DBTEAMUploadApiRateLimitValueSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMUploadApiRateLimitValue;

	static new(): DBTEAMUploadApiRateLimitValueSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMUploadApiRateLimitValue): NSDictionary<string, any>;
}

declare const enum DBTEAMUploadApiRateLimitValueTag {

	Unlimited = 0,

	Limit = 1,

	Other = 2
}

declare class DBTEAMUserCustomQuotaArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMUserCustomQuotaArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMUserCustomQuotaArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly quotaGb: number;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; quotaGb: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserQuotaGb(user: DBTEAMUserSelectorArg, quotaGb: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMUserCustomQuotaArgSerializer extends NSObject {

	static alloc(): DBTEAMUserCustomQuotaArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMUserCustomQuotaArg;

	static new(): DBTEAMUserCustomQuotaArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMUserCustomQuotaArg): NSDictionary<string, any>;
}

declare class DBTEAMUserCustomQuotaResult extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMUserCustomQuotaResult; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMUserCustomQuotaResult; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly quotaGb: number;

	readonly user: DBTEAMUserSelectorArg;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { user: DBTEAMUserSelectorArg; });

	constructor(o: { user: DBTEAMUserSelectorArg; quotaGb: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUser(user: DBTEAMUserSelectorArg): this;

	initWithUserQuotaGb(user: DBTEAMUserSelectorArg, quotaGb: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTEAMUserCustomQuotaResultSerializer extends NSObject {

	static alloc(): DBTEAMUserCustomQuotaResultSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMUserCustomQuotaResult;

	static new(): DBTEAMUserCustomQuotaResultSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMUserCustomQuotaResult): NSDictionary<string, any>;
}

declare class DBTEAMUserSelectorArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMUserSelectorArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMUserSelectorArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly email: string;

	readonly externalId: string;

	readonly tag: DBTEAMUserSelectorArgTag;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { email: string; });

	constructor(o: { externalId: string; });

	constructor(o: { teamMemberId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmail(email: string): this;

	initWithExternalId(externalId: string): this;

	initWithTeamMemberId(teamMemberId: string): this;

	isEmail(): boolean;

	isEqual(object: any): boolean;

	isExternalId(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isTeamMemberId(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMUserSelectorArgSerializer extends NSObject {

	static alloc(): DBTEAMUserSelectorArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMUserSelectorArg;

	static new(): DBTEAMUserSelectorArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMUserSelectorArg): NSDictionary<string, any>;
}

declare const enum DBTEAMUserSelectorArgTag {

	TeamMemberId = 0,

	ExternalId = 1,

	Email = 2
}

declare class DBTEAMUserSelectorError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMUserSelectorError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMUserSelectorError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBTEAMUserSelectorErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { userNotFound: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUserNotFound(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isUserNotFound(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMUserSelectorErrorSerializer extends NSObject {

	static alloc(): DBTEAMUserSelectorErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMUserSelectorError;

	static new(): DBTEAMUserSelectorErrorSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMUserSelectorError): NSDictionary<string, any>;
}

declare const enum DBTEAMUserSelectorErrorTag {

	UserNotFound = 0
}

declare class DBTEAMUsersSelectorArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBTEAMUsersSelectorArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBTEAMUsersSelectorArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly emails: NSArray<string>;

	readonly externalIds: NSArray<string>;

	readonly tag: DBTEAMUsersSelectorArgTag;

	readonly teamMemberIds: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { emails: NSArray<string> | string[]; });

	constructor(o: { externalIds: NSArray<string> | string[]; });

	constructor(o: { teamMemberIds: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithEmails(emails: NSArray<string> | string[]): this;

	initWithExternalIds(externalIds: NSArray<string> | string[]): this;

	initWithTeamMemberIds(teamMemberIds: NSArray<string> | string[]): this;

	isEmails(): boolean;

	isEqual(object: any): boolean;

	isExternalIds(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isTeamMemberIds(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBTEAMUsersSelectorArgSerializer extends NSObject {

	static alloc(): DBTEAMUsersSelectorArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBTEAMUsersSelectorArg;

	static new(): DBTEAMUsersSelectorArgSerializer; // inherited from NSObject

	static serialize(instance: DBTEAMUsersSelectorArg): NSDictionary<string, any>;
}

declare const enum DBTEAMUsersSelectorArgTag {

	TeamMemberIds = 0,

	ExternalIds = 1,

	Emails = 2
}

declare class DBTask extends NSObject {

	static alloc(): DBTask; // inherited from NSObject

	static new(): DBTask; // inherited from NSObject

	retryCount: number;

	readonly tokenUid: string;

	constructor(o: { route: DBRoute; tokenUid: string; });

	cancel(): void;

	initWithRouteTokenUid(route: DBRoute, tokenUid: string): this;

	restart(): DBTask;

	resume(): void;

	start(): void;

	suspend(): void;
}

declare class DBTasksStorage extends NSObject {

	static alloc(): DBTasksStorage; // inherited from NSObject

	static new(): DBTasksStorage; // inherited from NSObject

	addDownloadDataTask(task: DBDownloadDataTask<any, any>): void;

	addDownloadUrlTask(task: DBDownloadUrlTask<any, any>): void;

	addUploadTask(task: DBUploadTask<any, any>): void;

	cancelAllTasks(): void;

	removeDownloadDataTask(task: DBDownloadDataTask<any, any>): void;

	removeDownloadUrlTask(task: DBDownloadUrlTask<any, any>): void;

	removeUploadTask(task: DBUploadTask<any, any>): void;

	tasksInProgress(): boolean;
}

declare class DBTeamBaseClient extends NSObject {

	static alloc(): DBTeamBaseClient; // inherited from NSObject

	static new(): DBTeamBaseClient; // inherited from NSObject

	readonly filePropertiesRoutes: DBFILEPROPERTIESTeamAuthRoutes;

	readonly teamLogRoutes: DBTEAMLOGTeamAuthRoutes;

	readonly teamRoutes: DBTEAMTeamAuthRoutes;

	constructor(o: { transportClient: DBTransportClient; });

	initWithTransportClient(client: DBTransportClient): this;
}

declare class DBTeamClient extends DBTeamBaseClient {

	static alloc(): DBTeamClient; // inherited from NSObject

	static new(): DBTeamClient; // inherited from NSObject

	readonly tokenUid: string;

	constructor(o: { accessToken: string; });

	constructor(o: { accessToken: string; tokenUid: string; transportConfig: DBTransportDefaultConfig; });

	constructor(o: { accessToken: string; transportConfig: DBTransportDefaultConfig; });

	accessToken(): string;

	initWithAccessToken(accessToken: string): this;

	initWithAccessTokenTokenUidTransportConfig(accessToken: string, tokenUid: string, transportConfig: DBTransportDefaultConfig): this;

	initWithAccessTokenTransportConfig(accessToken: string, transportConfig: DBTransportDefaultConfig): this;

	isAuthorized(): boolean;

	userClientWithMemberId(memberId: string): DBUserClient;
}

declare class DBTransportBaseClient extends NSObject {

	static alloc(): DBTransportBaseClient; // inherited from NSObject

	static new(): DBTransportBaseClient; // inherited from NSObject

	readonly accessToken: string;

	readonly additionalHeaders: NSDictionary<string, string>;

	readonly appKey: string;

	readonly appSecret: string;

	readonly asMemberId: string;

	readonly pathRoot: DBCOMMONPathRoot;

	readonly tokenUid: string;

	readonly userAgent: string;

	constructor(o: { accessToken: string; tokenUid: string; transportConfig: DBTransportBaseConfig; });

	initWithAccessTokenTokenUidTransportConfig(accessToken: string, tokenUid: string, transportConfig: DBTransportBaseConfig): this;
}

declare class DBTransportBaseConfig extends NSObject {

	static alloc(): DBTransportBaseConfig; // inherited from NSObject

	static new(): DBTransportBaseConfig; // inherited from NSObject

	readonly additionalHeaders: NSDictionary<string, string>;

	readonly appKey: string;

	readonly appSecret: string;

	readonly asMemberId: string;

	readonly hostnameConfig: DBTransportBaseHostnameConfig;

	readonly pathRoot: DBCOMMONPathRoot;

	readonly redirectURL: string;

	readonly userAgent: string;

	constructor(o: { appKey: string; appSecret: string; hostnameConfig: DBTransportBaseHostnameConfig; redirectURL: string; userAgent: string; asMemberId: string; pathRoot: DBCOMMONPathRoot; additionalHeaders: NSDictionary<string, string>; });

	constructor(o: { appKey: string; appSecret: string; hostnameConfig: DBTransportBaseHostnameConfig; userAgent: string; asMemberId: string; additionalHeaders: NSDictionary<string, string>; });

	constructor(o: { appKey: string; appSecret: string; userAgent: string; });

	constructor(o: { appKey: string; appSecret: string; userAgent: string; asMemberId: string; });

	constructor(o: { appKey: string; appSecret: string; userAgent: string; asMemberId: string; additionalHeaders: NSDictionary<string, string>; });

	constructor(o: { appKey: string; userAgent: string; });

	initWithAppKeyAppSecretHostnameConfigRedirectURLUserAgentAsMemberIdPathRootAdditionalHeaders(appKey: string, appSecret: string, hostnameConfig: DBTransportBaseHostnameConfig, redirectURL: string, userAgent: string, asMemberId: string, pathRoot: DBCOMMONPathRoot, additionalHeaders: NSDictionary<string, string>): this;

	initWithAppKeyAppSecretHostnameConfigUserAgentAsMemberIdAdditionalHeaders(appKey: string, appSecret: string, hostnameConfig: DBTransportBaseHostnameConfig, userAgent: string, asMemberId: string, additionalHeaders: NSDictionary<string, string>): this;

	initWithAppKeyAppSecretUserAgent(appKey: string, appSecret: string, userAgent: string): this;

	initWithAppKeyAppSecretUserAgentAsMemberId(appKey: string, appSecret: string, userAgent: string, asMemberId: string): this;

	initWithAppKeyAppSecretUserAgentAsMemberIdAdditionalHeaders(appKey: string, appSecret: string, userAgent: string, asMemberId: string, additionalHeaders: NSDictionary<string, string>): this;

	initWithAppKeyUserAgent(appKey: string, userAgent: string): this;
}

declare class DBTransportBaseHostnameConfig extends NSObject {

	static alloc(): DBTransportBaseHostnameConfig; // inherited from NSObject

	static new(): DBTransportBaseHostnameConfig; // inherited from NSObject

	readonly api: string;

	readonly content: string;

	readonly meta: string;

	readonly notify: string;

	constructor(o: { meta: string; api: string; content: string; notify: string; });

	apiV2PrefixWithRoute(route: DBRoute): string;

	initWithMetaApiContentNotify(meta: string, api: string, content: string, notify: string): this;
}

interface DBTransportClient extends NSObjectProtocol {

	accessToken: string;

	requestDownloadArg(route: DBRoute, arg: DBSerializable): DBDownloadDataTask<any, any>;

	requestDownloadArgByteOffsetStartByteOffsetEnd(route: DBRoute, arg: DBSerializable, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<any, any>;

	requestDownloadArgOverwriteDestination(route: DBRoute, arg: DBSerializable, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<any, any>;

	requestDownloadArgOverwriteDestinationByteOffsetStartByteOffsetEnd(route: DBRoute, arg: DBSerializable, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<any, any>;

	requestRpcArg(route: DBRoute, arg: DBSerializable): DBRpcTask<any, any>;

	requestUploadArgInputData(route: DBRoute, arg: DBSerializable, input: NSData): DBUploadTask<any, any>;

	requestUploadArgInputStream(route: DBRoute, arg: DBSerializable, input: NSInputStream): DBUploadTask<any, any>;

	requestUploadArgInputUrl(route: DBRoute, arg: DBSerializable, input: string): DBUploadTask<any, any>;
}
declare var DBTransportClient: {

	prototype: DBTransportClient;
};

declare class DBTransportDefaultClient extends DBTransportBaseClient implements DBTransportClient {

	static alloc(): DBTransportDefaultClient; // inherited from NSObject

	static new(): DBTransportDefaultClient; // inherited from NSObject

	readonly delegateQueue: NSOperationQueue;

	readonly forceForegroundSession: boolean;

	longpollSession: NSURLSession;

	secondarySession: NSURLSession;

	session: NSURLSession;

	accessToken: string; // inherited from DBTransportClient

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accessToken: string; tokenUid: string; transportConfig: DBTransportDefaultConfig; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	duplicateTransportConfigWithAsMemberId(asMemberId: string): DBTransportDefaultConfig;

	duplicateTransportConfigWithPathRoot(pathRoot: DBCOMMONPathRoot): DBTransportDefaultConfig;

	initWithAccessTokenTokenUidTransportConfig(accessToken: string, tokenUid: string, transportConfig: DBTransportDefaultConfig): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	requestDownloadArg(route: DBRoute, arg: DBSerializable): DBDownloadDataTask<any, any>;

	requestDownloadArgByteOffsetStartByteOffsetEnd(route: DBRoute, arg: DBSerializable, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadDataTask<any, any>;

	requestDownloadArgOverwriteDestination(route: DBRoute, arg: DBSerializable, overwrite: boolean, destination: NSURL): DBDownloadUrlTask<any, any>;

	requestDownloadArgOverwriteDestinationByteOffsetStartByteOffsetEnd(route: DBRoute, arg: DBSerializable, overwrite: boolean, destination: NSURL, byteOffsetStart: number, byteOffsetEnd: number): DBDownloadUrlTask<any, any>;

	requestRpcArg(route: DBRoute, arg: DBSerializable): DBRpcTask<any, any>;

	requestUploadArgInputData(route: DBRoute, arg: DBSerializable, input: NSData): DBUploadTask<any, any>;

	requestUploadArgInputStream(route: DBRoute, arg: DBSerializable, input: NSInputStream): DBUploadTask<any, any>;

	requestUploadArgInputUrl(route: DBRoute, arg: DBSerializable, input: string): DBUploadTask<any, any>;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBTransportDefaultConfig extends DBTransportBaseConfig {

	static alloc(): DBTransportDefaultConfig; // inherited from NSObject

	static new(): DBTransportDefaultConfig; // inherited from NSObject

	readonly delegateQueue: NSOperationQueue;

	readonly forceForegroundSession: boolean;

	readonly sharedContainerIdentifier: string;

	constructor(o: { appKey: string; });

	constructor(o: { appKey: string; appSecret: string; });

	constructor(o: { appKey: string; appSecret: string; delegateQueue: NSOperationQueue; });

	constructor(o: { appKey: string; appSecret: string; hostnameConfig: DBTransportBaseHostnameConfig; redirectURL: string; userAgent: string; asMemberId: string; pathRoot: DBCOMMONPathRoot; additionalHeaders: NSDictionary<string, string>; delegateQueue: NSOperationQueue; forceForegroundSession: boolean; sharedContainerIdentifier: string; });

	constructor(o: { appKey: string; appSecret: string; hostnameConfig: DBTransportBaseHostnameConfig; userAgent: string; asMemberId: string; additionalHeaders: NSDictionary<string, string>; delegateQueue: NSOperationQueue; forceForegroundSession: boolean; sharedContainerIdentifier: string; });

	constructor(o: { appKey: string; appSecret: string; userAgent: string; asMemberId: string; additionalHeaders: NSDictionary<string, string>; delegateQueue: NSOperationQueue; forceForegroundSession: boolean; sharedContainerIdentifier: string; });

	constructor(o: { appKey: string; appSecret: string; userAgent: string; asMemberId: string; delegateQueue: NSOperationQueue; forceForegroundSession: boolean; });

	constructor(o: { appKey: string; appSecret: string; userAgent: string; asMemberId: string; delegateQueue: NSOperationQueue; forceForegroundSession: boolean; sharedContainerIdentifier: string; });

	constructor(o: { appKey: string; appSecret: string; userAgent: string; delegateQueue: NSOperationQueue; forceForegroundSession: boolean; });

	constructor(o: { appKey: string; forceForegroundSession: boolean; });

	initWithAppKey(appKey: string): this;

	initWithAppKeyAppSecret(appKey: string, appSecret: string): this;

	initWithAppKeyAppSecretDelegateQueue(appKey: string, appSecret: string, delegateQueue: NSOperationQueue): this;

	initWithAppKeyAppSecretHostnameConfigRedirectURLUserAgentAsMemberIdPathRootAdditionalHeadersDelegateQueueForceForegroundSessionSharedContainerIdentifier(appKey: string, appSecret: string, hostnameConfig: DBTransportBaseHostnameConfig, redirectURL: string, userAgent: string, asMemberId: string, pathRoot: DBCOMMONPathRoot, additionalHeaders: NSDictionary<string, string>, delegateQueue: NSOperationQueue, forceForegroundSession: boolean, sharedContainerIdentifier: string): this;

	initWithAppKeyAppSecretHostnameConfigUserAgentAsMemberIdAdditionalHeadersDelegateQueueForceForegroundSessionSharedContainerIdentifier(appKey: string, appSecret: string, hostnameConfig: DBTransportBaseHostnameConfig, userAgent: string, asMemberId: string, additionalHeaders: NSDictionary<string, string>, delegateQueue: NSOperationQueue, forceForegroundSession: boolean, sharedContainerIdentifier: string): this;

	initWithAppKeyAppSecretUserAgentAsMemberIdAdditionalHeadersDelegateQueueForceForegroundSessionSharedContainerIdentifier(appKey: string, appSecret: string, userAgent: string, asMemberId: string, additionalHeaders: NSDictionary<string, string>, delegateQueue: NSOperationQueue, forceForegroundSession: boolean, sharedContainerIdentifier: string): this;

	initWithAppKeyAppSecretUserAgentAsMemberIdDelegateQueueForceForegroundSession(appKey: string, appSecret: string, userAgent: string, asMemberId: string, delegateQueue: NSOperationQueue, forceForegroundSession: boolean): this;

	initWithAppKeyAppSecretUserAgentAsMemberIdDelegateQueueForceForegroundSessionSharedContainerIdentifier(appKey: string, appSecret: string, userAgent: string, asMemberId: string, delegateQueue: NSOperationQueue, forceForegroundSession: boolean, sharedContainerIdentifier: string): this;

	initWithAppKeyAppSecretUserAgentDelegateQueueForceForegroundSession(appKey: string, appSecret: string, userAgent: string, delegateQueue: NSOperationQueue, forceForegroundSession: boolean): this;

	initWithAppKeyForceForegroundSession(appKey: string, forceForegroundSession: boolean): this;
}

declare class DBUSERSAccount extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSAccount; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSAccount; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountId: string;

	readonly disabled: number;

	readonly email: string;

	readonly emailVerified: number;

	readonly name: DBUSERSName;

	readonly profilePhotoUrl: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountId: string; name: DBUSERSName; email: string; emailVerified: number; disabled: number; });

	constructor(o: { accountId: string; name: DBUSERSName; email: string; emailVerified: number; disabled: number; profilePhotoUrl: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountIdNameEmailEmailVerifiedDisabled(accountId: string, name: DBUSERSName, email: string, emailVerified: number, disabled: number): this;

	initWithAccountIdNameEmailEmailVerifiedDisabledProfilePhotoUrl(accountId: string, name: DBUSERSName, email: string, emailVerified: number, disabled: number, profilePhotoUrl: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSAccountSerializer extends NSObject {

	static alloc(): DBUSERSAccountSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSAccount;

	static new(): DBUSERSAccountSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSAccount): NSDictionary<string, any>;
}

declare class DBUSERSBasicAccount extends DBUSERSAccount implements DBSerializable, NSCopying {

	static alloc(): DBUSERSBasicAccount; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSBasicAccount; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly isTeammate: number;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountId: string; name: DBUSERSName; email: string; emailVerified: number; disabled: number; isTeammate: number; });

	constructor(o: { accountId: string; name: DBUSERSName; email: string; emailVerified: number; disabled: number; isTeammate: number; profilePhotoUrl: string; teamMemberId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountIdNameEmailEmailVerifiedDisabledIsTeammate(accountId: string, name: DBUSERSName, email: string, emailVerified: number, disabled: number, isTeammate: number): this;

	initWithAccountIdNameEmailEmailVerifiedDisabledIsTeammateProfilePhotoUrlTeamMemberId(accountId: string, name: DBUSERSName, email: string, emailVerified: number, disabled: number, isTeammate: number, profilePhotoUrl: string, teamMemberId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSBasicAccountSerializer extends NSObject {

	static alloc(): DBUSERSBasicAccountSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSBasicAccount;

	static new(): DBUSERSBasicAccountSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSBasicAccount): NSDictionary<string, any>;
}

declare class DBUSERSCOMMONAccountType extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSCOMMONAccountType; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSCOMMONAccountType; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBUSERSCOMMONAccountTypeTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { basic: void; });

	constructor(o: { business: void; });

	constructor(o: { pro: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithBasic(): this;

	initWithBusiness(): this;

	initWithPro(): this;

	isBasic(): boolean;

	isBusiness(): boolean;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isPro(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBUSERSCOMMONAccountTypeSerializer extends NSObject {

	static alloc(): DBUSERSCOMMONAccountTypeSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSCOMMONAccountType;

	static new(): DBUSERSCOMMONAccountTypeSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSCOMMONAccountType): NSDictionary<string, any>;
}

declare const enum DBUSERSCOMMONAccountTypeTag {

	Basic = 0,

	Pro = 1,

	Business = 2
}

declare class DBUSERSFullAccount extends DBUSERSAccount implements DBSerializable, NSCopying {

	static alloc(): DBUSERSFullAccount; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSFullAccount; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountType: DBUSERSCOMMONAccountType;

	readonly country: string;

	readonly isPaired: number;

	readonly locale: string;

	readonly referralLink: string;

	readonly rootInfo: DBCOMMONRootInfo;

	readonly team: DBUSERSFullTeam;

	readonly teamMemberId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountId: string; name: DBUSERSName; email: string; emailVerified: number; disabled: number; locale: string; referralLink: string; isPaired: number; accountType: DBUSERSCOMMONAccountType; rootInfo: DBCOMMONRootInfo; });

	constructor(o: { accountId: string; name: DBUSERSName; email: string; emailVerified: number; disabled: number; locale: string; referralLink: string; isPaired: number; accountType: DBUSERSCOMMONAccountType; rootInfo: DBCOMMONRootInfo; profilePhotoUrl: string; country: string; team: DBUSERSFullTeam; teamMemberId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountIdNameEmailEmailVerifiedDisabledLocaleReferralLinkIsPairedAccountTypeRootInfo(accountId: string, name: DBUSERSName, email: string, emailVerified: number, disabled: number, locale: string, referralLink: string, isPaired: number, accountType: DBUSERSCOMMONAccountType, rootInfo: DBCOMMONRootInfo): this;

	initWithAccountIdNameEmailEmailVerifiedDisabledLocaleReferralLinkIsPairedAccountTypeRootInfoProfilePhotoUrlCountryTeamTeamMemberId(accountId: string, name: DBUSERSName, email: string, emailVerified: number, disabled: number, locale: string, referralLink: string, isPaired: number, accountType: DBUSERSCOMMONAccountType, rootInfo: DBCOMMONRootInfo, profilePhotoUrl: string, country: string, team: DBUSERSFullTeam, teamMemberId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSFullAccountSerializer extends NSObject {

	static alloc(): DBUSERSFullAccountSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSFullAccount;

	static new(): DBUSERSFullAccountSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSFullAccount): NSDictionary<string, any>;
}

declare class DBUSERSFullTeam extends DBUSERSTeam implements DBSerializable, NSCopying {

	static alloc(): DBUSERSFullTeam; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSFullTeam; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly officeAddinPolicy: DBTEAMPOLICIESOfficeAddInPolicy;

	readonly sharingPolicies: DBTEAMPOLICIESTeamSharingPolicies;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; name: string; sharingPolicies: DBTEAMPOLICIESTeamSharingPolicies; officeAddinPolicy: DBTEAMPOLICIESOfficeAddInPolicy; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_NameSharingPoliciesOfficeAddinPolicy(id_: string, name: string, sharingPolicies: DBTEAMPOLICIESTeamSharingPolicies, officeAddinPolicy: DBTEAMPOLICIESOfficeAddInPolicy): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSFullTeamSerializer extends NSObject {

	static alloc(): DBUSERSFullTeamSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSFullTeam;

	static new(): DBUSERSFullTeamSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSFullTeam): NSDictionary<string, any>;
}

declare class DBUSERSGetAccountArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSGetAccountArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSGetAccountArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountId: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountId: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountId(accountId: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSGetAccountArgSerializer extends NSObject {

	static alloc(): DBUSERSGetAccountArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSGetAccountArg;

	static new(): DBUSERSGetAccountArgSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSGetAccountArg): NSDictionary<string, any>;
}

declare class DBUSERSGetAccountBatchArg extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSGetAccountBatchArg; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSGetAccountBatchArg; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly accountIds: NSArray<string>;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { accountIds: NSArray<string> | string[]; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAccountIds(accountIds: NSArray<string> | string[]): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSGetAccountBatchArgSerializer extends NSObject {

	static alloc(): DBUSERSGetAccountBatchArgSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSGetAccountBatchArg;

	static new(): DBUSERSGetAccountBatchArgSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSGetAccountBatchArg): NSDictionary<string, any>;
}

declare class DBUSERSGetAccountBatchError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSGetAccountBatchError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSGetAccountBatchError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly noAccount: string;

	readonly tag: DBUSERSGetAccountBatchErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { noAccount: string; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNoAccount(noAccount: string): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoAccount(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBUSERSGetAccountBatchErrorSerializer extends NSObject {

	static alloc(): DBUSERSGetAccountBatchErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSGetAccountBatchError;

	static new(): DBUSERSGetAccountBatchErrorSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSGetAccountBatchError): NSDictionary<string, any>;
}

declare const enum DBUSERSGetAccountBatchErrorTag {

	NoAccount = 0,

	Other = 1
}

declare class DBUSERSGetAccountError extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSGetAccountError; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSGetAccountError; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly tag: DBUSERSGetAccountErrorTag;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { noAccount: void; });

	constructor(o: { other: void; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithNoAccount(): this;

	initWithOther(): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isNoAccount(): boolean;

	isOther(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBUSERSGetAccountErrorSerializer extends NSObject {

	static alloc(): DBUSERSGetAccountErrorSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSGetAccountError;

	static new(): DBUSERSGetAccountErrorSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSGetAccountError): NSDictionary<string, any>;
}

declare const enum DBUSERSGetAccountErrorTag {

	NoAccount = 0,

	Other = 1
}

declare class DBUSERSIndividualSpaceAllocation extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSIndividualSpaceAllocation; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSIndividualSpaceAllocation; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly allocated: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { allocated: number; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithAllocated(allocated: number): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSIndividualSpaceAllocationSerializer extends NSObject {

	static alloc(): DBUSERSIndividualSpaceAllocationSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSIndividualSpaceAllocation;

	static new(): DBUSERSIndividualSpaceAllocationSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSIndividualSpaceAllocation): NSDictionary<string, any>;
}

declare class DBUSERSName extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSName; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSName; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly abbreviatedName: string;

	readonly displayName: string;

	readonly familiarName: string;

	readonly givenName: string;

	readonly surname: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { givenName: string; surname: string; familiarName: string; displayName: string; abbreviatedName: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithGivenNameSurnameFamiliarNameDisplayNameAbbreviatedName(givenName: string, surname: string, familiarName: string, displayName: string, abbreviatedName: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSNameSerializer extends NSObject {

	static alloc(): DBUSERSNameSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSName;

	static new(): DBUSERSNameSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSName): NSDictionary<string, any>;
}

declare class DBUSERSRouteObjects extends NSObject {

	static DBUSERSGetAccount(): DBRoute;

	static DBUSERSGetAccountBatch(): DBRoute;

	static DBUSERSGetCurrentAccount(): DBRoute;

	static DBUSERSGetSpaceUsage(): DBRoute;

	static alloc(): DBUSERSRouteObjects; // inherited from NSObject

	static new(): DBUSERSRouteObjects; // inherited from NSObject
}

declare class DBUSERSSpaceAllocation extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSSpaceAllocation; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSSpaceAllocation; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly individual: DBUSERSIndividualSpaceAllocation;

	readonly tag: DBUSERSSpaceAllocationTag;

	readonly team: DBUSERSTeamSpaceAllocation;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { individual: DBUSERSIndividualSpaceAllocation; });

	constructor(o: { other: void; });

	constructor(o: { team: DBUSERSTeamSpaceAllocation; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithIndividual(individual: DBUSERSIndividualSpaceAllocation): this;

	initWithOther(): this;

	initWithTeam(team: DBUSERSTeamSpaceAllocation): this;

	isEqual(object: any): boolean;

	isIndividual(): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	isOther(): boolean;

	isTeam(): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;

	tagName(): string;
}

declare class DBUSERSSpaceAllocationSerializer extends NSObject {

	static alloc(): DBUSERSSpaceAllocationSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSSpaceAllocation;

	static new(): DBUSERSSpaceAllocationSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSSpaceAllocation): NSDictionary<string, any>;
}

declare const enum DBUSERSSpaceAllocationTag {

	Individual = 0,

	Team = 1,

	Other = 2
}

declare class DBUSERSSpaceUsage extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSSpaceUsage; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSSpaceUsage; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly allocation: DBUSERSSpaceAllocation;

	readonly used: number;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { used: number; allocation: DBUSERSSpaceAllocation; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUsedAllocation(used: number, allocation: DBUSERSSpaceAllocation): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSSpaceUsageSerializer extends NSObject {

	static alloc(): DBUSERSSpaceUsageSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSSpaceUsage;

	static new(): DBUSERSSpaceUsageSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSSpaceUsage): NSDictionary<string, any>;
}

declare class DBUSERSTeam extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSTeam; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSTeam; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly id_: string;

	readonly name: string;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { id_: string; name: string; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithId_Name(id_: string, name: string): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSTeamSerializer extends NSObject {

	static alloc(): DBUSERSTeamSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSTeam;

	static new(): DBUSERSTeamSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSTeam): NSDictionary<string, any>;
}

declare class DBUSERSTeamSpaceAllocation extends NSObject implements DBSerializable, NSCopying {

	static alloc(): DBUSERSTeamSpaceAllocation; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): any;

	static new(): DBUSERSTeamSpaceAllocation; // inherited from NSObject

	static serialize(instance: any): NSDictionary<string, any>;

	readonly allocated: number;

	readonly used: number;

	readonly userWithinTeamSpaceAllocated: number;

	readonly userWithinTeamSpaceLimitType: DBTEAMCOMMONMemberSpaceLimitType;

	readonly debugDescription: string; // inherited from NSObjectProtocol

	readonly description: string; // inherited from NSObjectProtocol

	readonly hash: number; // inherited from NSObjectProtocol

	readonly isProxy: boolean; // inherited from NSObjectProtocol

	readonly superclass: typeof NSObject; // inherited from NSObjectProtocol

	readonly  // inherited from NSObjectProtocol

	constructor(o: { used: number; allocated: number; userWithinTeamSpaceAllocated: number; userWithinTeamSpaceLimitType: DBTEAMCOMMONMemberSpaceLimitType; });

	class(): typeof NSObject;

	conformsToProtocol(aProtocol: any /* Protocol */): boolean;

	copyWithZone(zone: interop.Pointer | interop.Reference<any>): any;

	description(): string;

	initWithUsedAllocatedUserWithinTeamSpaceAllocatedUserWithinTeamSpaceLimitType(used: number, allocated: number, userWithinTeamSpaceAllocated: number, userWithinTeamSpaceLimitType: DBTEAMCOMMONMemberSpaceLimitType): this;

	isEqual(object: any): boolean;

	isKindOfClass(aClass: typeof NSObject): boolean;

	isMemberOfClass(aClass: typeof NSObject): boolean;

	performSelector(aSelector: string): any;

	performSelectorWithObject(aSelector: string, object: any): any;

	performSelectorWithObjectWithObject(aSelector: string, object1: any, object2: any): any;

	respondsToSelector(aSelector: string): boolean;

	retainCount(): number;

	self(): this;
}

declare class DBUSERSTeamSpaceAllocationSerializer extends NSObject {

	static alloc(): DBUSERSTeamSpaceAllocationSerializer; // inherited from NSObject

	static deserialize(dict: NSDictionary<string, any>): DBUSERSTeamSpaceAllocation;

	static new(): DBUSERSTeamSpaceAllocationSerializer; // inherited from NSObject

	static serialize(instance: DBUSERSTeamSpaceAllocation): NSDictionary<string, any>;
}

declare class DBUSERSUserAuthRoutes extends NSObject {

	static alloc(): DBUSERSUserAuthRoutes; // inherited from NSObject

	static new(): DBUSERSUserAuthRoutes; // inherited from NSObject

	readonly client: DBTransportClient;

	constructor();

	getAccount(accountId: string): DBRpcTask<DBUSERSBasicAccount, DBUSERSGetAccountError>;

	getAccountBatch(accountIds: NSArray<string> | string[]): DBRpcTask<NSArray<DBUSERSBasicAccount>, DBUSERSGetAccountBatchError>;

	getCurrentAccount(): DBRpcTask<DBUSERSFullAccount, DBNilObject>;

	getSpaceUsage(): DBRpcTask<DBUSERSSpaceUsage, DBNilObject>;

	init(client: DBTransportClient): this;
}

declare class DBUploadTask<TResponse, TError> extends DBTask {

	static alloc<TResponse, TError>(): DBUploadTask<TResponse, TError>; // inherited from NSObject

	static new<TResponse, TError>(): DBUploadTask<TResponse, TError>; // inherited from NSObject

	setProgressBlock(progressBlock: (p1: number, p2: number, p3: number) => void): DBUploadTask<any, any>;

	setProgressBlockQueue(progressBlock: (p1: number, p2: number, p3: number) => void, queue: NSOperationQueue): DBUploadTask<any, any>;

	setResponseBlock(responseBlock: (p1: TResponse, p2: TError, p3: DBRequestError) => void): DBUploadTask<TResponse, TError>;

	setResponseBlockQueue(responseBlock: (p1: TResponse, p2: TError, p3: DBRequestError) => void, queue: NSOperationQueue): DBUploadTask<TResponse, TError>;
}

declare class DBUserBaseClient extends NSObject {

	static alloc(): DBUserBaseClient; // inherited from NSObject

	static new(): DBUserBaseClient; // inherited from NSObject

	readonly authRoutes: DBAUTHUserAuthRoutes;

	readonly contactsRoutes: DBCONTACTSUserAuthRoutes;

	readonly filePropertiesRoutes: DBFILEPROPERTIESUserAuthRoutes;

	readonly fileRequestsRoutes: DBFILEREQUESTSUserAuthRoutes;

	readonly filesRoutes: DBFILESUserAuthRoutes;

	readonly paperRoutes: DBPAPERUserAuthRoutes;

	readonly sharingRoutes: DBSHARINGUserAuthRoutes;

	readonly usersRoutes: DBUSERSUserAuthRoutes;

	constructor(o: { transportClient: DBTransportClient; });

	initWithTransportClient(client: DBTransportClient): this;
}

declare class DBUserClient extends DBUserBaseClient {

	static alloc(): DBUserClient; // inherited from NSObject

	static new(): DBUserClient; // inherited from NSObject

	readonly tokenUid: string;

	constructor(o: { accessToken: string; });

	constructor(o: { accessToken: string; tokenUid: string; transportConfig: DBTransportDefaultConfig; });

	constructor(o: { accessToken: string; transportConfig: DBTransportDefaultConfig; });

	accessToken(): string;

	initWithAccessToken(accessToken: string): this;

	initWithAccessTokenTokenUidTransportConfig(accessToken: string, tokenUid: string, transportConfig: DBTransportDefaultConfig): this;

	initWithAccessTokenTransportConfig(accessToken: string, transportConfig: DBTransportDefaultConfig): this;

	isAuthorized(): boolean;

	withPathRoot(pathRoot: DBCOMMONPathRoot): DBUserClient;
}

declare var ObjectiveDropboxOfficialVersionNumber: number;

declare var ObjectiveDropboxOfficialVersionNumberVar: number;

declare var ObjectiveDropboxOfficialVersionString: interop.Reference<number>;

declare var ObjectiveDropboxOfficialVersionStringVar: interop.Reference<number>;

declare var kBackgroundSessionId: string;

declare var kCSERFKey: string;

declare var kForegroundSessionId: string;

declare var kSDKDebug: boolean;

declare var kSDKDebugHost: string;

declare var kV2SDKDefaultUserAgentPrefix: string;

declare var kV2SDKVersion: string;
